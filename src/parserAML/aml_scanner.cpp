#line 2 "/home/nawras/SCAM/src/parserAML/aml_scanner.cpp"

#line 4 "/home/nawras/SCAM/src/parserAML/aml_scanner.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */

/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 0
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
/* %endif */

/* %if-c-only */

/* %endif */

/* %if-c-only */

/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

                                                                                                                        /* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types.
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t;
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

                                                                                                                        /* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif    /* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
                                                                                                                        /* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
extern yy_size_t yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
extern FILE *yyin, *yyout;
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

#define YY_LESS_LINENO(n)
#define YY_LINENO_REWIND_TO(ptr)

/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
    do \
        { \
        /* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
        *yy_cp = (yy_hold_char); \
        YY_RESTORE_YY_MORE_OFFSET \
        (yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
        YY_DO_BEFORE_ACTION; /* set up yytext again */ \
        } \
    while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state {
/* %if-c-only */
    FILE *yy_input_file;
/* %endif */

/* %if-c++-only */
/* %endif */

    char *yy_ch_buf;        /* input buffer */
    char *yy_buf_pos;        /* current position in input buffer */

    /* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
    yy_size_t yy_buf_size;

    /* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
    int yy_n_chars;

    /* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
    int yy_is_our_buffer;

    /* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
    int yy_is_interactive;

    /* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
    int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

    /* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
    int yy_fill_buffer;

    int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
    /* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE *yy_buffer_stack = 0; /**< Stack as an array. */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */

/* %if-not-reentrant */
/* %not-for-header */

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;        /* number of characters read into yy_ch_buf */
yy_size_t yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;        /* whether we need to initialize */
static int yy_start = 0;    /* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;
/* %ok-for-header */

/* %endif */

void yyrestart(FILE *input_file);

void yy_switch_to_buffer(YY_BUFFER_STATE new_buffer);

YY_BUFFER_STATE yy_create_buffer(FILE *file, int size);

void yy_delete_buffer(YY_BUFFER_STATE b);

void yy_flush_buffer(YY_BUFFER_STATE b);

void yypush_buffer_state(YY_BUFFER_STATE new_buffer);

void yypop_buffer_state(void);

static void yyensure_buffer_stack(void);

static void yy_load_buffer_state(void);

static void yy_init_buffer(YY_BUFFER_STATE b, FILE *file);

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer(char *base, yy_size_t size);

YY_BUFFER_STATE yy_scan_string(yyconst char *yy_str);

YY_BUFFER_STATE yy_scan_bytes(yyconst char *bytes, yy_size_t len);

/* %endif */

void *yyalloc(yy_size_t);

void *yyrealloc(void *, yy_size_t);

void yyfree(void *);

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
    { \
    if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
        YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
    } \
    YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
    }

#define yy_set_bol(at_bol) \
    { \
    if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
        YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
    } \
    YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
    }

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

/* %% [1.5] DFA */

/* %if-c-only Standard (non-C++) definition */

static yy_state_type yy_get_previous_state(void);

static yy_state_type yy_try_NUL_trans(yy_state_type current_state);

static int yy_get_next_buffer(void);

#if defined(__GNUC__) && __GNUC__ >= 3

__attribute__((__noreturn__))
#endif
static void yy_fatal_error(yyconst char msg[]);

/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
    (yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
    yyleng = (size_t) (yy_cp - yy_bp); \
    (yy_hold_char) = *yy_cp; \
    *yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
    (yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 131
#define YY_END_OF_BUFFER 132
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info {
    flex_int32_t yy_verify;
    flex_int32_t yy_nxt;
};
static yyconst flex_int16_t yy_accept[371] =
        {0,
         0, 0, 0, 0, 0, 0, 0, 0, 132, 130,
         1, 2, 3, 113, 86, 87, 70, 71, 84, 82,
         77, 83, 76, 85, 128, 74, 75, 105, 79, 103,
         43, 129, 129, 129, 129, 129, 129, 129, 129, 129,
         129, 129, 129, 129, 129, 129, 129, 93, 129, 129,
         129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
         129, 129, 129, 72, 90, 73, 96, 7, 6, 7,
         10, 9, 131, 1, 2, 102, 107, 80, 81, 78,
         4, 8, 128, 99, 106, 101, 104, 100, 129, 129,
         129, 129, 129, 129, 129, 129, 129, 129, 129, 129,

         55, 34, 129, 129, 129, 129, 129, 112, 129, 129,
         129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
         129, 129, 129, 129, 129, 129, 129, 129, 54, 33,
         129, 129, 129, 129, 129, 111, 129, 129, 129, 129,
         129, 129, 129, 129, 129, 110, 5, 109, 129, 129,
         129, 129, 129, 129, 129, 129, 45, 129, 67, 129,
         129, 51, 26, 129, 129, 129, 121, 115, 38, 129,
         129, 69, 129, 22, 129, 129, 129, 117, 108, 129,
         129, 129, 129, 129, 129, 129, 129, 44, 129, 66,
         129, 129, 50, 25, 129, 129, 129, 120, 114, 37,

         129, 129, 68, 129, 21, 129, 129, 129, 116, 129,
         129, 129, 129, 129, 49, 129, 129, 129, 57, 14,
         129, 129, 12, 129, 129, 123, 129, 129, 129, 129,
         59, 129, 129, 129, 127, 129, 119, 129, 129, 129,
         129, 129, 48, 129, 129, 129, 56, 13, 129, 129,
         11, 129, 129, 122, 129, 129, 129, 129, 58, 129,
         129, 129, 126, 129, 118, 129, 129, 92, 129, 129,
         129, 129, 16, 125, 129, 32, 129, 129, 129, 129,
         129, 129, 129, 129, 61, 129, 129, 91, 129, 129,
         129, 129, 15, 124, 129, 31, 129, 129, 129, 129,

         129, 129, 129, 129, 60, 89, 98, 95, 129, 129,
         129, 129, 24, 129, 129, 129, 36, 129, 30, 20,
         88, 97, 94, 129, 129, 129, 129, 23, 129, 129,
         129, 35, 129, 29, 19, 129, 129, 47, 129, 63,
         129, 129, 129, 129, 129, 46, 129, 62, 129, 129,
         129, 28, 53, 18, 65, 129, 40, 27, 52, 17,
         64, 129, 39, 129, 129, 129, 129, 42, 41, 0
        };

static yyconst YY_CHAR yy_ec[256] =
        {0,
         1, 1, 1, 1, 1, 1, 1, 1, 2, 3,
         1, 4, 4, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 2, 5, 1, 1, 1, 6, 7, 1, 8,
         9, 10, 11, 12, 13, 14, 15, 16, 16, 16,
         16, 16, 16, 16, 16, 16, 16, 17, 18, 19,
         20, 21, 1, 22, 23, 24, 25, 26, 27, 28,
         29, 30, 31, 32, 33, 34, 35, 36, 37, 38,
         32, 39, 40, 41, 42, 32, 43, 44, 45, 32,
         1, 1, 1, 46, 47, 1, 48, 49, 50, 51,

         52, 53, 54, 55, 56, 32, 57, 58, 59, 60,
         61, 62, 32, 63, 64, 65, 66, 32, 67, 68,
         69, 32, 70, 71, 72, 73, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1,

         1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1
        };

static yyconst YY_CHAR yy_meta[74] =
        {0,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 2, 1, 1, 1, 1,
         1, 1, 2, 2, 2, 2, 2, 2, 2, 2,
         2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
         2, 2, 2, 2, 2, 1, 2, 2, 2, 2,
         2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
         2, 2, 2, 2, 2, 2, 2, 2, 2, 1,
         1, 1, 1
        };

static yyconst flex_uint16_t yy_base[375] =
        {0,
         0, 0, 71, 72, 382, 381, 0, 0, 383, 386,
         380, 378, 386, 360, 386, 372, 386, 386, 386, 367,
         386, 63, 386, 68, 361, 386, 386, 60, 356, 65,
         386, 339, 56, 337, 0, 55, 54, 346, 64, 335,
         74, 60, 344, 76, 331, 330, 68, 386, 308, 51,
         306, 50, 65, 314, 35, 304, 66, 53, 312, 65,
         300, 299, 62, 386, 290, 386, 386, 386, 386, 345,
         386, 386, 386, 357, 355, 386, 386, 386, 386, 386,
         386, 386, 341, 386, 386, 386, 386, 386, 0, 330,
         314, 317, 316, 89, 312, 309, 316, 314, 312, 306,

         0, 95, 320, 309, 297, 299, 89, 0, 301, 318,
         107, 317, 299, 296, 306, 299, 296, 283, 268, 271,
         270, 78, 266, 263, 270, 268, 266, 260, 0, 79,
         273, 263, 275, 253, 77, 0, 255, 271, 89, 270,
         253, 250, 259, 253, 250, 386, 386, 0, 120, 287,
         277, 272, 109, 282, 273, 267, 0, 281, 0, 264,
         262, 0, 261, 276, 107, 260, 0, 0, 262, 273,
         257, 0, 258, 255, 268, 253, 254, 0, 0, 99,
         242, 233, 228, 91, 237, 229, 223, 0, 236, 0,
         220, 218, 0, 217, 231, 95, 216, 0, 0, 218,

         228, 213, 0, 214, 211, 223, 209, 210, 0, 236,
         234, 231, 232, 235, 0, 230, 239, 224, 0, 0,
         237, 222, 0, 221, 227, 0, 233, 220, 218, 215,
         0, 225, 228, 227, 0, 226, 0, 192, 190, 187,
         188, 191, 0, 186, 194, 180, 0, 0, 192, 178,
         0, 177, 183, 0, 188, 176, 174, 171, 0, 180,
         183, 182, 0, 181, 0, 206, 190, 0, 191, 198,
         186, 202, 0, 0, 195, 0, 198, 201, 192, 195,
         180, 183, 193, 183, 0, 166, 151, 0, 152, 158,
         147, 162, 0, 0, 155, 0, 158, 161, 152, 155,

         141, 144, 153, 144, 0, 0, 0, 0, 166, 165,
         159, 162, 0, 172, 156, 171, 0, 159, 0, 0,
         0, 0, 0, 134, 133, 127, 130, 0, 139, 124,
         138, 0, 127, 0, 0, 157, 159, 0, 148, 0,
         156, 141, 141, 126, 128, 0, 118, 0, 125, 111,
         111, 0, 0, 0, 0, 143, 0, 0, 0, 0,
         0, 110, 0, 128, 102, 125, 93, 0, 0, 386,
         167, 169, 171, 150
        };

static yyconst flex_int16_t yy_def[375] =
        {0,
         370, 1, 371, 371, 372, 372, 373, 373, 370, 370,
         370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
         370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
         370, 374, 374, 374, 374, 374, 374, 374, 374, 374,
         374, 374, 374, 374, 374, 374, 374, 370, 374, 374,
         374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
         374, 374, 374, 370, 370, 370, 370, 370, 370, 370,
         370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
         370, 370, 370, 370, 370, 370, 370, 370, 374, 374,
         374, 374, 374, 374, 374, 374, 374, 374, 374, 374,

         374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
         374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
         374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
         374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
         374, 374, 374, 374, 374, 370, 370, 374, 374, 374,
         374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
         374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
         374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
         374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
         374, 374, 374, 374, 374, 374, 374, 374, 374, 374,

         374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
         374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
         374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
         374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
         374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
         374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
         374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
         374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
         374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
         374, 374, 374, 374, 374, 374, 374, 374, 374, 374,

         374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
         374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
         374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
         374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
         374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
         374, 374, 374, 374, 374, 374, 374, 374, 374, 374,
         374, 374, 374, 374, 374, 374, 374, 374, 374, 0,
         370, 370, 370, 370
        };

static yyconst flex_uint16_t yy_nxt[460] =
        {0,
         10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
         20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
         30, 31, 32, 33, 34, 35, 36, 37, 38, 35,
         39, 35, 35, 35, 40, 41, 42, 35, 43, 44,
         45, 35, 46, 47, 35, 48, 10, 49, 50, 51,
         35, 52, 53, 54, 35, 55, 35, 35, 56, 57,
         58, 35, 59, 60, 61, 35, 62, 63, 35, 64,
         65, 66, 67, 69, 69, 79, 97, 81, 84, 85,
         70, 70, 82, 80, 87, 88, 91, 129, 95, 92,
         96, 101, 93, 98, 130, 99, 104, 105, 108, 102,

         106, 109, 111, 116, 117, 112, 119, 123, 120, 124,
         107, 121, 125, 132, 133, 136, 139, 134, 137, 140,
         113, 144, 145, 152, 153, 160, 135, 167, 126, 168,
         127, 171, 161, 141, 191, 162, 183, 184, 202, 198,
         192, 199, 210, 193, 217, 227, 238, 172, 218, 228,
         245, 89, 369, 203, 246, 211, 212, 255, 239, 240,
         368, 256, 367, 213, 366, 365, 241, 68, 68, 71,
         71, 73, 73, 364, 363, 362, 361, 360, 359, 358,
         357, 356, 355, 354, 353, 352, 351, 350, 349, 348,
         347, 346, 345, 344, 343, 342, 341, 340, 339, 338,

         337, 336, 335, 334, 333, 332, 331, 330, 329, 328,
         327, 326, 325, 324, 323, 322, 321, 320, 319, 318,
         317, 316, 315, 314, 313, 312, 311, 310, 309, 308,
         307, 306, 305, 304, 303, 302, 301, 300, 299, 298,
         297, 296, 295, 294, 293, 292, 291, 290, 289, 288,
         287, 286, 285, 284, 283, 282, 281, 280, 279, 278,
         277, 276, 275, 274, 273, 272, 271, 270, 269, 268,
         267, 266, 265, 264, 263, 262, 261, 260, 259, 258,
         257, 254, 253, 252, 251, 250, 249, 248, 247, 244,
         243, 242, 237, 236, 235, 234, 233, 232, 231, 230,

         229, 226, 225, 224, 223, 222, 221, 220, 219, 216,
         215, 214, 209, 208, 207, 206, 205, 204, 201, 200,
         197, 196, 195, 194, 190, 189, 188, 187, 186, 185,
         182, 181, 180, 179, 178, 177, 176, 175, 174, 173,
         170, 169, 166, 165, 164, 163, 159, 158, 157, 156,
         155, 154, 151, 150, 149, 148, 83, 75, 74, 147,
         146, 143, 142, 138, 131, 128, 122, 118, 115, 114,
         110, 103, 100, 94, 90, 86, 83, 78, 77, 76,
         75, 74, 370, 72, 72, 9, 370, 370, 370, 370,
         370, 370, 370, 370, 370, 370, 370, 370, 370, 370,

         370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
         370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
         370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
         370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
         370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
         370, 370, 370, 370, 370, 370, 370, 370, 370
        };

static yyconst flex_int16_t yy_chk[460] =
        {0,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 3, 4, 22, 37, 24, 28, 28,
         3, 4, 24, 22, 30, 30, 33, 55, 36, 33,
         36, 39, 33, 37, 55, 37, 41, 41, 42, 39,

         41, 42, 44, 47, 47, 44, 50, 52, 50, 52,
         41, 50, 53, 57, 57, 58, 60, 57, 58, 60,
         44, 63, 63, 94, 94, 102, 57, 107, 53, 107,
         53, 111, 102, 60, 130, 102, 122, 122, 139, 135,
         130, 135, 149, 130, 153, 165, 180, 111, 153, 165,
         184, 374, 367, 139, 184, 149, 149, 196, 180, 180,
         366, 196, 365, 149, 364, 362, 180, 371, 371, 372,
         372, 373, 373, 356, 351, 350, 349, 347, 345, 344,
         343, 342, 341, 339, 337, 336, 333, 331, 330, 329,
         327, 326, 325, 324, 318, 316, 315, 314, 312, 311,

         310, 309, 304, 303, 302, 301, 300, 299, 298, 297,
         295, 292, 291, 290, 289, 287, 286, 284, 283, 282,
         281, 280, 279, 278, 277, 275, 272, 271, 270, 269,
         267, 266, 264, 262, 261, 260, 258, 257, 256, 255,
         253, 252, 250, 249, 246, 245, 244, 242, 241, 240,
         239, 238, 236, 234, 233, 232, 230, 229, 228, 227,
         225, 224, 222, 221, 218, 217, 216, 214, 213, 212,
         211, 210, 208, 207, 206, 205, 204, 202, 201, 200,
         197, 195, 194, 192, 191, 189, 187, 186, 185, 183,
         182, 181, 177, 176, 175, 174, 173, 171, 170, 169,

         166, 164, 163, 161, 160, 158, 156, 155, 154, 152,
         151, 150, 145, 144, 143, 142, 141, 140, 138, 137,
         134, 133, 132, 131, 128, 127, 126, 125, 124, 123,
         121, 120, 119, 118, 117, 116, 115, 114, 113, 112,
         110, 109, 106, 105, 104, 103, 100, 99, 98, 97,
         96, 95, 93, 92, 91, 90, 83, 75, 74, 70,
         65, 62, 61, 59, 56, 54, 51, 49, 46, 45,
         43, 40, 38, 34, 32, 29, 25, 20, 16, 14,
         12, 11, 9, 6, 5, 370, 370, 370, 370, 370,
         370, 370, 370, 370, 370, 370, 370, 370, 370, 370,

         370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
         370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
         370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
         370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
         370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
         370, 370, 370, 370, 370, 370, 370, 370, 370
        };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 1;

static yyconst flex_int16_t yy_rule_linenum[131] =
        {0,
         45, 46, 48, 50, 51, 52, 53, 55, 56, 57,
         60, 61, 62, 63, 64, 65, 66, 67, 68, 69,
         70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
         80, 81, 82, 83, 84, 85, 86, 87, 88, 89,
         90, 91, 92, 93, 94, 95, 96, 97, 98, 99,
         100, 101, 102, 104, 105, 106, 107, 109, 110, 111,
         112, 113, 114, 115, 116, 117, 118, 119, 120, 122,
         123, 124, 125, 126, 127, 128, 129, 130, 132, 134,
         135, 136, 137, 138, 139, 140, 142, 143, 144, 145,
         146, 147, 148, 149, 150, 151, 152, 153, 154, 155,

         157, 158, 159, 160, 161, 162, 164, 165, 166, 167,
         168, 169, 170, 171, 172, 173, 174, 175, 176, 177,
         178, 179, 180, 182, 183, 184, 185, 187, 195, 197
        };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "aml_scanner.lpp"
#line 3 "aml_scanner.lpp"

#include <cstdlib>
#include <cerrno>
#include <climits>
#include <string>
#include "aml_driver.h"
#include "aml_parser.hpp"


// Work around an incompatibility in flex (at least versions
// 2.5.31 through 2.5.33): it generates code that does
// not conform to C89.  See Debian bug 333231
// <http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=333231>.
# undef yywrap
# define yywrap() 1


#define yyterminate() return token::END

// The location of the current token.
static yy::location loc;
#define YY_NO_INPUT 1


#line 37 "aml_scanner.lpp"
#define YY_USER_ACTION  loc.columns(yyleng);
#line 823 "/home/nawras/SCAM/src/parserAML/aml_scanner.cpp"

#define INITIAL 0
#define ACOMMENT 1
#define LINECOMMENT 2
#define LOCATION_HANDLE 3

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
#include <unistd.h>
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */

static int yy_init_globals(void);

/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy(void);

int yyget_debug(void);

void yyset_debug(int debug_flag);

YY_EXTRA_TYPE yyget_extra(void);

void yyset_extra(YY_EXTRA_TYPE user_defined);

FILE *yyget_in(void);

void yyset_in(FILE *_in_str);

FILE *yyget_out(void);

void yyset_out(FILE *_out_str);

yy_size_t yyget_leng(void);

char *yyget_text(void);

int yyget_lineno(void);

void yyset_lineno(int _line_number);

/* %if-bison-bridge */
/* %endif */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
                                                                                                                        #ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

/* %not-for-header */

#ifndef YY_NO_UNPUT

#endif
/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
                                                                                                                        /* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */

/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
                                                                                                                        /* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf, result, max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
    if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
        { \
        int c = '*'; \
        size_t n; \
        for ( n = 0; n < max_size && \
                 (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
            buf[n] = (char) c; \
        if ( c == '\n' ) \
            buf[n++] = (char) c; \
        if ( c == EOF && ferror( yyin ) ) \
            YY_FATAL_ERROR( "input in flex scanner failed" ); \
        result = n; \
        } \
    else \
        { \
        errno=0; \
        while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
            { \
            if( errno != EINTR) \
                { \
                YY_FATAL_ERROR( "input in flex scanner failed" ); \
                break; \
                } \
            errno=0; \
            clearerr(yyin); \
            } \
        }\
\
/* %if-c++-only C++ definition \ */\
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
                                                                                                                        #define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */

extern int yylex (void);

#define YY_DECL int yylex (void)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
    YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL {
    yy_state_type yy_current_state;
    char *yy_cp, *yy_bp;
    int yy_act;

    if (!(yy_init)) {
        (yy_init) = 1;

#ifdef YY_USER_INIT
        YY_USER_INIT;
#endif

        if (!(yy_start))
            (yy_start) = 1;    /* first start state */

        if (!yyin)
/* %if-c-only */
            yyin = stdin;
/* %endif */
/* %if-c++-only */
/* %endif */

        if (!yyout)
/* %if-c-only */
            yyout = stdout;
/* %endif */
/* %if-c++-only */
/* %endif */

        if (!YY_CURRENT_BUFFER) {
            yyensure_buffer_stack();
            YY_CURRENT_BUFFER_LVALUE =
                    yy_create_buffer(yyin, YY_BUF_SIZE);
        }

        yy_load_buffer_state();
    }

    {
/* %% [7.0] user's declarations go here */
#line 40 "aml_scanner.lpp"


        loc.step();

#line 1115 "/home/nawras/SCAM/src/parserAML/aml_scanner.cpp"

        while ( /*CONSTCOND*/1)        /* loops until end-of-file is reached */
        {
/* %% [8.0] yymore()-related code goes here */
            yy_cp = (yy_c_buf_p);

            /* Support of yytext. */
            *yy_cp = (yy_hold_char);

            /* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
            yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
            yy_current_state = (yy_start);
            yy_match:
            do {
                YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
                if (yy_accept[yy_current_state]) {
                    (yy_last_accepting_state) = yy_current_state;
                    (yy_last_accepting_cpos) = yy_cp;
                }
                while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state) {
                    yy_current_state = (int) yy_def[yy_current_state];
                    if (yy_current_state >= 371)
                        yy_c = yy_meta[(unsigned int) yy_c];
                }
                yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
                ++yy_cp;
            } while (yy_current_state != 370);
            yy_cp = (yy_last_accepting_cpos);
            yy_current_state = (yy_last_accepting_state);

            yy_find_action:
/* %% [10.0] code to find the action number goes here */
            yy_act = yy_accept[yy_current_state];

            YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

            do_action:    /* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
            if (yy_flex_debug) {
                if (yy_act == 0)
                    fprintf(stderr, "--scanner backing up\n");
                else if (yy_act < 131)
                    fprintf(stderr, "--accepting rule at line %ld (\"%s\")\n",
                            (long) yy_rule_linenum[yy_act], yytext);
                else if (yy_act == 131)
                    fprintf(stderr, "--accepting default rule (\"%s\")\n",
                            yytext);
                else if (yy_act == 132)
                    fprintf(stderr, "--(end of buffer or a NUL)\n");
                else
                    fprintf(stderr, "--EOF (start condition %d)\n", YY_START);
            }

            switch (yy_act) { /* beginning of action switch */
/* %% [13.0] actions go here */
                case 0: /* must back up */
                    /* undo the effects of YY_DO_BEFORE_ACTION */
                    *yy_cp = (yy_hold_char);
                    yy_cp = (yy_last_accepting_cpos);
                    yy_current_state = (yy_last_accepting_state);
                    goto yy_find_action;

                case 1:
                    YY_RULE_SETUP
#line 45 "aml_scanner.lpp"
                    loc.step();
                    YY_BREAK
                case 2:
/* rule 2 can match eol */
                    YY_RULE_SETUP
#line 46 "aml_scanner.lpp"
                    loc.lines(yyleng);
                    YY_BREAK
                case 3:
/* rule 3 can match eol */
                    YY_RULE_SETUP
#line 48 "aml_scanner.lpp"
                    ;
                    YY_BREAK
                case 4:
                    YY_RULE_SETUP
#line 50 "aml_scanner.lpp"
                    { BEGIN (ACOMMENT); }
                    YY_BREAK
                case 5:
                    YY_RULE_SETUP
#line 51 "aml_scanner.lpp"
                    { BEGIN (INITIAL); }
                    YY_BREAK
                case 6:
/* rule 6 can match eol */
                    YY_RULE_SETUP
#line 52 "aml_scanner.lpp"
                    { loc.lines(); }
                    YY_BREAK
                case 7:
                    YY_RULE_SETUP
#line 53 "aml_scanner.lpp"
                    ;
                    YY_BREAK
                case 8:
                    YY_RULE_SETUP
#line 55 "aml_scanner.lpp"
                    { BEGIN (LINECOMMENT); }
                    YY_BREAK
                case 9:
/* rule 9 can match eol */
                    YY_RULE_SETUP
#line 56 "aml_scanner.lpp"
                    {
                        BEGIN (INITIAL);
                        loc.lines();
                    }
                    YY_BREAK
                case 10:
                    YY_RULE_SETUP
#line 57 "aml_scanner.lpp"
                    ;
                    YY_BREAK
                case 11:
                    YY_RULE_SETUP
#line 60 "aml_scanner.lpp"
                    return yy::aml_parser::make_INIT(loc);
                    YY_BREAK
                case 12:
                    YY_RULE_SETUP
#line 61 "aml_scanner.lpp"
                    return yy::aml_parser::make_INIT(loc);
                    YY_BREAK
                case 13:
                    YY_RULE_SETUP
#line 62 "aml_scanner.lpp"
                    return yy::aml_parser::make_ENUM(loc);
                    YY_BREAK
                case 14:
                    YY_RULE_SETUP
#line 63 "aml_scanner.lpp"
                    return yy::aml_parser::make_ENUM(loc);
                    YY_BREAK
                case 15:
                    YY_RULE_SETUP
#line 64 "aml_scanner.lpp"
                    return yy::aml_parser::make_CONST(loc);
                    YY_BREAK
                case 16:
                    YY_RULE_SETUP
#line 65 "aml_scanner.lpp"
                    return yy::aml_parser::make_CONST(loc);
                    YY_BREAK
                case 17:
                    YY_RULE_SETUP
#line 66 "aml_scanner.lpp"
                    return yy::aml_parser::make_FUNC(loc);
                    YY_BREAK
                case 18:
                    YY_RULE_SETUP
#line 67 "aml_scanner.lpp"
                    return yy::aml_parser::make_FUNC(loc);
                    YY_BREAK
                case 19:
                    YY_RULE_SETUP
#line 68 "aml_scanner.lpp"
                    return yy::aml_parser::make_SYSTEM(loc);
                    YY_BREAK
                case 20:
                    YY_RULE_SETUP
#line 69 "aml_scanner.lpp"
                    return yy::aml_parser::make_SYSTEM(loc);
                    YY_BREAK
                case 21:
                    YY_RULE_SETUP
#line 70 "aml_scanner.lpp"
                    return yy::aml_parser::make_SYSTEM(loc);
                    YY_BREAK
                case 22:
                    YY_RULE_SETUP
#line 71 "aml_scanner.lpp"
                    return yy::aml_parser::make_SYSTEM(loc);
                    YY_BREAK
                case 23:
                    YY_RULE_SETUP
#line 72 "aml_scanner.lpp"
                    return yy::aml_parser::make_MODULE(loc);
                    YY_BREAK
                case 24:
                    YY_RULE_SETUP
#line 73 "aml_scanner.lpp"
                    return yy::aml_parser::make_MODULE(loc);
                    YY_BREAK
                case 25:
                    YY_RULE_SETUP
#line 74 "aml_scanner.lpp"
                    return yy::aml_parser::make_MODULE(loc);
                    YY_BREAK
                case 26:
                    YY_RULE_SETUP
#line 75 "aml_scanner.lpp"
                    return yy::aml_parser::make_MODULE(loc);
                    YY_BREAK
                case 27:
                    YY_RULE_SETUP
#line 76 "aml_scanner.lpp"
                    return yy::aml_parser::make_BLOCKING(loc);
                    YY_BREAK
                case 28:
                    YY_RULE_SETUP
#line 77 "aml_scanner.lpp"
                    return yy::aml_parser::make_BLOCKING(loc);
                    YY_BREAK
                case 29:
                    YY_RULE_SETUP
#line 78 "aml_scanner.lpp"
                    return yy::aml_parser::make_SHARED(loc);
                    YY_BREAK
                case 30:
                    YY_RULE_SETUP
#line 79 "aml_scanner.lpp"
                    return yy::aml_parser::make_SHARED(loc);
                    YY_BREAK
                case 31:
                    YY_RULE_SETUP
#line 80 "aml_scanner.lpp"
                    return yy::aml_parser::make_IN(loc);
                    YY_BREAK
                case 32:
                    YY_RULE_SETUP
#line 81 "aml_scanner.lpp"
                    return yy::aml_parser::make_IN(loc);
                    YY_BREAK
                case 33:
                    YY_RULE_SETUP
#line 82 "aml_scanner.lpp"
                    return yy::aml_parser::make_IN(loc);
                    YY_BREAK
                case 34:
                    YY_RULE_SETUP
#line 83 "aml_scanner.lpp"
                    return yy::aml_parser::make_IN(loc);
                    YY_BREAK
                case 35:
                    YY_RULE_SETUP
#line 84 "aml_scanner.lpp"
                    return yy::aml_parser::make_OUT(loc);
                    YY_BREAK
                case 36:
                    YY_RULE_SETUP
#line 85 "aml_scanner.lpp"
                    return yy::aml_parser::make_OUT(loc);
                    YY_BREAK
                case 37:
                    YY_RULE_SETUP
#line 86 "aml_scanner.lpp"
                    return yy::aml_parser::make_OUT(loc);
                    YY_BREAK
                case 38:
                    YY_RULE_SETUP
#line 87 "aml_scanner.lpp"
                    return yy::aml_parser::make_OUT(loc);
                    YY_BREAK
                case 39:
                    YY_RULE_SETUP
#line 88 "aml_scanner.lpp"
                    return yy::aml_parser::make_SECTIONS(loc);
                    YY_BREAK
                case 40:
                    YY_RULE_SETUP
#line 89 "aml_scanner.lpp"
                    return yy::aml_parser::make_SECTIONS(loc);
                    YY_BREAK
                case 41:
                    YY_RULE_SETUP
#line 90 "aml_scanner.lpp"
                    return yy::aml_parser::make_NEXTSECTION(loc);
                    YY_BREAK
                case 42:
                    YY_RULE_SETUP
#line 91 "aml_scanner.lpp"
                    return yy::aml_parser::make_NEXTSECTION(loc);
                    YY_BREAK
                case 43:
                    YY_RULE_SETUP
#line 92 "aml_scanner.lpp"
                    return yy::aml_parser::make_AT(loc);
                    YY_BREAK
                case 44:
                    YY_RULE_SETUP
#line 93 "aml_scanner.lpp"
                    return yy::aml_parser::make_FSM(loc);
                    YY_BREAK
                case 45:
                    YY_RULE_SETUP
#line 94 "aml_scanner.lpp"
                    return yy::aml_parser::make_FSM(loc);
                    YY_BREAK
                case 46:
                    YY_RULE_SETUP
#line 95 "aml_scanner.lpp"
                    return yy::aml_parser::make_CONNECT(loc);
                    YY_BREAK
                case 47:
                    YY_RULE_SETUP
#line 96 "aml_scanner.lpp"
                    return yy::aml_parser::make_CONNECT(loc);
                    YY_BREAK
                case 48:
                    YY_RULE_SETUP
#line 97 "aml_scanner.lpp"
                    return yy::aml_parser::make_BOOL(loc);
                    YY_BREAK
                case 49:
                    YY_RULE_SETUP
#line 98 "aml_scanner.lpp"
                    return yy::aml_parser::make_BOOL(loc);
                    YY_BREAK
                case 50:
                    YY_RULE_SETUP
#line 99 "aml_scanner.lpp"
                    return yy::aml_parser::make_INT(loc);
                    YY_BREAK
                case 51:
                    YY_RULE_SETUP
#line 100 "aml_scanner.lpp"
                    return yy::aml_parser::make_INT(loc);
                    YY_BREAK
                case 52:
                    YY_RULE_SETUP
#line 101 "aml_scanner.lpp"
                    return yy::aml_parser::make_COMPOUND(loc);
                    YY_BREAK
                case 53:
                    YY_RULE_SETUP
#line 102 "aml_scanner.lpp"
                    return yy::aml_parser::make_COMPOUND(loc);
                    YY_BREAK
                case 54:
                    YY_RULE_SETUP
#line 104 "aml_scanner.lpp"
                    return yy::aml_parser::make_IF(loc);
                    YY_BREAK
                case 55:
                    YY_RULE_SETUP
#line 105 "aml_scanner.lpp"
                    return yy::aml_parser::make_IF(loc);
                    YY_BREAK
                case 56:
                    YY_RULE_SETUP
#line 106 "aml_scanner.lpp"
                    return yy::aml_parser::make_ELSE(loc);
                    YY_BREAK
                case 57:
                    YY_RULE_SETUP
#line 107 "aml_scanner.lpp"
                    return yy::aml_parser::make_ELSE(loc);
                    YY_BREAK
                case 58:
                    YY_RULE_SETUP
#line 109 "aml_scanner.lpp"
                    return yy::aml_parser::make_READ(loc);
                    YY_BREAK
                case 59:
                    YY_RULE_SETUP
#line 110 "aml_scanner.lpp"
                    return yy::aml_parser::make_READ(loc);
                    YY_BREAK
                case 60:
                    YY_RULE_SETUP
#line 111 "aml_scanner.lpp"
                    return yy::aml_parser::make_WRITE(loc);
                    YY_BREAK
                case 61:
                    YY_RULE_SETUP
#line 112 "aml_scanner.lpp"
                    return yy::aml_parser::make_WRITE(loc);
                    YY_BREAK
                case 62:
                    YY_RULE_SETUP
#line 113 "aml_scanner.lpp"
                    return yy::aml_parser::make_NBREAD(loc);
                    YY_BREAK
                case 63:
                    YY_RULE_SETUP
#line 114 "aml_scanner.lpp"
                    return yy::aml_parser::make_NBREAD(loc);
                    YY_BREAK
                case 64:
                    YY_RULE_SETUP
#line 115 "aml_scanner.lpp"
                    return yy::aml_parser::make_NBWRITE(loc);
                    YY_BREAK
                case 65:
                    YY_RULE_SETUP
#line 116 "aml_scanner.lpp"
                    return yy::aml_parser::make_NBWRITE(loc);
                    YY_BREAK
                case 66:
                    YY_RULE_SETUP
#line 117 "aml_scanner.lpp"
                    return yy::aml_parser::make_GET(loc);
                    YY_BREAK
                case 67:
                    YY_RULE_SETUP
#line 118 "aml_scanner.lpp"
                    return yy::aml_parser::make_GET(loc);
                    YY_BREAK
                case 68:
                    YY_RULE_SETUP
#line 119 "aml_scanner.lpp"
                    return yy::aml_parser::make_SET(loc);
                    YY_BREAK
                case 69:
                    YY_RULE_SETUP
#line 120 "aml_scanner.lpp"
                    return yy::aml_parser::make_SET(loc);
                    YY_BREAK
                case 70:
                    YY_RULE_SETUP
#line 122 "aml_scanner.lpp"
                    return yy::aml_parser::make_LPAREN(loc);
                    YY_BREAK
                case 71:
                    YY_RULE_SETUP
#line 123 "aml_scanner.lpp"
                    return yy::aml_parser::make_RPAREN(loc);
                    YY_BREAK
                case 72:
                    YY_RULE_SETUP
#line 124 "aml_scanner.lpp"
                    return yy::aml_parser::make_LCURLY(loc);
                    YY_BREAK
                case 73:
                    YY_RULE_SETUP
#line 125 "aml_scanner.lpp"
                    return yy::aml_parser::make_RCURLY(loc);
                    YY_BREAK
                case 74:
                    YY_RULE_SETUP
#line 126 "aml_scanner.lpp"
                    return yy::aml_parser::make_COLON(loc);
                    YY_BREAK
                case 75:
                    YY_RULE_SETUP
#line 127 "aml_scanner.lpp"
                    return yy::aml_parser::make_SEMICOLON(loc);
                    YY_BREAK
                case 76:
                    YY_RULE_SETUP
#line 128 "aml_scanner.lpp"
                    return yy::aml_parser::make_PUNKT(loc);
                    YY_BREAK
                case 77:
                    YY_RULE_SETUP
#line 129 "aml_scanner.lpp"
                    return yy::aml_parser::make_COMMA(loc);
                    YY_BREAK
                case 78:
                    YY_RULE_SETUP
#line 130 "aml_scanner.lpp"
                    return yy::aml_parser::make_ARROW(loc);
                    YY_BREAK
                case 79:
                    YY_RULE_SETUP
#line 132 "aml_scanner.lpp"
                    return yy::aml_parser::make_ASSIGNMENT(loc);
                    YY_BREAK
                case 80:
                    YY_RULE_SETUP
#line 134 "aml_scanner.lpp"
                    return yy::aml_parser::make_INCREMENT(loc);
                    YY_BREAK
                case 81:
                    YY_RULE_SETUP
#line 135 "aml_scanner.lpp"
                    return yy::aml_parser::make_DECREMENT(loc);
                    YY_BREAK
                case 82:
                    YY_RULE_SETUP
#line 136 "aml_scanner.lpp"
                    return yy::aml_parser::make_PLUS(loc);
                    YY_BREAK
                case 83:
                    YY_RULE_SETUP
#line 137 "aml_scanner.lpp"
                    return yy::aml_parser::make_MINUS(loc);
                    YY_BREAK
                case 84:
                    YY_RULE_SETUP
#line 138 "aml_scanner.lpp"
                    return yy::aml_parser::make_MULTIPLY(loc);
                    YY_BREAK
                case 85:
                    YY_RULE_SETUP
#line 139 "aml_scanner.lpp"
                    return yy::aml_parser::make_DIVIDE(loc);
                    YY_BREAK
                case 86:
                    YY_RULE_SETUP
#line 140 "aml_scanner.lpp"
                    return yy::aml_parser::make_REMAINDER(loc);
                    YY_BREAK
                case 87:
                    YY_RULE_SETUP
#line 142 "aml_scanner.lpp"
                    return yy::aml_parser::make_BITAND(loc);
                    YY_BREAK
                case 88:
                    YY_RULE_SETUP
#line 143 "aml_scanner.lpp"
                    return yy::aml_parser::make_BITAND(loc);
                    YY_BREAK
                case 89:
                    YY_RULE_SETUP
#line 144 "aml_scanner.lpp"
                    return yy::aml_parser::make_BITAND(loc);
                    YY_BREAK
                case 90:
                    YY_RULE_SETUP
#line 145 "aml_scanner.lpp"
                    return yy::aml_parser::make_BITOR(loc);
                    YY_BREAK
                case 91:
                    YY_RULE_SETUP
#line 146 "aml_scanner.lpp"
                    return yy::aml_parser::make_BITOR(loc);
                    YY_BREAK
                case 92:
                    YY_RULE_SETUP
#line 147 "aml_scanner.lpp"
                    return yy::aml_parser::make_BITOR(loc);
                    YY_BREAK
                case 93:
                    YY_RULE_SETUP
#line 148 "aml_scanner.lpp"
                    return yy::aml_parser::make_BITXOR(loc);
                    YY_BREAK
                case 94:
                    YY_RULE_SETUP
#line 149 "aml_scanner.lpp"
                    return yy::aml_parser::make_BITXOR(loc);
                    YY_BREAK
                case 95:
                    YY_RULE_SETUP
#line 150 "aml_scanner.lpp"
                    return yy::aml_parser::make_BITXOR(loc);
                    YY_BREAK
                case 96:
                    YY_RULE_SETUP
#line 151 "aml_scanner.lpp"
                    return yy::aml_parser::make_BITNOT(loc);
                    YY_BREAK
                case 97:
                    YY_RULE_SETUP
#line 152 "aml_scanner.lpp"
                    return yy::aml_parser::make_BITNOT(loc);
                    YY_BREAK
                case 98:
                    YY_RULE_SETUP
#line 153 "aml_scanner.lpp"
                    return yy::aml_parser::make_BITNOT(loc);
                    YY_BREAK
                case 99:
                    YY_RULE_SETUP
#line 154 "aml_scanner.lpp"
                    return yy::aml_parser::make_SHIFTL(loc);
                    YY_BREAK
                case 100:
                    YY_RULE_SETUP
#line 155 "aml_scanner.lpp"
                    return yy::aml_parser::make_SHIFTR(loc);
                    YY_BREAK
                case 101:
                    YY_RULE_SETUP
#line 157 "aml_scanner.lpp"
                    return yy::aml_parser::make_EQ(loc);
                    YY_BREAK
                case 102:
                    YY_RULE_SETUP
#line 158 "aml_scanner.lpp"
                    return yy::aml_parser::make_NEQ(loc);
                    YY_BREAK
                case 103:
                    YY_RULE_SETUP
#line 159 "aml_scanner.lpp"
                    return yy::aml_parser::make_MORE(loc);
                    YY_BREAK
                case 104:
                    YY_RULE_SETUP
#line 160 "aml_scanner.lpp"
                    return yy::aml_parser::make_MOREEQ(loc);
                    YY_BREAK
                case 105:
                    YY_RULE_SETUP
#line 161 "aml_scanner.lpp"
                    return yy::aml_parser::make_LESS(loc);
                    YY_BREAK
                case 106:
                    YY_RULE_SETUP
#line 162 "aml_scanner.lpp"
                    return yy::aml_parser::make_LESSEQ(loc);
                    YY_BREAK
                case 107:
                    YY_RULE_SETUP
#line 164 "aml_scanner.lpp"
                    return yy::aml_parser::make_AND(loc);
                    YY_BREAK
                case 108:
                    YY_RULE_SETUP
#line 165 "aml_scanner.lpp"
                    return yy::aml_parser::make_AND(loc);
                    YY_BREAK
                case 109:
                    YY_RULE_SETUP
#line 166 "aml_scanner.lpp"
                    return yy::aml_parser::make_AND(loc);
                    YY_BREAK
                case 110:
                    YY_RULE_SETUP
#line 167 "aml_scanner.lpp"
                    return yy::aml_parser::make_OR(loc);
                    YY_BREAK
                case 111:
                    YY_RULE_SETUP
#line 168 "aml_scanner.lpp"
                    return yy::aml_parser::make_OR(loc);
                    YY_BREAK
                case 112:
                    YY_RULE_SETUP
#line 169 "aml_scanner.lpp"
                    return yy::aml_parser::make_OR(loc);
                    YY_BREAK
                case 113:
                    YY_RULE_SETUP
#line 170 "aml_scanner.lpp"
                    return yy::aml_parser::make_NOT(loc);
                    YY_BREAK
                case 114:
                    YY_RULE_SETUP
#line 171 "aml_scanner.lpp"
                    return yy::aml_parser::make_NOT(loc);
                    YY_BREAK
                case 115:
                    YY_RULE_SETUP
#line 172 "aml_scanner.lpp"
                    return yy::aml_parser::make_NOT(loc);
                    YY_BREAK
                case 116:
                    YY_RULE_SETUP
#line 173 "aml_scanner.lpp"
                    return yy::aml_parser::make_XOR(loc);
                    YY_BREAK
                case 117:
                    YY_RULE_SETUP
#line 174 "aml_scanner.lpp"
                    return yy::aml_parser::make_XOR(loc);
                    YY_BREAK
                case 118:
                    YY_RULE_SETUP
#line 175 "aml_scanner.lpp"
                    return yy::aml_parser::make_XNOR(loc);
                    YY_BREAK
                case 119:
                    YY_RULE_SETUP
#line 176 "aml_scanner.lpp"
                    return yy::aml_parser::make_XNOR(loc);
                    YY_BREAK
                case 120:
                    YY_RULE_SETUP
#line 177 "aml_scanner.lpp"
                    return yy::aml_parser::make_NOR(loc);
                    YY_BREAK
                case 121:
                    YY_RULE_SETUP
#line 178 "aml_scanner.lpp"
                    return yy::aml_parser::make_NOR(loc);
                    YY_BREAK
                case 122:
                    YY_RULE_SETUP
#line 179 "aml_scanner.lpp"
                    return yy::aml_parser::make_NAND(loc);
                    YY_BREAK
                case 123:
                    YY_RULE_SETUP
#line 180 "aml_scanner.lpp"
                    return yy::aml_parser::make_NAND(loc);
                    YY_BREAK
                case 124:
                    YY_RULE_SETUP
#line 182 "aml_scanner.lpp"
                    return yy::aml_parser::make_BOOLVAL(false, loc);
                    YY_BREAK
                case 125:
                    YY_RULE_SETUP
#line 183 "aml_scanner.lpp"
                    return yy::aml_parser::make_BOOLVAL(false, loc);
                    YY_BREAK
                case 126:
                    YY_RULE_SETUP
#line 184 "aml_scanner.lpp"
                    return yy::aml_parser::make_BOOLVAL(true, loc);
                    YY_BREAK
                case 127:
                    YY_RULE_SETUP
#line 185 "aml_scanner.lpp"
                    return yy::aml_parser::make_BOOLVAL(true, loc);
                    YY_BREAK
                case 128:
                    YY_RULE_SETUP
#line 187 "aml_scanner.lpp"
                    {
                        errno = 0;
                        long n = strtol(yytext, NULL, 10);
                        if (!(INT_MIN <= n && n <= INT_MAX && errno != ERANGE))
                            driver.error(loc, "integer is out of range");
                        return yy::aml_parser::make_NUM(n, loc);
                    }
                    YY_BREAK
                case 129:
                    YY_RULE_SETUP
#line 195 "aml_scanner.lpp"
                    return yy::aml_parser::make_NAME(yytext, loc);
                    YY_BREAK
                case 130:
                    YY_RULE_SETUP
#line 197 "aml_scanner.lpp"
                    driver.error(loc, "invalid character");
                    YY_BREAK
                case YY_STATE_EOF(INITIAL):
                case YY_STATE_EOF(ACOMMENT):
                case YY_STATE_EOF(LINECOMMENT):
                case YY_STATE_EOF(LOCATION_HANDLE):
#line 199 "aml_scanner.lpp"
                    return yy::aml_parser::make_END(loc);
                    YY_BREAK
                case 131:
                    YY_RULE_SETUP
#line 201 "aml_scanner.lpp"
                    ECHO;
                    YY_BREAK
#line 1863 "/home/nawras/SCAM/src/parserAML/aml_scanner.cpp"

                case YY_END_OF_BUFFER: {
                    /* Amount of text matched not including the EOB char. */
                    int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

                    /* Undo the effects of YY_DO_BEFORE_ACTION. */
                    *yy_cp = (yy_hold_char);
                    YY_RESTORE_YY_MORE_OFFSET

                    if (YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW) {
                        /* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
                        (yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
/* %if-c-only */
                        YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
/* %endif */
/* %if-c++-only */
/* %endif */
                        YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
                    }

                    /* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
                    if ((yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)]) { /* This was really a NUL. */
                        yy_state_type yy_next_state;

                        (yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

                        yy_current_state = yy_get_previous_state();

                        /* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

                        yy_next_state = yy_try_NUL_trans(yy_current_state);

                        yy_bp = (yytext_ptr) + YY_MORE_ADJ;

                        if (yy_next_state) {
                            /* Consume the NUL. */
                            yy_cp = ++(yy_c_buf_p);
                            yy_current_state = yy_next_state;
                            goto yy_match;
                        } else {
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
                            yy_cp = (yy_last_accepting_cpos);
                            yy_current_state = (yy_last_accepting_state);
                            goto yy_find_action;
                        }
                    } else
                        switch (yy_get_next_buffer()) {
                            case EOB_ACT_END_OF_FILE: {
                                (yy_did_buffer_switch_on_eof) = 0;

                                if (yywrap()) {
                                    /* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
                                    (yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

                                    yy_act = YY_STATE_EOF(YY_START);
                                    goto do_action;
                                } else {
                                    if (!(yy_did_buffer_switch_on_eof))
                                        YY_NEW_FILE;
                                }
                                break;
                            }

                            case EOB_ACT_CONTINUE_SCAN:
                                (yy_c_buf_p) =
                                        (yytext_ptr) + yy_amount_of_matched_text;

                                yy_current_state = yy_get_previous_state();

                                yy_cp = (yy_c_buf_p);
                                yy_bp = (yytext_ptr) + YY_MORE_ADJ;
                                goto yy_match;

                            case EOB_ACT_LAST_MATCH:
                                (yy_c_buf_p) =
                                        &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

                                yy_current_state = yy_get_previous_state();

                                yy_cp = (yy_c_buf_p);
                                yy_bp = (yytext_ptr) + YY_MORE_ADJ;
                                goto yy_find_action;
                        }
                    break;
                }

                default:
                    YY_FATAL_ERROR(
                            "fatal flex scanner internal error--no action found");
            } /* end of action switch */
        } /* end of scanning one token */
    } /* end of user's declarations */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
static int yy_get_next_buffer(void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
    char *source = (yytext_ptr);
    yy_size_t number_to_move, i;
    int ret_val;

    if ((yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1])
        YY_FATAL_ERROR(
                "fatal flex scanner internal error--end of buffer missed");

    if (YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0) { /* Don't try to fill the buffer, so this is an EOF. */
        if ((yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1) {
            /* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
            return EOB_ACT_END_OF_FILE;
        } else {
            /* We matched some text prior to the EOB, first
			 * process it.
			 */
            return EOB_ACT_LAST_MATCH;
        }
    }

    /* Try to read more data. */

    /* First move last chars to start of buffer. */
    number_to_move = (yy_size_t) ((yy_c_buf_p) - (yytext_ptr)) - 1;

    for (i = 0; i < number_to_move; ++i)
        *(dest++) = *(source++);

    if (YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING)
        /* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
        YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

    else {
        yy_size_t num_to_read =
                YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

        while (num_to_read <= 0) { /* Not enough room in the buffer - grow it. */

            /* just a shorter name for the current buffer */
            YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

            int yy_c_buf_p_offset =
                    (int) ((yy_c_buf_p) - b->yy_ch_buf);

            if (b->yy_is_our_buffer) {
                yy_size_t new_size = b->yy_buf_size * 2;

                if (new_size <= 0)
                    b->yy_buf_size += b->yy_buf_size / 8;
                else
                    b->yy_buf_size *= 2;

                b->yy_ch_buf = (char *)
                        /* Include room in for 2 EOB chars. */
                        yyrealloc((void *) b->yy_ch_buf, b->yy_buf_size + 2);
            } else
                /* Can't grow it, we don't own it. */
                b->yy_ch_buf = 0;

            if (!b->yy_ch_buf)
                YY_FATAL_ERROR(
                        "fatal error - scanner input buffer overflow");

            (yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

            num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
                          number_to_move - 1;

        }

        if (num_to_read > YY_READ_BUF_SIZE)
            num_to_read = YY_READ_BUF_SIZE;

        /* Read in more data. */
        YY_INPUT((&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
                 (yy_n_chars), num_to_read);

        YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
    }

    if ((yy_n_chars) == 0) {
        if (number_to_move == YY_MORE_ADJ) {
            ret_val = EOB_ACT_END_OF_FILE;
            yyrestart(yyin);
        } else {
            ret_val = EOB_ACT_LAST_MATCH;
            YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
                    YY_BUFFER_EOF_PENDING;
        }
    } else
        ret_val = EOB_ACT_CONTINUE_SCAN;

    if ((int) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
        /* Extend the array by 50%, plus the number we really need. */
        int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
        YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, new_size);
        if (!YY_CURRENT_BUFFER_LVALUE->yy_ch_buf)
            YY_FATAL_ERROR("out of dynamic memory in yy_get_next_buffer()");
    }

    (yy_n_chars) += number_to_move;
    YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
    YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

    (yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

    return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

static yy_state_type yy_get_previous_state(void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    yy_state_type yy_current_state;
    char *yy_cp;

/* %% [15.0] code to get the start state into yy_current_state goes here */
    yy_current_state = (yy_start);

    for (yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp) {
/* %% [16.0] code to find the next state goes here */
        YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
        if (yy_accept[yy_current_state]) {
            (yy_last_accepting_state) = yy_current_state;
            (yy_last_accepting_cpos) = yy_cp;
        }
        while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state) {
            yy_current_state = (int) yy_def[yy_current_state];
            if (yy_current_state >= 371)
                yy_c = yy_meta[(unsigned int) yy_c];
        }
        yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
    }

    return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
static yy_state_type yy_try_NUL_trans(yy_state_type yy_current_state)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
    char *yy_cp = (yy_c_buf_p);

    YY_CHAR yy_c = 1;
    if (yy_accept[yy_current_state]) {
        (yy_last_accepting_state) = yy_current_state;
        (yy_last_accepting_cpos) = yy_cp;
    }
    while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state) {
        yy_current_state = (int) yy_def[yy_current_state];
        if (yy_current_state >= 371)
            yy_c = yy_meta[(unsigned int) yy_c];
    }
    yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
    yy_is_jam = (yy_current_state == 370);

    return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
/* %if-c-only */

/* %endif */
#endif

/* %if-c-only */
#ifndef YY_NO_INPUT
                                                                                                                        #ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

/* %endif */
/* %if-c++-only */
/* %endif */
{
	int c;

	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
#endif    /* ifndef YY_NO_INPUT */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 *
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
void yyrestart(FILE *input_file)
/* %endif */
/* %if-c++-only */
/* %endif */
{

    if (!YY_CURRENT_BUFFER) {
        yyensure_buffer_stack();
        YY_CURRENT_BUFFER_LVALUE =
                yy_create_buffer(yyin, YY_BUF_SIZE);
    }

    yy_init_buffer(YY_CURRENT_BUFFER, input_file);
    yy_load_buffer_state();
}

/* %if-c++-only */
/* %endif */

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 *
 */
/* %if-c-only */
void yy_switch_to_buffer(YY_BUFFER_STATE new_buffer)
/* %endif */
/* %if-c++-only */
/* %endif */
{

    /* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
    yyensure_buffer_stack();
    if (YY_CURRENT_BUFFER == new_buffer)
        return;

    if (YY_CURRENT_BUFFER) {
        /* Flush out information for old buffer. */
        *(yy_c_buf_p) = (yy_hold_char);
        YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
        YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
    }

    YY_CURRENT_BUFFER_LVALUE = new_buffer;
    yy_load_buffer_state();

    /* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
    (yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
static void yy_load_buffer_state(void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    (yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
    (yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
/* %if-c-only */
    yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
/* %endif */
/* %if-c++-only */
/* %endif */
    (yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 *
 * @return the allocated buffer state.
 */
/* %if-c-only */
YY_BUFFER_STATE yy_create_buffer(FILE *file, int size)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    YY_BUFFER_STATE b;

    b = (YY_BUFFER_STATE) yyalloc(sizeof(struct yy_buffer_state));
    if (!b)
        YY_FATAL_ERROR("out of dynamic memory in yy_create_buffer()");

    b->yy_buf_size = (yy_size_t) size;

    /* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
    b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2);
    if (!b->yy_ch_buf)
        YY_FATAL_ERROR("out of dynamic memory in yy_create_buffer()");

    b->yy_is_our_buffer = 1;

    yy_init_buffer(b, file);

    return b;
}

/* %if-c++-only */
/* %endif */

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 *
 */
/* %if-c-only */
void yy_delete_buffer(YY_BUFFER_STATE b)
/* %endif */
/* %if-c++-only */
/* %endif */
{

    if (!b)
        return;

    if (b == YY_CURRENT_BUFFER) /* Not sure if we should pop here. */
        YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

    if (b->yy_is_our_buffer)
        yyfree((void *) b->yy_ch_buf);

    yyfree((void *) b);
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
static void yy_init_buffer(YY_BUFFER_STATE b, FILE *file)
/* %endif */
/* %if-c++-only */
/* %endif */

{
    int oerrno = errno;

    yy_flush_buffer(b);

/* %if-c-only */
    b->yy_input_file = file;
/* %endif */
/* %if-c++-only */
/* %endif */
    b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER) {
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */

    b->yy_is_interactive = file ? (isatty(fileno(file)) > 0) : 0;

/* %endif */
/* %if-c++-only */
/* %endif */
    errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 *
 */
/* %if-c-only */
void yy_flush_buffer(YY_BUFFER_STATE b)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    if (!b)
        return;

    b->yy_n_chars = 0;

    /* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
    b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
    b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

    b->yy_buf_pos = &b->yy_ch_buf[0];

    b->yy_at_bol = 1;
    b->yy_buffer_status = YY_BUFFER_NEW;

    if (b == YY_CURRENT_BUFFER)
        yy_load_buffer_state();
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *
 */
/* %if-c-only */
void yypush_buffer_state(YY_BUFFER_STATE new_buffer)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    if (new_buffer == NULL)
        return;

    yyensure_buffer_stack();

    /* This block is copied from yy_switch_to_buffer. */
    if (YY_CURRENT_BUFFER) {
        /* Flush out information for old buffer. */
        *(yy_c_buf_p) = (yy_hold_char);
        YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
        YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
    }

    /* Only push if top exists. Otherwise, replace top. */
    if (YY_CURRENT_BUFFER)
        (yy_buffer_stack_top)++;
    YY_CURRENT_BUFFER_LVALUE = new_buffer;

    /* copied from yy_switch_to_buffer. */
    yy_load_buffer_state();
    (yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *
 */
/* %if-c-only */
void yypop_buffer_state(void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    if (!YY_CURRENT_BUFFER)
        return;

    yy_delete_buffer(YY_CURRENT_BUFFER);
    YY_CURRENT_BUFFER_LVALUE = NULL;
    if ((yy_buffer_stack_top) > 0)
        --(yy_buffer_stack_top);

    if (YY_CURRENT_BUFFER) {
        yy_load_buffer_state();
        (yy_did_buffer_switch_on_eof) = 1;
    }
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
static void yyensure_buffer_stack(void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    yy_size_t num_to_alloc;

    if (!(yy_buffer_stack)) {

        /* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
        num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
        (yy_buffer_stack) = (struct yy_buffer_state **) yyalloc
                (num_to_alloc * sizeof(struct yy_buffer_state *)
                );
        if (!(yy_buffer_stack))
            YY_FATAL_ERROR("out of dynamic memory in yyensure_buffer_stack()");

        memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state *));

        (yy_buffer_stack_max) = num_to_alloc;
        (yy_buffer_stack_top) = 0;
        return;
    }

    if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1) {

        /* Increase the buffer to prepare for a possible push. */
        yy_size_t grow_size = 8 /* arbitrary grow size */;

        num_to_alloc = (yy_buffer_stack_max) + grow_size;
        (yy_buffer_stack) = (struct yy_buffer_state **) yyrealloc
                ((yy_buffer_stack),
                 num_to_alloc * sizeof(struct yy_buffer_state *)
                );
        if (!(yy_buffer_stack))
            YY_FATAL_ERROR("out of dynamic memory in yyensure_buffer_stack()");

        /* zero only the new slots.*/
        memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state *));
        (yy_buffer_stack_max) = num_to_alloc;
    }
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 *
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer(char *base, yy_size_t size) {
    YY_BUFFER_STATE b;

    if (size < 2 ||
        base[size - 2] != YY_END_OF_BUFFER_CHAR ||
        base[size - 1] != YY_END_OF_BUFFER_CHAR)
        /* They forgot to leave room for the EOB's. */
        return 0;

    b = (YY_BUFFER_STATE) yyalloc(sizeof(struct yy_buffer_state));
    if (!b)
        YY_FATAL_ERROR("out of dynamic memory in yy_scan_buffer()");

    b->yy_buf_size = size - 2;    /* "- 2" to take care of EOB's */
    b->yy_buf_pos = b->yy_ch_buf = base;
    b->yy_is_our_buffer = 0;
    b->yy_input_file = 0;
    b->yy_n_chars = b->yy_buf_size;
    b->yy_is_interactive = 0;
    b->yy_at_bol = 1;
    b->yy_fill_buffer = 0;
    b->yy_buffer_status = YY_BUFFER_NEW;

    yy_switch_to_buffer(b);

    return b;
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 *
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string(yyconst char *yystr) {

    return yy_scan_bytes(yystr, strlen(yystr));
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 *
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes(yyconst char *yybytes, yy_size_t _yybytes_len) {
    YY_BUFFER_STATE b;
    char *buf;
    yy_size_t n;
    yy_size_t i;

    /* Get memory for full buffer, including space for trailing EOB's. */
    n = _yybytes_len + 2;
    buf = (char *) yyalloc(n);
    if (!buf)
        YY_FATAL_ERROR("out of dynamic memory in yy_scan_bytes()");

    for (i = 0; i < _yybytes_len; ++i)
        buf[i] = yybytes[i];

    buf[_yybytes_len] = buf[_yybytes_len + 1] = YY_END_OF_BUFFER_CHAR;

    b = yy_scan_buffer(buf, n);
    if (!b)
        YY_FATAL_ERROR("bad buffer in yy_scan_bytes()");

    /* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
    b->yy_is_our_buffer = 1;

    return b;
}
/* %endif */

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
static void yy_fatal_error(yyconst char *msg) {
    (void) fprintf(stderr, "%s\n", msg);
    exit(YY_EXIT_FAILURE);
}
/* %endif */
/* %if-c++-only */
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
    do \
        { \
        /* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
        yytext[yyleng] = (yy_hold_char); \
        (yy_c_buf_p) = yytext + yyless_macro_arg; \
        (yy_hold_char) = *(yy_c_buf_p); \
        *(yy_c_buf_p) = '\0'; \
        yyleng = yyless_macro_arg; \
        } \
    while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */

/** Get the current line number.
 *
 */
int yyget_lineno(void) {

    return yylineno;
}

/** Get the input stream.
 *
 */
FILE *yyget_in(void) {
    return yyin;
}

/** Get the output stream.
 *
 */
FILE *yyget_out(void) {
    return yyout;
}

/** Get the length of the current token.
 *
 */
yy_size_t yyget_leng(void) {
    return yyleng;
}

/** Get the current token.
 *
 */

char *yyget_text(void) {
    return yytext;
}

/* %if-reentrant */
/* %endif */

/** Set the current line number.
 * @param _line_number line number
 *
 */
void yyset_lineno(int _line_number) {

    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 *
 * @see yy_switch_to_buffer
 */
void yyset_in(FILE *_in_str) {
    yyin = _in_str;
}

void yyset_out(FILE *_out_str) {
    yyout = _out_str;
}

int yyget_debug(void) {
    return yy_flex_debug;
}

void yyset_debug(int _bdebug) {
    yy_flex_debug = _bdebug;
}

/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
static int yy_init_globals(void) {
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
                                                                                                                            yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy(void) {

    /* Pop the buffer stack, destroying each element. */
    while (YY_CURRENT_BUFFER) {
        yy_delete_buffer(YY_CURRENT_BUFFER);
        YY_CURRENT_BUFFER_LVALUE = NULL;
        yypop_buffer_state();
    }

    /* Destroy the stack itself. */
    yyfree((yy_buffer_stack));
    (yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals();

/* %if-reentrant */
/* %endif */
    return 0;
}
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
                                                                                                                        static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
                                                                                                                        static int yy_flex_strlen (yyconst char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc(yy_size_t size) {
    return (void *) malloc(size);
}

void *yyrealloc(void *ptr, yy_size_t size) {

    /* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
    return (void *) realloc((char *) ptr, size);
}

void yyfree(void *ptr) {
    free((char *) ptr);    /* see yyrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 201 "aml_scanner.lpp"


void aml_driver::scan_begin() {
    yy_flex_debug = trace_scanning;
    if (!(yyin = fopen(filename.c_str(), "r"))) {
        error(std::string("cannot open ") + filename);
        error_code = 1;
    }
}

void aml_driver::scan_end() {
    //fclose(yyin);
}

