`define next_shift_amount 0 //IN CASE OF REQUIRED SIGNALS VALUES IN THE FUTURE, SHIFT YOUR ENTIRE TIMING BY THIS FACTOR

`include "ipc.sva"
`include "globalTypes.sva"
`include "TestFunction1_types.sva"
`include "TestFunction1_functions.sva"

import top_level_types::*;

module TestFunction1_verification(reset);

input reset;

//DESIGNER SHOULD PAY ATTENTION FOR USING THE MODEL CORRECT NAME TO REFER TO THE CLK SIGNAL USED IN IT
default clocking default_clk @(posedge TestFunction1.clk); endclocking
`include "TestFunction1_macros.sva"

////////////////////////////////////
//////////// Operations ////////////
////////////////////////////////////

sequence reset_sequence;
reset ##1 !reset;  	//DESIGNER REFER TO MODEL RESET SIGNAL HERE
endsequence

property reset_p;
	reset_sequence |->
	t##0 state_1() and
	t##0 record_var_y() == 0 and
	t##0 x() == 0 and
	t##0 y() == 0 and
	t##0 b_in_notify() == 1 and
	t##0 b_out_notify() == 0;
endproperty
reset_a: assert property (reset_p);



property state_1_1_p(o);
 bit[31:0] b_in_sig_x_f;
 bit[31:0] b_in_sig_y_f;
 bit[31:0] x_f;
	t ##0 hold(b_in_sig_x_f, b_in_sig_x()) and
	t ##0 hold(b_in_sig_y_f, b_in_sig_y()) and
	t ##0 hold(x_f, x()) and
	t##0 state_1() and
	t##0 b_in_sync()
implies
	t_end(o)##0 state_2() and
	t_end(o)##0 b_out_sig() == unsigned'(b_in_sig_x_f) and
	t_end(o)##0 record_var_y() == b_in_sig_y_f and
	t_end(o)##0 x() == x_f and
	t_end(o)##0 y() == unsigned'(b_in_sig_x_f) and
	during_o (t, 1, t_end(o), 0, b_in_notify() == 0) and
	during_o (t, 1, t_end(o), -1, b_out_notify() == 0) and
	t_end(o)##0 b_out_notify() == 1;
endproperty;
state_1_1_a: assert property (disable iff (reset) state_1_1_p(1)); //ASSIGN t_end offset here



property state_2_2_p(o);
 bit[31:0] record_var_y_f;
 bit[31:0] x_f;
	t ##0 hold(record_var_y_f, record_var_y()) and
	t ##0 hold(x_f, x()) and
	t##0 state_2() and
	t##0 b_out_sync()
implies
	t_end(o)##0 state_3() and
	t_end(o)##0 b_out_sig() == unsigned'((signed'(record_var_y_f) + x_f)) and
	t_end(o)##0 record_var_y() == record_var_y_f and
	t_end(o)##0 x() == x_f and
	t_end(o)##0 y() == unsigned'((signed'(record_var_y_f) + x_f)) and
	during_o (t, 1, t_end(o), 0, b_in_notify() == 0) and
	during_o (t, 1, t_end(o), -1, b_out_notify() == 0) and
	t_end(o)##0 b_out_notify() == 1;
endproperty;
state_2_2_a: assert property (disable iff (reset) state_2_2_p(1)); //ASSIGN t_end offset here



property state_3_3_p(o);
 bit[31:0] record_var_y_f;
 bit[31:0] x_f;
 bit[31:0] y_f;
	t ##0 hold(record_var_y_f, record_var_y()) and
	t ##0 hold(x_f, x()) and
	t ##0 hold(y_f, y()) and
	t##0 state_3() and
	t##0 b_out_sync()
implies
	t_end(o)##0 state_4() and
	t_end(o)##0 b_out_sig() == unsigned'((signed'(record_var_y_f)>>signed'((y_f & 31)))) and
	t_end(o)##0 record_var_y() == record_var_y_f and
	t_end(o)##0 x() == x_f and
	t_end(o)##0 y() == unsigned'((signed'(record_var_y_f)>>signed'((y_f & 31)))) and
	during_o (t, 1, t_end(o), 0, b_in_notify() == 0) and
	during_o (t, 1, t_end(o), -1, b_out_notify() == 0) and
	t_end(o)##0 b_out_notify() == 1;
endproperty;
state_3_3_a: assert property (disable iff (reset) state_3_3_p(1)); //ASSIGN t_end offset here



property state_4_4_p(o);
 bit[31:0] record_var_y_f;
 bit[31:0] x_f;
	t ##0 hold(record_var_y_f, record_var_y()) and
	t ##0 hold(x_f, x()) and
	t##0 state_4() and
	t##0 b_out_sync()
implies
	t_end(o)##0 state_5() and
	t_end(o)##0 b_out_sig() == unsigned'((signed'(record_var_y_f)>>signed'((foo(record_var_y_f) & 31)))) and
	t_end(o)##0 record_var_y() == record_var_y_f and
	t_end(o)##0 x() == x_f and
	t_end(o)##0 y() == unsigned'((signed'(record_var_y_f)>>signed'((foo(record_var_y_f) & 31)))) and
	during_o (t, 1, t_end(o), 0, b_in_notify() == 0) and
	during_o (t, 1, t_end(o), -1, b_out_notify() == 0) and
	t_end(o)##0 b_out_notify() == 1;
endproperty;
state_4_4_a: assert property (disable iff (reset) state_4_4_p(1)); //ASSIGN t_end offset here



property state_5_5_p(o);
 bit[31:0] record_var_y_f;
 bit[31:0] x_f;
 bit[31:0] y_f;
	t ##0 hold(record_var_y_f, record_var_y()) and
	t ##0 hold(x_f, x()) and
	t ##0 hold(y_f, y()) and
	t##0 state_5() and
	t##0 b_out_sync()
implies
	t_end(o)##0 state_1() and
	t_end(o)##0 record_var_y() == record_var_y_f and
	t_end(o)##0 x() == x_f and
	t_end(o)##0 y() == y_f and
	during_o (t, 1, t_end(o), -1, b_in_notify() == 0) and
	t_end(o)##0 b_in_notify() == 1 and
	during_o (t, 1, t_end(o), 0, b_out_notify() == 0);
endproperty;
state_5_5_a: assert property (disable iff (reset) state_5_5_p(1)); //ASSIGN t_end offset here



property wait_state_1_p(o);
 bit[31:0] record_var_y_f;
 bit[31:0] x_f;
 bit[31:0] y_f;
	t ##0 hold(record_var_y_f, record_var_y()) and
	t ##0 hold(x_f, x()) and
	t ##0 hold(y_f, y()) and
	t##0 state_1() and
	t##0 !(b_in_sync())
implies
	t##1 state_1() and
	t##1 record_var_y() == record_var_y_f and
	t##1 x() == x_f and
	t##1 y() == y_f and
	t##1 b_in_notify() == 1 and
	t##1 b_out_notify() == 0;
endproperty;
wait_state_1_a: assert property (disable iff (reset) wait_state_1_p(1)); //ASSIGN t_end offset here



property wait_state_2_p(o);
 bit[31:0] b_out_sig_f;
 bit[31:0] record_var_y_f;
 bit[31:0] x_f;
 bit[31:0] y_f;
	t ##0 hold(b_out_sig_f, b_out_sig()) and
	t ##0 hold(record_var_y_f, record_var_y()) and
	t ##0 hold(x_f, x()) and
	t ##0 hold(y_f, y()) and
	t##0 state_2() and
	t##0 !(b_out_sync())
implies
	t##1 state_2() and
	t##1 b_out_sig() == b_out_sig_f and
	t##1 record_var_y() == record_var_y_f and
	t##1 x() == x_f and
	t##1 y() == y_f and
	t##1 b_in_notify() == 0 and
	t##1 b_out_notify() == 1;
endproperty;
wait_state_2_a: assert property (disable iff (reset) wait_state_2_p(1)); //ASSIGN t_end offset here



property wait_state_3_p(o);
 bit[31:0] b_out_sig_f;
 bit[31:0] record_var_y_f;
 bit[31:0] x_f;
 bit[31:0] y_f;
	t ##0 hold(b_out_sig_f, b_out_sig()) and
	t ##0 hold(record_var_y_f, record_var_y()) and
	t ##0 hold(x_f, x()) and
	t ##0 hold(y_f, y()) and
	t##0 state_3() and
	t##0 !(b_out_sync())
implies
	t##1 state_3() and
	t##1 b_out_sig() == b_out_sig_f and
	t##1 record_var_y() == record_var_y_f and
	t##1 x() == x_f and
	t##1 y() == y_f and
	t##1 b_in_notify() == 0 and
	t##1 b_out_notify() == 1;
endproperty;
wait_state_3_a: assert property (disable iff (reset) wait_state_3_p(1)); //ASSIGN t_end offset here



property wait_state_4_p(o);
 bit[31:0] b_out_sig_f;
 bit[31:0] record_var_y_f;
 bit[31:0] x_f;
 bit[31:0] y_f;
	t ##0 hold(b_out_sig_f, b_out_sig()) and
	t ##0 hold(record_var_y_f, record_var_y()) and
	t ##0 hold(x_f, x()) and
	t ##0 hold(y_f, y()) and
	t##0 state_4() and
	t##0 !(b_out_sync())
implies
	t##1 state_4() and
	t##1 b_out_sig() == b_out_sig_f and
	t##1 record_var_y() == record_var_y_f and
	t##1 x() == x_f and
	t##1 y() == y_f and
	t##1 b_in_notify() == 0 and
	t##1 b_out_notify() == 1;
endproperty;
wait_state_4_a: assert property (disable iff (reset) wait_state_4_p(1)); //ASSIGN t_end offset here



property wait_state_5_p(o);
 bit[31:0] b_out_sig_f;
 bit[31:0] record_var_y_f;
 bit[31:0] x_f;
 bit[31:0] y_f;
	t ##0 hold(b_out_sig_f, b_out_sig()) and
	t ##0 hold(record_var_y_f, record_var_y()) and
	t ##0 hold(x_f, x()) and
	t ##0 hold(y_f, y()) and
	t##0 state_5() and
	t##0 !(b_out_sync())
implies
	t##1 state_5() and
	t##1 b_out_sig() == b_out_sig_f and
	t##1 record_var_y() == record_var_y_f and
	t##1 x() == x_f and
	t##1 y() == y_f and
	t##1 b_in_notify() == 0 and
	t##1 b_out_notify() == 1;
endproperty;
wait_state_5_a: assert property (disable iff (reset) wait_state_5_p(1)); //ASSIGN t_end offset here



endmodule

//DESIGNER SHOULD PAY ATTENTION FOR USING THE MODEL CORRECT NAME FOR BINDING AND TO REFER TO THE RESET SIGNAL USED IN IT
bind TestFunction1 TestFunction1_verification inst (.*, .reset());
