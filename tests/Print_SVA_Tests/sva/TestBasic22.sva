`define next_shift_amount 0 //IN CASE OF REQUIRED SIGNALS VALUES IN THE FUTURE, SHIFT YOUR ENTIRE TIMING BY THIS FACTOR

`include "ipc.sva"
`include "globalTypes.sva"
`include "TestBasic22_types.sva"
`include "TestBasic22_functions.sva"

import top_level_types::*;

module TestBasic22_verification(reset);

input reset;

//DESIGNER SHOULD PAY ATTENTION FOR USING THE MODEL CORRECT NAME TO REFER TO THE CLK SIGNAL USED IN IT
default clocking default_clk @(posedge TestBasic22.clk); endclocking
`include "TestBasic22_macros.sva"

////////////////////////////////////
//////////// Operations ////////////
////////////////////////////////////

sequence reset_sequence;
reset ##1 !reset;  	//DESIGNER REFER TO MODEL RESET SIGNAL HERE
endsequence

property reset_p;
	reset_sequence |->
	t##0 state_1() and
	t##0 m_out_sig_x() == 0 and
	t##0 m_out_sig_y() == 31 and
	t##0 phase() == SECTION_A and
	t##0 test_x() == 0 and
	t##0 test_y() == 31 and
	t##0 test2() == 31 and
	t##0 m_out_notify() == 1;
endproperty
reset_a: assert property (reset_p);



property state_1_1_p(o);
 bit[31:0] test_x_f;
 bit[31:0] test2_f;
	t ##0 hold(test_x_f, test_x()) and
	t ##0 hold(test2_f, test2()) and
	t##0 state_1() and
	t##0 !((phase() == SECTION_B)) and
	t##0 (test2() > 10)
implies
	t_end(o)##0 state_1() and
	t_end(o)##0 m_out_sig_x() == test_x_f and
	t_end(o)##0 m_out_sig_y() == (1 + test2_f) and
	t_end(o)##0 phase() == SECTION_A and
	t_end(o)##0 test_x() == test_x_f and
	t_end(o)##0 test_y() == (1 + test2_f) and
	t_end(o)##0 test2() == (1 + test2_f) and
	during_o (t, 1, t_end(o), -1, m_out_notify() == 0) and
	t_end(o)##0 m_out_notify() == 1;
endproperty;
state_1_1_a: assert property (disable iff (reset) state_1_1_p(1)); //ASSIGN t_end offset here



property state_1_2_p(o);
 bit[31:0] test_x_f;
 bit[31:0] test2_f;
	t ##0 hold(test_x_f, test_x()) and
	t ##0 hold(test2_f, test2()) and
	t##0 state_1() and
	t##0 !((phase() == SECTION_B)) and
	t##0 !((test2() > 10))
implies
	t_end(o)##0 state_2() and
	t_end(o)##0 m_out_sig_x() == test_x_f and
	t_end(o)##0 m_out_sig_y() == test2_f and
	t_end(o)##0 phase() == SECTION_A and
	t_end(o)##0 test_x() == test_x_f and
	t_end(o)##0 test_y() == test2_f and
	t_end(o)##0 test2() == (1 + test2_f) and
	during_o (t, 1, t_end(o), -1, m_out_notify() == 0) and
	t_end(o)##0 m_out_notify() == 1;
endproperty;
state_1_2_a: assert property (disable iff (reset) state_1_2_p(1)); //ASSIGN t_end offset here



property state_2_3_p(o);
 bit[31:0] test_x_f;
 bit[31:0] test2_f;
	t ##0 hold(test_x_f, test_x()) and
	t ##0 hold(test2_f, test2()) and
	t##0 state_2() and
	t##0 !((phase() == SECTION_B)) and
	t##0 (test2() > 10)
implies
	t_end(o)##0 state_1() and
	t_end(o)##0 m_out_sig_x() == test_x_f and
	t_end(o)##0 m_out_sig_y() == (1 + test2_f) and
	t_end(o)##0 phase() == SECTION_A and
	t_end(o)##0 test_x() == test_x_f and
	t_end(o)##0 test_y() == (1 + test2_f) and
	t_end(o)##0 test2() == (1 + test2_f) and
	during_o (t, 1, t_end(o), -1, m_out_notify() == 0) and
	t_end(o)##0 m_out_notify() == 1;
endproperty;
state_2_3_a: assert property (disable iff (reset) state_2_3_p(1)); //ASSIGN t_end offset here



property state_2_4_p(o);
 bit[31:0] test_x_f;
 bit[31:0] test2_f;
	t ##0 hold(test_x_f, test_x()) and
	t ##0 hold(test2_f, test2()) and
	t##0 state_2() and
	t##0 !((phase() == SECTION_B)) and
	t##0 !((test2() > 10))
implies
	t_end(o)##0 state_2() and
	t_end(o)##0 m_out_sig_x() == test_x_f and
	t_end(o)##0 m_out_sig_y() == test2_f and
	t_end(o)##0 phase() == SECTION_A and
	t_end(o)##0 test_x() == test_x_f and
	t_end(o)##0 test_y() == test2_f and
	t_end(o)##0 test2() == (1 + test2_f) and
	during_o (t, 1, t_end(o), -1, m_out_notify() == 0) and
	t_end(o)##0 m_out_notify() == 1;
endproperty;
state_2_4_a: assert property (disable iff (reset) state_2_4_p(1)); //ASSIGN t_end offset here



endmodule

//DESIGNER SHOULD PAY ATTENTION FOR USING THE MODEL CORRECT NAME FOR BINDING AND TO REFER TO THE RESET SIGNAL USED IN IT
bind TestBasic22 TestBasic22_verification inst (.*, .reset());
