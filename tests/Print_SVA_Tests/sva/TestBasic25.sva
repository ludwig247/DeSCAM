`define next_shift_amount 0 //IN CASE OF REQUIRED SIGNALS VALUES IN THE FUTURE, SHIFT YOUR ENTIRE TIMING BY THIS FACTOR

`include "ipc.sva"
`include "globalTypes.sva"
`include "TestBasic25_types.sva"
`include "TestBasic25_functions.sva"

import top_level_types::*;

module TestBasic25_verification(reset);

input reset;

//DESIGNER SHOULD PAY ATTENTION FOR USING THE MODEL CORRECT NAME TO REFER TO THE CLK SIGNAL USED IN IT
default clocking default_clk @(posedge TestBasic25.clk); endclocking
`include "TestBasic25_macros.sva"

////////////////////////////////////
//////////// Operations ////////////
////////////////////////////////////

sequence reset_sequence;
reset ##1 !reset;  	//DESIGNER REFER TO MODEL RESET SIGNAL HERE
endsequence

property reset_p;
	reset_sequence |->
	t##0 state_1() and
	t##0 alu_out_sig() == (5 + reg_in_sig_f) and
	t##0 alu_out_notify() == 1 and
	t##0 reg_out_notify() == 0;
endproperty
reset_a: assert property (reset_p);



property state_1_1_p(o);
 bit[31:0] alu_in_sig_f;
	t ##0 hold(alu_in_sig_f, alu_in_sig()) and
	t##0 state_1()
implies
	t_end(o)##0 state_2() and
	t_end(o)##0 reg_out_sig() == alu_in_sig_f and
	during_o (t, 1, t_end(o), 0, alu_out_notify() == 0) and
	during_o (t, 1, t_end(o), -1, reg_out_notify() == 0) and
	t_end(o)##0 reg_out_notify() == 1;
endproperty;
state_1_1_a: assert property (disable iff (reset) state_1_1_p(1)); //ASSIGN t_end offset here



property state_2_2_p(o);
 bit[31:0] reg_in_sig_f;
	t ##0 hold(reg_in_sig_f, reg_in_sig()) and
	t##0 state_2()
implies
	t_end(o)##0 state_1() and
	t_end(o)##0 alu_out_sig() == (5 + reg_in_sig_f) and
	during_o (t, 1, t_end(o), -1, alu_out_notify() == 0) and
	t_end(o)##0 alu_out_notify() == 1 and
	during_o (t, 1, t_end(o), 0, reg_out_notify() == 0);
endproperty;
state_2_2_a: assert property (disable iff (reset) state_2_2_p(1)); //ASSIGN t_end offset here



endmodule

//DESIGNER SHOULD PAY ATTENTION FOR USING THE MODEL CORRECT NAME FOR BINDING AND TO REFER TO THE RESET SIGNAL USED IN IT
bind TestBasic25 TestBasic25_verification inst (.*, .reset());
