`define next_shift_amount 0 //IN CASE OF REQUIRED SIGNALS VALUES IN THE FUTURE, SHIFT YOUR ENTIRE TIMING BY THIS FACTOR

`include "ipc.sva"
`include "globalTypes.sva"
`include "TestMasterSlave17_types.sva"
`include "TestMasterSlave17_functions.sva"

import top_level_types::*;

module TestMasterSlave17_verification(reset);

input reset;

//DESIGNER SHOULD PAY ATTENTION FOR USING THE MODEL CORRECT NAME TO REFER TO THE CLK SIGNAL USED IN IT
default clocking default_clk @(posedge TestMasterSlave17.clk); endclocking
`include "TestMasterSlave17_macros.sva"

////////////////////////////////////
//////////// Operations ////////////
////////////////////////////////////

sequence reset_sequence;
reset ##1 !reset;  	//DESIGNER REFER TO MODEL RESET SIGNAL HERE
endsequence

property reset_p;
	reset_sequence |->
	t##0 state_1() and
	t##0 data1_data() == 0 and
	t##0 data1_trans_type() == SINGLE_READ and
	t##0 data2_data() == 0 and
	t##0 data2_trans_type() == SINGLE_READ and
	t##0 data3_data() == 0 and
	t##0 data3_trans_type() == SINGLE_READ and
	t##0 s_out_1_sig_addr() == 0 and
	t##0 s_out_1_sig_data() == 0 and
	t##0 s_out_1_sig_trans_type() == SINGLE_READ and
	t##0 s_out_2_sig_addr() == 0 and
	t##0 s_out_2_sig_data() == 0 and
	t##0 s_out_2_sig_trans_type() == SINGLE_READ and
	t##0 s_out_3_sig_addr() == 0 and
	t##0 s_out_3_sig_data() == 0 and
	t##0 s_out_3_sig_trans_type() == SINGLE_READ;
endproperty
reset_a: assert property (reset_p);



property state_1_1_p(o);
 bit[31:0] data1_data_f;
 bit[31:0] data1_trans_type_f;
 bit[31:0] data2_data_f;
 bit[31:0] data2_trans_type_f;
 bit[31:0] data3_data_f;
 bit[31:0] data3_trans_type_f;
	t ##0 hold(data1_data_f, data1_data()) and
	t ##0 hold(data1_trans_type_f, data1_trans_type()) and
	t ##0 hold(data2_data_f, data2_data()) and
	t ##0 hold(data2_trans_type_f, data2_trans_type()) and
	t ##0 hold(data3_data_f, data3_data()) and
	t ##0 hold(data3_trans_type_f, data3_trans_type()) and
	t##0 state_1()
implies
	t_end(o)##0 state_1() and
	t_end(o)##0 data1_data() == data1_data_f and
	t_end(o)##0 data1_trans_type() == data1_trans_type_f and
	t_end(o)##0 data2_data() == data2_data_f and
	t_end(o)##0 data2_trans_type() == data2_trans_type_f and
	t_end(o)##0 data3_data() == data3_data_f and
	t_end(o)##0 data3_trans_type() == data3_trans_type_f and
	t_end(o)##0 s_out_1_sig_addr() == 1 and
	t_end(o)##0 s_out_1_sig_data() == data1_data_f and
	t_end(o)##0 s_out_1_sig_trans_type() == data1_trans_type_f and
	t_end(o)##0 s_out_2_sig_addr() == 2 and
	t_end(o)##0 s_out_2_sig_data() == data2_data_f and
	t_end(o)##0 s_out_2_sig_trans_type() == data2_trans_type_f and
	t_end(o)##0 s_out_3_sig_addr() == 3 and
	t_end(o)##0 s_out_3_sig_data() == data3_data_f and
	t_end(o)##0 s_out_3_sig_trans_type() == data3_trans_type_f;
endproperty;
state_1_1_a: assert property (disable iff (reset) state_1_1_p(1)); //ASSIGN t_end offset here



endmodule

//DESIGNER SHOULD PAY ATTENTION FOR USING THE MODEL CORRECT NAME FOR BINDING AND TO REFER TO THE RESET SIGNAL USED IN IT
bind TestMasterSlave17 TestMasterSlave17_verification inst (.*, .reset());
