`define next_shift_amount 0 //IN CASE OF REQUIRED SIGNALS VALUES IN THE FUTURE, SHIFT YOUR ENTIRE TIMING BY THIS FACTOR

`include "ipc.sva"
`include "globalTypes.sva"
`include "ModuleStateName01_types.sva"
`include "ModuleStateName01_functions.sva"

import top_level_types::*;

module ModuleStateName01_verification(reset);

input reset;

//DESIGNER SHOULD PAY ATTENTION FOR USING THE MODEL CORRECT NAME TO REFER TO THE CLK SIGNAL USED IN IT
default clocking default_clk @(posedge ModuleStateName01.clk); endclocking
`include "ModuleStateName01_macros.sva"

////////////////////////////////////
//////////// Operations ////////////
////////////////////////////////////

sequence reset_sequence;
reset ##1 !reset;  	//DESIGNER REFER TO MODEL RESET SIGNAL HERE
endsequence

property reset_p;
	reset_sequence |->
	t##0 state_1() and
	t##0 val() == 0 and
	t##0 b_in_notify() == 1 and
	t##0 b_out_notify() == 0;
endproperty
reset_a: assert property (reset_p);



property idle_2_2_p(o);
 bit[31:0] b_in_sig_f;
	t ##0 hold(b_in_sig_f, b_in_sig()) and
	t##0 idle_2() and
	t##0 b_in_sync()
implies
	t_end(o)##0 wait_3() and
	t_end(o)##0 val() == b_in_sig_f and
	during_o (t, 1, t_end(o), -1, b_in_notify() == 0) and
	t_end(o)##0 b_in_notify() == 1 and
	during_o (t, 1, t_end(o), 0, b_out_notify() == 0);
endproperty;
idle_2_2_a: assert property (disable iff (reset) idle_2_2_p(1)); //ASSIGN t_end offset here



property load_6_12_p(o);
 bit[31:0] val_f;
	t ##0 hold(val_f, val()) and
	t##0 load_6() and
	t##0 !(b_out_sync())
implies
	t_end(o)##0 state_1() and
	t_end(o)##0 val() == val_f and
	during_o (t, 1, t_end(o), -1, b_in_notify() == 0) and
	t_end(o)##0 b_in_notify() == 1 and
	during_o (t, 1, t_end(o), 0, b_out_notify() == 0);
endproperty;
load_6_12_a: assert property (disable iff (reset) load_6_12_p(1)); //ASSIGN t_end offset here



property load_6_6_p(o);
 bit[31:0] val_f;
	t ##0 hold(val_f, val()) and
	t##0 load_6() and
	t##0 b_out_sync()
implies
	t_end(o)##0 state_1() and
	t_end(o)##0 val() == val_f and
	during_o (t, 1, t_end(o), -1, b_in_notify() == 0) and
	t_end(o)##0 b_in_notify() == 1 and
	during_o (t, 1, t_end(o), 0, b_out_notify() == 0);
endproperty;
load_6_6_a: assert property (disable iff (reset) load_6_6_p(1)); //ASSIGN t_end offset here



property state_1_1_p(o);
 bit[31:0] b_in_sig_f;
	t ##0 hold(b_in_sig_f, b_in_sig()) and
	t##0 state_1() and
	t##0 b_in_sync()
implies
	t_end(o)##0 idle_2() and
	t_end(o)##0 val() == b_in_sig_f and
	during_o (t, 1, t_end(o), -1, b_in_notify() == 0) and
	t_end(o)##0 b_in_notify() == 1 and
	during_o (t, 1, t_end(o), 0, b_out_notify() == 0);
endproperty;
state_1_1_a: assert property (disable iff (reset) state_1_1_p(1)); //ASSIGN t_end offset here



property state_4_4_p(o);
 bit[31:0] val_f;
	t ##0 hold(val_f, val()) and
	t##0 state_4() and
	t##0 b_out_sync()
implies
	t_end(o)##0 store_5() and
	t_end(o)##0 b_out_sig() == val_f and
	t_end(o)##0 val() == val_f and
	during_o (t, 1, t_end(o), 0, b_in_notify() == 0) and
	during_o (t, 1, t_end(o), -1, b_out_notify() == 0) and
	t_end(o)##0 b_out_notify() == 1;
endproperty;
state_4_4_a: assert property (disable iff (reset) state_4_4_p(1)); //ASSIGN t_end offset here



property store_5_5_p(o);
 bit[31:0] val_f;
	t ##0 hold(val_f, val()) and
	t##0 store_5() and
	t##0 b_out_sync()
implies
	t_end(o)##0 load_6() and
	t_end(o)##0 b_out_sig() == val_f and
	t_end(o)##0 val() == val_f and
	during_o (t, 1, t_end(o), 0, b_in_notify() == 0) and
	during_o (t, 1, t_end(o), -1, b_out_notify() == 0) and
	t_end(o)##0 b_out_notify() == 1;
endproperty;
store_5_5_a: assert property (disable iff (reset) store_5_5_p(1)); //ASSIGN t_end offset here



property wait_3_3_p(o);
 bit[31:0] b_in_sig_f;
	t ##0 hold(b_in_sig_f, b_in_sig()) and
	t##0 wait_3() and
	t##0 b_in_sync()
implies
	t_end(o)##0 state_4() and
	t_end(o)##0 b_out_sig() == b_in_sig_f and
	t_end(o)##0 val() == b_in_sig_f and
	during_o (t, 1, t_end(o), 0, b_in_notify() == 0) and
	during_o (t, 1, t_end(o), -1, b_out_notify() == 0) and
	t_end(o)##0 b_out_notify() == 1;
endproperty;
wait_3_3_a: assert property (disable iff (reset) wait_3_3_p(1)); //ASSIGN t_end offset here



property wait_3_9_p(o);
 bit[31:0] val_f;
	t ##0 hold(val_f, val()) and
	t##0 wait_3() and
	t##0 !(b_in_sync())
implies
	t_end(o)##0 state_4() and
	t_end(o)##0 b_out_sig() == val_f and
	t_end(o)##0 val() == val_f and
	during_o (t, 1, t_end(o), 0, b_in_notify() == 0) and
	during_o (t, 1, t_end(o), -1, b_out_notify() == 0) and
	t_end(o)##0 b_out_notify() == 1;
endproperty;
wait_3_9_a: assert property (disable iff (reset) wait_3_9_p(1)); //ASSIGN t_end offset here



property wait_idle_2_p(o);
 bit[31:0] val_f;
	t ##0 hold(val_f, val()) and
	t##0 idle_2() and
	t##0 !(b_in_sync())
implies
	t##1 idle_2() and
	t##1 val() == val_f and
	t##1 b_in_notify() == 1 and
	t##1 b_out_notify() == 0;
endproperty;
wait_idle_2_a: assert property (disable iff (reset) wait_idle_2_p(1)); //ASSIGN t_end offset here



property wait_state_1_p(o);
 bit[31:0] val_f;
	t ##0 hold(val_f, val()) and
	t##0 state_1() and
	t##0 !(b_in_sync())
implies
	t##1 state_1() and
	t##1 val() == val_f and
	t##1 b_in_notify() == 1 and
	t##1 b_out_notify() == 0;
endproperty;
wait_state_1_a: assert property (disable iff (reset) wait_state_1_p(1)); //ASSIGN t_end offset here



property wait_state_4_p(o);
 bit[31:0] b_out_sig_f;
 bit[31:0] val_f;
	t ##0 hold(b_out_sig_f, b_out_sig()) and
	t ##0 hold(val_f, val()) and
	t##0 state_4() and
	t##0 !(b_out_sync())
implies
	t##1 state_4() and
	t##1 b_out_sig() == b_out_sig_f and
	t##1 val() == val_f and
	t##1 b_in_notify() == 0 and
	t##1 b_out_notify() == 1;
endproperty;
wait_state_4_a: assert property (disable iff (reset) wait_state_4_p(1)); //ASSIGN t_end offset here



property wait_store_5_p(o);
 bit[31:0] b_out_sig_f;
 bit[31:0] val_f;
	t ##0 hold(b_out_sig_f, b_out_sig()) and
	t ##0 hold(val_f, val()) and
	t##0 store_5() and
	t##0 !(b_out_sync())
implies
	t##1 store_5() and
	t##1 b_out_sig() == b_out_sig_f and
	t##1 val() == val_f and
	t##1 b_in_notify() == 0 and
	t##1 b_out_notify() == 1;
endproperty;
wait_store_5_a: assert property (disable iff (reset) wait_store_5_p(1)); //ASSIGN t_end offset here



endmodule

//DESIGNER SHOULD PAY ATTENTION FOR USING THE MODEL CORRECT NAME FOR BINDING AND TO REFER TO THE RESET SIGNAL USED IN IT
bind ModuleStateName01 ModuleStateName01_verification inst (.*, .reset());
