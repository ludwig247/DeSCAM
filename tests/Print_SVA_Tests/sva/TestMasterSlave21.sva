`define next_shift_amount 0 //IN CASE OF REQUIRED SIGNALS VALUES IN THE FUTURE, SHIFT YOUR ENTIRE TIMING BY THIS FACTOR

`include "ipc.sva"
`include "globalTypes.sva"
`include "TestMasterSlave21_types.sva"
`include "TestMasterSlave21_functions.sva"

import top_level_types::*;

module TestMasterSlave21_verification(reset);

input reset;

//DESIGNER SHOULD PAY ATTENTION FOR USING THE MODEL CORRECT NAME TO REFER TO THE CLK SIGNAL USED IN IT
default clocking default_clk @(posedge TestMasterSlave21.clk); endclocking
`include "TestMasterSlave21_macros.sva"

////////////////////////////////////
//////////// Operations ////////////
////////////////////////////////////

sequence reset_sequence;
reset ##1 !reset;  	//DESIGNER REFER TO MODEL RESET SIGNAL HERE
endsequence

property reset_p;
	reset_sequence |->
	t##0 state_1();
endproperty
reset_a: assert property (reset_p);



property state_1_1_p(o);
	t##0 state_1() and
	t##0 s_in_1_sync() and
	t##0 s_in_2_sync() and
	t##0 s_in_3_sync()
implies
	t_end(o)##0 state_1();
endproperty;
state_1_1_a: assert property (disable iff (reset) state_1_1_p(1)); //ASSIGN t_end offset here



property state_1_2_p(o);
	t##0 state_1() and
	t##0 s_in_1_sync() and
	t##0 s_in_2_sync() and
	t##0 !(s_in_3_sync())
implies
	t_end(o)##0 state_1();
endproperty;
state_1_2_a: assert property (disable iff (reset) state_1_2_p(1)); //ASSIGN t_end offset here



property state_1_3_p(o);
	t##0 state_1() and
	t##0 s_in_1_sync() and
	t##0 !(s_in_2_sync()) and
	t##0 s_in_3_sync()
implies
	t_end(o)##0 state_1();
endproperty;
state_1_3_a: assert property (disable iff (reset) state_1_3_p(1)); //ASSIGN t_end offset here



property state_1_4_p(o);
	t##0 state_1() and
	t##0 s_in_1_sync() and
	t##0 !(s_in_2_sync()) and
	t##0 !(s_in_3_sync())
implies
	t_end(o)##0 state_1();
endproperty;
state_1_4_a: assert property (disable iff (reset) state_1_4_p(1)); //ASSIGN t_end offset here



property state_1_5_p(o);
	t##0 state_1() and
	t##0 !(s_in_1_sync()) and
	t##0 s_in_2_sync() and
	t##0 s_in_3_sync()
implies
	t_end(o)##0 state_1();
endproperty;
state_1_5_a: assert property (disable iff (reset) state_1_5_p(1)); //ASSIGN t_end offset here



property state_1_6_p(o);
	t##0 state_1() and
	t##0 !(s_in_1_sync()) and
	t##0 s_in_2_sync() and
	t##0 !(s_in_3_sync())
implies
	t_end(o)##0 state_1();
endproperty;
state_1_6_a: assert property (disable iff (reset) state_1_6_p(1)); //ASSIGN t_end offset here



property state_1_7_p(o);
	t##0 state_1() and
	t##0 !(s_in_1_sync()) and
	t##0 !(s_in_2_sync()) and
	t##0 s_in_3_sync()
implies
	t_end(o)##0 state_1();
endproperty;
state_1_7_a: assert property (disable iff (reset) state_1_7_p(1)); //ASSIGN t_end offset here



property state_1_8_p(o);
	t##0 state_1() and
	t##0 !(s_in_1_sync()) and
	t##0 !(s_in_2_sync()) and
	t##0 !(s_in_3_sync())
implies
	t_end(o)##0 state_1();
endproperty;
state_1_8_a: assert property (disable iff (reset) state_1_8_p(1)); //ASSIGN t_end offset here



endmodule

//DESIGNER SHOULD PAY ATTENTION FOR USING THE MODEL CORRECT NAME FOR BINDING AND TO REFER TO THE RESET SIGNAL USED IN IT
bind TestMasterSlave21 TestMasterSlave21_verification inst (.*, .reset());
