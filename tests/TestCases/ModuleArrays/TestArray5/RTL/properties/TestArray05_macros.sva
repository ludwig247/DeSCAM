typedef enum { IDLE, WRITEVALUE } state_t;
// SYNC AND NOTIFY SIGNALS (1-cycle macros) //
function b_in_sync;
	b_in_sync = TestArray05.b_in_sync_d;
endfunction
function b_out_sync;
	b_out_sync = TestArray05.b_out_sync_d;
endfunction
function b_in_notify;
	b_in_notify = TestArray05.b_in_notify_d;
endfunction
function b_out_notify;
	b_out_notify = TestArray05.b_out_notify_d;
endfunction

// DP SIGNALS //
function int b_in_sig;
	b_in_sig = TestArray05.b_in;
endfunction
function int_2 b_out_sig;
	b_out_sig = TestArray05.b_out;
endfunction
function int b_out_sig_0;
	b_out_sig_0 = TestArray05.b_out[0];
endfunction
function int b_out_sig_1;
	b_out_sig_1 = TestArray05.b_out[1];
endfunction

// VISIBLE REGISTERS //
function int_2 myArray;
	myArray = TestArray05.myArray_signal;
endfunction
function int myArray_1;
	myArray_1 = TestArray05.myArray_signal[1];
endfunction
function int test;
	test = TestArray05.test_signal;
endfunction

// STATES //
function state_1;
	state_1 = (TestArray05.currentstate == IDLE);
endfunction
function state_2;
	state_2 = (TestArray05.currentstate == WRITEVALUE);
endfunction
