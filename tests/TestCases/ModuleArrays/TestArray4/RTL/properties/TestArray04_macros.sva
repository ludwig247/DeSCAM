typedef enum { IDLE, WRITEVALUE } state_t;

// SYNC AND NOTIFY SIGNALS (1-cycle macros) //
function m_in_sync;
	m_in_sync = TestArray04.m_in_sync_d;
endfunction
function m_out_sync;
	m_out_sync = TestArray04.m_out_sync_d;
endfunction
function m_in_notify;
	m_in_notify = TestArray04.m_in_notify_d;
endfunction
function m_out_notify;
	m_out_notify = TestArray04.m_out_notify_d;
endfunction

// DP SIGNALS //
function int m_in_sig;
	m_in_sig = TestArray04.m_in;
endfunction
function int_5 m_out_sig;
	m_out_sig = TestArray04.m_out;
endfunction
function int m_out_sig_0;
	m_out_sig_0 = TestArray04.m_out[0];
endfunction
function int m_out_sig_1;
	m_out_sig_1 = TestArray04.m_out[1];
endfunction
function int m_out_sig_2;
	m_out_sig_2 = TestArray04.m_out[2];
endfunction
function int m_out_sig_3;
	m_out_sig_3 = TestArray04.m_out[3];
endfunction
function int m_out_sig_4;
	m_out_sig_4 = TestArray04.m_out[4];
endfunction

// VISIBLE REGISTERS //
function int_5 myArray;
	myArray = TestArray04.myArray_signal;
endfunction
function int myArray_1;
	myArray_1 = TestArray04.myArray_signal[1];
endfunction
function int myArray_2;
	myArray_2 = TestArray04.myArray_signal[2];
endfunction
function int myArray_3;
	myArray_3 = TestArray04.myArray_signal[3];
endfunction
function int myArray_4;
	myArray_4 = TestArray04.myArray_signal[4];
endfunction

// STATES //
function state_1;
	state_1 = (TestArray04.currentstate == IDLE);
endfunction
function state_2;
	state_2 = (TestArray04.currentstate == WRITEVALUE);
endfunction
