macro boolean start_state :=
    cpu1/halt_if == 0 &&
    cpu1/id_ready && cpu1/ex_ready && cpu1/lsu_ready_ex && cpu1/wb_valid &&
    !cpu1/data_req_o &&                  		    //no mem ops
    !cpu1/branch_decision &&                         //no branch
    !cpu1/regfile_alu_we_fw && !cpu1/regfile_we_wb &&     //no write back
    //cpu1/if_stage_i/offset_fsm_cs == WAIT &&
    empty_prefetch_buffer;
end macro;

macro boolean empty_prefetch_buffer :=
    cpu1/if_stage_i/prefetch_32/prefetch_buffer_i/fifo_i/valid_Q   == 4'd0;
end macro;

macro boolean empty_pipeline :=
    cpu1/id_ready == 1 &&
    cpu1/branch_decision == 0 &&
    cpu1/data_req_o == 0 &&
    cpu1/regfile_alu_we_fw == 0 && cpu1/regfile_we_wb == 0;   //should not be needed (Jump constraint and read regfile at t_ex not t_id)
end macro;

macro boolean cpu1_flush_sig := cpu1/branch_decision & cpu1/branch_in_ex end macro;
macro boolean cpu2_flush_sig := cpu2/branch_decision & cpu2/branch_in_ex end macro;

macro boolean CPU2_STALL := 
    cpu2/perf_jr_stall | 
    cpu2/perf_ld_stall | 
    cpu2/perf_pipeline_stall |
    cpu2/halt_if
end macro;

// JUMP instructions execute at t_id even if there is a lsu stall
macro boolean CPU2_STALL_FOR_JUMP := 
    cpu2/perf_jr_stall | 
    cpu2/halt_if
end macro;

macro boolean CPU2_NO_FLUSH_STATE := 
    !(cpu2/id_stage_i/controller_i/ctrl_fsm_cs == FLUSH_EX)
end macro;

macro unsigned REGISTER_CPU1 (unsigned r) :=
    cpu1/id_stage_i/registers_i/riscv_register_file_i/mem[r];
end macro;

macro unsigned REGISTER_CPU2 (unsigned r) :=
    cpu2/id_stage_i/registers_i/riscv_register_file_i/mem[r];
end macro;

constraint no_reset := rst_ni == 1 ; end constraint;

constraint in_out_constraints :=
    irq_i == 0 &&
    irq_sec_i == 0 &&
    irq_id_i == 0 &&
    test_en_i == 0 &&
    fregfile_disable_i == 1 &&
    cpu1/apu_master_req_o == 0 && cpu2/apu_master_req_o == 0 &&
    debug_req_i == 0 && 
    fetch_enable_i == 1 &&
    cpu1/id_stage_i/controller_i/debug_mode_q == 0 && cpu2/id_stage_i/controller_i/debug_mode_q == 0 &&
    cpu1/if_stage_i/is_compressed_id_o == 0 && cpu2/if_stage_i/is_compressed_id_o == 0;
end constraint;

constraint no_hwlp_case := 
    cpu1/if_stage_i/prefetch_32/prefetch_buffer_i/fifo_i/is_hwlp_Q == 2'd0 &&
    cpu1/if_stage_i/is_hwlp_id_o == 0 &&
    cpu1/if_stage_i/hwloop_controller_i/pc_is_end_addr == 0 &&
    cpu1/if_stage_i/fetch_is_hwlp == 0;
end constraint;

constraint no_unaligned_case :=
    cpu1/if_stage_i/prefetch_32/prefetch_buffer_i/fifo_i/out_addr_o[1]  == 0;
end constraint;

constraint data_gnt_rvalid :=
    (!cpu1/data_gnt_i || cpu1/data_gnt_i && !cpu1/data_rvalid_i) &&
    (!cpu2/data_gnt_i || cpu2/data_gnt_i && !cpu2/data_rvalid_i);
end constraint;

constraint instr_mem:=
    (!cpu1/instr_req_o || (cpu1/instr_req_o && cpu1/instr_gnt_i && next(cpu1/instr_rvalid_i))) &&
    (!cpu2/instr_req_o || (cpu2/instr_req_o && cpu2/instr_gnt_i && next(cpu2/instr_rvalid_i)));
end constraint;

constraint no_data_misaligned:=
    cpu1/data_misaligned == 0 &&
    cpu2/data_misaligned == 0;
end constraint;

macro unsigned max_wait_dmem := 3 ; end macro;

constraint data_gnt:=
    (!cpu1/data_gnt_i || cpu1/data_gnt_i && foreach i in 1 .. max_wait_dmem: !next(cpu1/data_gnt_i,i); end foreach) &&
    (!cpu2/data_gnt_i || cpu2/data_gnt_i && foreach i in 1 .. max_wait_dmem: !next(cpu2/data_gnt_i,i); end foreach);
end constraint;

constraint bounded_wait_dmem_gnt_1 := disable iff: !rst_ni;
    if (cpu1/data_req_o)
        exists i in 0..(max_wait_dmem-1):
            next(cpu1/data_gnt_i,i);
        end exists
    endif;
end constraint;

constraint bounded_wait_dmem_gnt_2 := disable iff: !rst_ni;
    if (cpu2/data_req_o)
        exists i in 0..(max_wait_dmem-1):
            next(cpu2/data_gnt_i,i);
        end exists
    endif;
end constraint;

constraint bounded_wait_dmem_1 := disable iff: !rst_ni;
    if (cpu1/data_gnt_i)
        exists i in 1..(max_wait_dmem):
            next(cpu1/data_rvalid_i,i);
        end exists
    endif;
end constraint;

constraint bounded_wait_dmem_2 := disable iff: !rst_ni;
    if (cpu2/data_gnt_i)
        exists i in 1..(max_wait_dmem):
            next(cpu2/data_rvalid_i,i);
        end exists
    endif;
end constraint;

// Avoid that fetched instructions are loaded into ID stage after an arbitrary time interval.
// Prefetcher keeps the fetched intrsuctions in a fifo if the processor is stalled.
// When the pipeline is ready, it loads from this fifo. If this constraint is taken off, then 
// it will be hard to compute the t_id_2.
constraint CPU2_no_prefetching :=
    cpu2/if_stage_i/prefetch_32/prefetch_buffer_i/fifo_i/valid_Q   == 4'd0;
end constraint;