macro unsigned instr_mul_result (unsigned func3, rs1, rs2) :=
    case (func3)
        3'b000:     unsigned(signed(rs1) * signed(rs2))[31:0];      // MUL
        3'b001:     unsigned(signed(rs1) * signed(rs2))[63:32];     // MULH
        3'b010:     (unsigned(rs1) * unsigned(rs2))[63:32];         // MULHSU
        3'b011:     unsigned(signed(rs1) * unsigned(rs2))[63:32];   // MULHU
        default:    32'd0;
    endcase;    
end macro;

macro unsigned instr_mul_operator (unsigned func3) :=
    case (func3)
        3'b000:     riscv_defines::MUL_MAC32;  // MULH
        3'b001:     riscv_defines::MUL_H;      // MULH
        3'b010:     riscv_defines::MUL_H;      // MULHSU
        3'b011:     riscv_defines::MUL_H;      // MULHU
        default:    32'd0;
    endcase;    
end macro;

macro boolean IR_IMEM_MUL (unsigned instr_imem, func3, func7) :=
    instr_imem[6:0] == 7'h33 &&                                     //opcode 
    (instr_imem[11:7] > 5'd0 && instr_imem[11:7] <= 5'd4) &&        //rd
    instr_imem[14:12] == func3 &&                                   //func3
    instr_imem[19:15] <= 5'd4 &&                                    //rs1
    instr_imem[24:20] <= 5'd4 &&                                    //rs2
    instr_imem[31:25] == func7                                      //func7
end macro;


macro property instr_mult (unsigned func3, func7) :=
disable iff: !rst_ni;
    dependencies:
        in_out_constraints,
        no_unaligned_case,
        no_hwlp_case,
        instr_mem;
    for timepoints:
        t_fetch = t,
        t_decode = t_fetch + 1,
        t_execute = t_decode + 1,
        t_writeb = t_execute + 1;
    freeze:
        instr_imem_at_t_fetch = instr_rdata_i @ t_fetch,
        instr_addr_at_t_fetch = instr_addr_o @ t_fetch,
        pc_if_at_t_fetch = pc_if @ t_fetch,

        rd_at_t_fetch = instr_rdata_i[11:7] @ t_fetch,
        rs1_at_t_fetch = instr_rdata_i[19:15] @ t_fetch,
        rs2_at_t_fetch = instr_rdata_i[24:20] @ t_fetch,

        op1Data_at_t_decode = REGISTER (rs1_at_t_fetch) @ t_decode,
        op2Data_at_t_decode = REGISTER (rs2_at_t_fetch) @ t_decode,

        res_at_t_decode = instr_mul_result(func3, op1Data_at_t_decode, op2Data_at_t_decode) @ t_decode;
    assume:
        //conceptual state
        at t_fetch: conceptual_state;
        at t_fetch: halt_if == 0;

        at t_decode: id_ready == 1;
        at t_decode: branch_decision == 0;
        at t_decode: regfile_alu_we_fw == 0 && regfile_we_wb == 0;

        //output
        at t_fetch:    instr_req_o;
        at t_fetch:    !data_req_o;
        at t_decode: data_req_o == 0;

        //Trigger
        at t_fetch:	IR_IMEM_MUL (instr_imem_at_t_fetch, func3, func7);
        at t_decode: op2Data_at_t_decode != 32'd0;

        //
        at t_decode: mul_sign_data_in_range(op1Data_at_t_decode);
        at t_decode: mul_sign_data_in_range(op2Data_at_t_decode);
        
    prove:
        at t_decode: conceptual_state;

        //Outputs
        at t_decode: instr_req_o;
        at t_decode: instr_addr_o == (instr_addr_at_t_fetch + 32'd4)[31:0];
        at t_decode: !data_req_o;
        
        //IF to ID
        at t_decode: instr_rdata_id == instr_imem_at_t_fetch;
        at t_decode: pc_if == (pc_if_at_t_fetch + 32'd4)[31:0];

        //ID to EX
        at t_decode+1: !alu_en_ex;
        at t_decode+1: mult_operator_ex == instr_mul_operator (func3);
        at t_decode+1: mult_en_ex;
        at t_decode+1: mult_operand_a_ex == op1Data_at_t_decode;
        at t_decode+1: mult_operand_b_ex == op2Data_at_t_decode;

        //EX to REGFILE -> same cycle
        at t_execute: MULT_READY;
        at t_execute: regfile_alu_waddr_fw == rd_at_t_fetch;
        at t_execute: regfile_alu_we_fw == 1;
        at t_execute: regfile_alu_wdata_fw == res_at_t_decode;

        //WB to REGFILE
        at t_writeb: REGISTER(rd_at_t_fetch) == res_at_t_decode;

        right_hook: t_decode;
end macro;

property instr_mul;
    instr_mult(3'b000, 7'b0000001);
end property;

macro bit MULT_READY := ex_stage_i/mult_ready; end macro;

macro boolean mul_sign_data_in_range (unsigned data) :=
    signed(data) >= -100 && signed(data) <= 100;
end macro;

macro boolean mul_unsign_data_in_range (unsigned data) :=
    unsigned(data) <= 100;
end macro;

macro property instr_mult_h (unsigned func3, func7) :=
disable iff: !rst_ni;
    dependencies:
        in_out_constraints,
        no_unaligned_case,
        no_hwlp_case,
        instr_mem;
    for timepoints:
        t_fetch = t,
        t_decode = t_fetch + 1,
        t_execute = t_decode + 5,
        t_writeb = t_execute + 1;
    freeze:
        instr_imem_at_t_fetch = instr_rdata_i @ t_fetch,
        instr_addr_at_t_fetch = instr_addr_o @ t_fetch,
        pc_if_at_t_fetch = pc_if @ t_fetch,

        rd_at_t_fetch = instr_rdata_i[11:7] @ t_fetch,
        rs1_at_t_fetch = instr_rdata_i[19:15] @ t_fetch,
        rs2_at_t_fetch = instr_rdata_i[24:20] @ t_fetch,

        op1Data_at_t_decode = REGISTER (rs1_at_t_fetch) @ t_decode,
        op2Data_at_t_decode = REGISTER (rs2_at_t_fetch) @ t_decode,

        res_at_t_decode = instr_mul_result(func3, op1Data_at_t_decode, op2Data_at_t_decode) @ t_decode;
    assume:
        //conceptual state
        at t_fetch: conceptual_state;
        at t_fetch: halt_if == 0;

        at t_decode: id_ready == 1;
        at t_decode: branch_decision == 0;
        at t_decode: regfile_alu_we_fw == 0 && regfile_we_wb == 0;

        //output
        at t_fetch:    instr_req_o;
        at t_fetch:    !data_req_o;
        at t_decode: data_req_o == 0;

        //Trigger
        at t_fetch:	IR_IMEM_MUL (instr_imem_at_t_fetch, func3, func7);
        at t_decode: op2Data_at_t_decode != 32'd0;

        //
        at t_decode: func3 == 3'b011 ? mul_unsign_data_in_range(op1Data_at_t_decode) : mul_sign_data_in_range(op1Data_at_t_decode);
        at t_decode: func3 == 3'b001 ? mul_sign_data_in_range(op2Data_at_t_decode) : mul_unsign_data_in_range(op2Data_at_t_decode);
        
    prove:
        at t_decode: conceptual_state;

        //Outputs
        at t_decode: instr_req_o;
        at t_decode: instr_addr_o == (instr_addr_at_t_fetch + 32'd4)[31:0];
        at t_decode: !data_req_o;
        
        //IF to ID
        at t_decode: instr_rdata_id == instr_imem_at_t_fetch;
        at t_decode: pc_if == (pc_if_at_t_fetch + 32'd4)[31:0];

        //ID to EX
        at t_decode+1: !alu_en_ex;
        at t_decode+1: mult_operator_ex == instr_mul_operator (func3);
        at t_decode+1: mult_en_ex;
        at t_decode+1: mult_operand_a_ex == op1Data_at_t_decode;
        at t_decode+1: mult_operand_b_ex == op2Data_at_t_decode;
        at t_decode+1: regfile_alu_we_fw == 1;

        //EX to REGFILE -> same cycle
        at t_execute: MULT_READY;
        at t_execute: regfile_alu_waddr_fw == rd_at_t_fetch;
        at t_execute: regfile_alu_we_fw == 1;
        at t_execute: regfile_alu_wdata_fw == res_at_t_decode;

        //WB to REGFILE
        at t_writeb: REGISTER(rd_at_t_fetch) == res_at_t_decode;

        right_hook: t_decode;
end macro;

property instr_mulh;
    instr_mult_h(3'b001, 7'b0000001);
end property;

property instr_mulhsu;
    instr_mult_h(3'b010, 7'b0000001);
end property;

property instr_mulhu;
    instr_mult_h(3'b011, 7'b0000001);
end property;
