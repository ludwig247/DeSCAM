macro unsigned instr_arith_result (unsigned func3, func7, rs1, rs2) :=
    case ({func3,func7})
        10'b0000000000:     unsigned(signed(rs1) + signed(rs2))[31:0];      // ADD
        10'b0000100000:     unsigned(signed(rs1) - signed(rs2))[31:0];      // SUB
        10'b0010000000:     rs1 << rs2[4:0];                                // SLL
        10'b0100000000:     signed(rs1) < signed(rs2) ? 32'd1 : 32'd0;      // SLT
        10'b0110000000:     unsigned(rs1) < unsigned(rs2) ? 32'd1 : 32'd0;  // SLT
        10'b1000000000:     rs1 ^ rs2;                                      // XOR
        10'b1100000000:     rs1 | rs2;                                      // OR
        10'b1110000000:     rs1 & rs2;                                      // AND
        10'b1010000000:     rs1 >> rs2[4:0];                                // SRL
        10'b1010100000:     unsigned(signed(rs1) >> rs2[4:0])[31:0];        // SRA
        default:    32'd0;
    endcase;    
end macro;

macro unsigned instr_alu_operator (unsigned func3, func7) :=
    case ({func3,func7})
        10'b0000000000:     riscv_defines::ALU_ADD;
        10'b0000100000:     riscv_defines::ALU_SUB;
        10'b0010000000:     riscv_defines::ALU_SLL;
        10'b0100000000:     riscv_defines::ALU_SLTS;
        10'b0110000000:     riscv_defines::ALU_SLTU;
        10'b1000000000:     riscv_defines::ALU_XOR;
        10'b1100000000:     riscv_defines::ALU_OR;
        10'b1110000000:     riscv_defines::ALU_AND;
        10'b1010000000:     riscv_defines::ALU_SRL;
        10'b1010100000:     riscv_defines::ALU_SRA;
        default:    32'd0;
    endcase;     
end macro;

macro unsigned instr_imm_result (unsigned func3, func7, rs1, imm) :=
    case (func3)
        3'b000:     unsigned(signed(rs1) + signed(imm))[31:0];      //ADDI
        3'b100:     rs1^imm;                                        //XORI
        3'b010:     signed(rs1) < signed(imm) ? 32'd1 : 32'd0;      //SLTI
        3'b011:     unsigned(rs1) < unsigned(imm) ? 32'd1 : 32'd0;  //SLTIU
        3'b110:     rs1 | imm;                                      //ORI
        3'b111:     rs1 & imm;                                      //ANDI
        3'b001:     rs1 << imm[4:0];                                     //SLLI
        3'b101:     (func7 == 7'b0000000) ? (rs1 >> imm[4:0]) : unsigned(signed(rs1) >> imm[4:0])[31:0]; //SRLI and SRAI
        default:    32'd0;
    endcase; 
end macro;

macro unsigned instr_imm_alu_operator (unsigned func3, func7) :=
    case (func3)
        3'b000:     riscv_defines::ALU_ADD;
        3'b100:     riscv_defines::ALU_XOR;
        3'b010:     riscv_defines::ALU_SLTS;
        3'b011:     riscv_defines::ALU_SLTU;
        3'b110:     riscv_defines::ALU_OR;
        3'b111:     riscv_defines::ALU_AND;
        3'b001:     riscv_defines::ALU_SLL;
        3'b101:     (func7 == 7'b0000000) ? riscv_defines::ALU_SRL : riscv_defines::ALU_SRA;
        default:    7'd0;
    endcase; 
end macro;

macro boolean IR_IMEM_ALU (unsigned instr_imem, code3, code7, inst_type) :=
    if (inst_type == 1)
        instr_imem[6:0] == 7'h33 &&                                     //opcode 
        (instr_imem[11:7] > 5'd0 && instr_imem[11:7] <= 5'd8) &&       //rd
        instr_imem[14:12] == code3 &&                                   //func3
        instr_imem[19:15] <= 5'd8 &&                                   //rs1
        instr_imem[24:20] <= 5'd8 &&                                   //rs2
        instr_imem[31:25] == code7                                     //func7
    else 
        instr_imem[6:0] == 7'h13 &&                                     //opcode 
        (instr_imem[11:7] > 5'd0 && instr_imem[11:7] <= 5'd8) &&        //rd
        instr_imem[14:12] == code3 &&                                   //func3
        instr_imem[19:15] <= 5'd8 &&                                   //rs1
        (code3 == 3'b001 ? instr_imem[31:25] == 7'd0 : 1) &&
        (code3 == 3'b101 ? instr_imem[31:25] == code7 : 1)
    endif;
end macro;

macro property instr_arith (unsigned code3, code7, inst_type) :=
disable iff: !rst_ni;
    dependencies:
        in_out_constraints,
        no_unaligned_case,
        no_hwlp_case,
        instr_mem;
    for timepoints:
        t_fetch = t,
        t_decode = t_fetch + 1,
        t_execute = t_decode + 1,
        t_writeb = t_execute + 1;
    freeze:
        instr_imem_at_t_fetch = instr_rdata_i @ t_fetch,
        instr_addr_at_t_fetch = instr_addr_o @ t_fetch,
        pc_if_at_t_fetch = pc_if @ t_fetch,

        //opcode = instr_rdata_i[6:0] @ t_fetch,
        rd_at_t_fetch = instr_rdata_i[11:7] @ t_fetch,
        func3_at_t_fetch = instr_rdata_i[14:12] @ t_fetch,
        rs1_at_t_fetch = instr_rdata_i[19:15] @ t_fetch,
        rs2_at_t_fetch = instr_rdata_i[24:20] @ t_fetch,
        imm_at_t_fetch = instr_rdata_i[31:20] @ t_fetch,
        func7_at_t_fetch = instr_rdata_i[31:25] @ t_fetch,
        reg2Data_at_t_decode = REGISTER (rs2_at_t_fetch) @ t_decode,
        op1Data_at_t_decode = REGISTER (rs1_at_t_fetch) @ t_decode,
        op2Data_at_t_decode = (inst_type == 1) ? reg2Data_at_t_decode : signExtend(imm_at_t_fetch) @ t_decode,
        res_at_t_decode = (inst_type == 1) ? instr_arith_result (func3_at_t_fetch, func7_at_t_fetch, op1Data_at_t_decode, op2Data_at_t_decode) : instr_imm_result (func3_at_t_fetch, func7_at_t_fetch, op1Data_at_t_decode, op2Data_at_t_decode) @ t_decode;
    assume:
        //conceptual state
        at t_fetch: conceptual_state;
        at t_fetch: halt_if == 0;

        at t_decode: id_ready == 1;
        at t_decode: branch_decision == 0;
        at t_decode: regfile_alu_we_fw == 0 && regfile_we_wb == 0;

        //output
        at t_fetch:    instr_req_o;
        at t_fetch:    !data_req_o;
        at t_decode: data_req_o == 0;

        //Trigger
        at t_fetch:	IR_IMEM_ALU (instr_imem_at_t_fetch, code3, code7, inst_type);
        
    prove:
        at t_decode: conceptual_state;

        //Outputs
        at t_decode: instr_req_o;
        at t_decode: instr_addr_o == (instr_addr_at_t_fetch + 32'd4)[31:0];
        at t_decode: !data_req_o;
        
        //IF to ID
        at t_decode: instr_rdata_id == instr_imem_at_t_fetch;
        at t_decode: pc_if == (pc_if_at_t_fetch + 32'd4)[31:0];

        //ID to EX
        at t_execute: alu_operator_ex == ((inst_type == 1) ? instr_alu_operator (func3_at_t_fetch, func7_at_t_fetch) : instr_imm_alu_operator (func3_at_t_fetch, func7_at_t_fetch));
        at t_execute: alu_operand_a_ex == op1Data_at_t_decode;
        at t_execute: alu_operand_b_ex == op2Data_at_t_decode;
        //EX to REGFILE -> same cycle
        at t_execute: regfile_alu_waddr_fw == rd_at_t_fetch;
        at t_execute: regfile_alu_we_fw == 1;
        at t_execute: regfile_alu_wdata_fw == res_at_t_decode;
        //WB to REGFILE
        at t_writeb: id_stage_i/registers_i/riscv_register_file_i/mem[rd_at_t_fetch] == res_at_t_decode;

        right_hook: t_decode;
end macro;

property instr_add;
    instr_arith(3'b000, 7'b0000000, 1);
end property;

property instr_sub;
    instr_arith(3'b000, 7'b0100000, 1);
end property;

property instr_sll;
    instr_arith(3'b001, 7'b0000000, 1);
end property;

property instr_slt;
    instr_arith(3'b010, 7'b0000000, 1);
end property;

property instr_sltu;
    instr_arith(3'b011, 7'b0000000, 1);
end property;

property instr_xor;
    instr_arith(3'b100, 7'b0000000, 1);
end property;

property instr_srl;
    instr_arith(3'b101, 7'b0000000, 1);
end property;

property instr_sra;
    instr_arith(3'b101, 7'b0100000, 1);
end property;

property instr_or;
    instr_arith(3'b110, 7'b0000000, 1);
end property;

property instr_and;
    instr_arith(3'b111, 7'b0000000, 1);
end property;

property instr_addi;
    instr_arith(3'b000, 7'b0000000, 0);
end property;

property instr_xori;
    instr_arith(3'b100, 7'b0000000, 0);
end property;

property instr_slti;
    instr_arith(3'b010, 7'b0000000, 0);
end property;

property instr_sltiu;
    instr_arith(3'b011, 7'b0000000, 0);
end property;

property instr_ori;
    instr_arith(3'b110, 7'b0000000, 0);
end property;

property instr_andi;
    instr_arith(3'b111, 7'b0000000, 0);
end property;

property instr_slli;
    instr_arith(3'b001, 7'b0000000, 0);
end property;

property instr_srli;
    instr_arith(3'b101, 7'b0000000, 0);
end property;

property instr_srai;
    instr_arith(3'b101, 7'b0100000, 0);
end property;