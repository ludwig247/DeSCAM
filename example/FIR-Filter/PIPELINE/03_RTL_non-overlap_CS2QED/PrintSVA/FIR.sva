// DATA TYPES //
typedef enum {IDLE, RUN_C1, RUN_C2, RUN_C3, RUN_OUT} phases;

`define next_shift_amount 0 //IN CASE OF REQUIRED SIGNALS VALUES IN THE FUTURE, SHIFT YOUR ENTIRE TIMING BY THIS FACTOR

`include "ipc.sva"
`include "FIR_functions.sva"

import top_level_types::*;

module FIR_verification(reset);

input reset;

//DESIGNER SHOULD PAY ATTENTION FOR USING THE MODEL CORRECT NAME TO REFER TO THE CLK SIGNAL USED IN IT
default clocking default_clk @(posedge FIR.clk); endclocking

// SYNC AND NOTIFY SIGNALS (1-cycle macros) //
function data_in_sync;
	data_in_sync = 1'b1 ;
endfunction
function data_out_sync;
	data_out_sync = 1'b1 ;
endfunction
function data_in_notify;
	data_in_notify = 1'b1 ;
endfunction
function data_out_notify;
	data_out_notify = 1'b1 ;
endfunction

// DP SIGNALS //
function int data_in_sig;
	data_in_sig = 0;
endfunction
function int data_out_sig;
	data_out_sig = 0;
endfunction

// VISIBLE REGISTERS //
function int acc;
	acc = 0;
endfunction
function int_3 coef;
	coef = {0, 0, 0};
endfunction
function int data_algorithm;
	data_algorithm = 0;
endfunction
function int_3 shiftreg;
	shiftreg = {0, 0, 0};
endfunction

// STATES //
function data_in_1;
	data_in_1 = 1'b1;
endfunction
function C1_2;
	C1_2 = 1'b1;
endfunction
function C2_3;
	C2_3 = 1'b1;
endfunction
function C3_4;
	C3_4 = 1'b1;
endfunction
function data_out_5;
	data_out_5 = 1'b1;
endfunction


////////////////////////////////////
//////////// Operations ////////////
////////////////////////////////////

sequence reset_sequence;
reset ##1 !reset;  	//DESIGNER REFER TO MODEL RESET SIGNAL HERE
endsequence

property reset_p;
	reset_sequence |=>
	t##0 data_in_1() and
	t##0 acc() == 0 and
	t##0 coef_0() == 1 and
	t##0 coef_1() == 1 and
	t##0 coef_2() == 1 and
	t##0 data_algorithm() == 0 and
	t##0 shiftreg_0() == 0 and
	t##0 shiftreg_1() == 0 and
	t##0 shiftreg_2() == 0 and
	t##0 data_in_notify() == 1 and
	t##0 data_out_notify() == 0;
endproperty
reset_a: assert property (reset_p);



property cycle_0_p(o);
 bit[31:0] acc_0;
 bit[31:0] coef_0_0;
 bit[31:0] coef_1_0;
 bit[31:0] coef_2_0;
 bit[31:0] data_algorithm_0;
 bit[31:0] data_in_sig_0;
 bit[31:0] shiftreg_0_0;
 bit[31:0] shiftreg_1_0;
 bit[31:0] shiftreg_2_0;
	t_C1_2 ##0 hold(acc_0, acc()) and
	t_data_in_1_wait ##0 hold(coef_0_0, coef_0()) and
	t_data_in_1_wait ##0 hold(coef_1_0, coef_1()) and
	t_data_in_1_wait ##0 hold(coef_2_0, coef_2()) and
	t_C1_2 ##0 hold(data_algorithm_0, data_algorithm()) and
	t_data_in_1_wait ##0 hold(data_in_sig_0, data_in_sig()) and
	t_data_in_1_wait ##0 hold(shiftreg_0_0, shiftreg_0()) and
	t_data_in_1_wait ##0 hold(shiftreg_1_0, shiftreg_1()) and
	t_data_in_1_wait ##0 hold(shiftreg_2_0, shiftreg_2()) and
	t_data_in_1(o)##0 data_in_1() and
	t_data_in_1(o)##0 data_in_sync() and
	t_data_out_5(o)##0 data_out_sync()
implies
	t_C1_2(o)##0 acc() == 0 and
	t_C1_2(o)##0 coef_0() == coef_0_0 and
	t_C1_2(o)##0 coef_1() == coef_1_0 and
	t_C1_2(o)##0 coef_2() == coef_2_0 and
	t_C1_2(o)##0 data_algorithm() == data_in_sig_0 and
	t_C1_2(o)##0 shiftreg_0() == shiftreg_0_0 and
	t_C1_2(o)##0 shiftreg_1() == shiftreg_1_0 and
	t_C1_2(o)##0 shiftreg_2() == shiftreg_2_0 and
	t_C2_3(o)##0 acc() == (acc_0 + (coef_2_0 * shiftreg_1_0)) and
	t_C2_3(o)##0 coef_0() == coef_0_0 and
	t_C2_3(o)##0 coef_1() == coef_1_0 and
	t_C2_3(o)##0 coef_2() == coef_2_0 and
	t_C2_3(o)##0 data_algorithm() == data_algorithm_0 and
	t_C2_3(o)##0 shiftreg_0() == shiftreg_0_0 and
	t_C2_3(o)##0 shiftreg_1() == shiftreg_1_0 and
	t_C2_3(o)##0 shiftreg_2() == shiftreg_1_0 and
	t_C3_4(o)##0 acc() == (acc_0 + (coef_1_0 * shiftreg_0_0)) and
	t_C3_4(o)##0 coef_0() == coef_0_0 and
	t_C3_4(o)##0 coef_1() == coef_1_0 and
	t_C3_4(o)##0 coef_2() == coef_2_0 and
	t_C3_4(o)##0 data_algorithm() == data_algorithm_0 and
	t_C3_4(o)##0 shiftreg_0() == shiftreg_0_0 and
	t_C3_4(o)##0 shiftreg_1() == shiftreg_0_0 and
	t_C3_4(o)##0 shiftreg_2() == shiftreg_2_0 and
	t_data_out_5(o)##0 acc() == (acc_0 + (coef_0_0 * data_algorithm_0)) and
	t_data_out_5(o)##0 coef_0() == (acc_0 + (coef_0_0 * data_algorithm_0)) and
	t_data_out_5(o)##0 coef_1() == coef_0_0 and
	t_data_out_5(o)##0 coef_2() == coef_1_0 and
	t_data_out_5(o)##0 data_algorithm() == data_algorithm_0 and
	t_data_out_5(o)##0 data_out_sig() == (acc_0 + (coef_0_0 * data_algorithm_0)) and
	t_data_out_5(o)##0 shiftreg_0() == data_algorithm_0 and
	t_data_out_5(o)##0 shiftreg_1() == shiftreg_1_0 and
	t_data_out_5(o)##0 shiftreg_2() == shiftreg_2_0 and
	t_end(o)##0 acc() == acc_0 and
	t_end(o)##0 coef_0() == coef_0_0 and
	t_end(o)##0 coef_1() == coef_1_0 and
	t_end(o)##0 coef_2() == coef_2_0 and
	t_end(o)##0 data_algorithm() == data_algorithm_0 and
	t_end(o)##0 shiftreg_0() == shiftreg_0_0 and
	t_end(o)##0 shiftreg_1() == shiftreg_1_0 and
	t_end(o)##0 shiftreg_2() == shiftreg_2_0;
endproperty;
cycle_0_a: assert property (disable iff (reset) cycle_0_p(1)); //ASSIGN t_end offset here



property wait_data_in_1_p(o);
 bit[31:0] acc_0;
 bit[31:0] coef_0_0;
 bit[31:0] coef_1_0;
 bit[31:0] coef_2_0;
 bit[31:0] data_algorithm_0;
 bit[31:0] shiftreg_0_0;
 bit[31:0] shiftreg_1_0;
 bit[31:0] shiftreg_2_0;
	t ##0 hold(acc_0, acc()) and
	t ##0 hold(coef_0_0, coef_0()) and
	t ##0 hold(coef_1_0, coef_1()) and
	t ##0 hold(coef_2_0, coef_2()) and
	t ##0 hold(data_algorithm_0, data_algorithm()) and
	t ##0 hold(shiftreg_0_0, shiftreg_0()) and
	t ##0 hold(shiftreg_1_0, shiftreg_1()) and
	t ##0 hold(shiftreg_2_0, shiftreg_2()) and
	t##0 data_in_1() and
	t##0 !(data_in_sync())
implies
	t##1 data_in_1() and
	t##1 acc() == acc_0 and
	t##1 coef_0() == coef_0_0 and
	t##1 coef_1() == coef_1_0 and
	t##1 coef_2() == coef_2_0 and
	t##1 data_algorithm() == data_algorithm_0 and
	t##1 shiftreg_0() == shiftreg_0_0 and
	t##1 shiftreg_1() == shiftreg_1_0 and
	t##1 shiftreg_2() == shiftreg_2_0 and
	t##1 data_in_notify() == 1 and
	t##1 data_out_notify() == 0;
endproperty;
wait_data_in_1_a: assert property (disable iff (reset) wait_data_in_1_p(1)); //ASSIGN t_end offset here



property wait_data_out_5_p(o);
 bit[31:0] acc_0;
 bit[31:0] coef_0_0;
 bit[31:0] coef_1_0;
 bit[31:0] coef_2_0;
 bit[31:0] data_algorithm_0;
 bit[31:0] data_out_sig_0;
 bit[31:0] shiftreg_0_0;
 bit[31:0] shiftreg_1_0;
 bit[31:0] shiftreg_2_0;
	t ##0 hold(acc_0, acc()) and
	t ##0 hold(coef_0_0, coef_0()) and
	t ##0 hold(coef_1_0, coef_1()) and
	t ##0 hold(coef_2_0, coef_2()) and
	t ##0 hold(data_algorithm_0, data_algorithm()) and
	t ##0 hold(data_out_sig_0, data_out_sig()) and
	t ##0 hold(shiftreg_0_0, shiftreg_0()) and
	t ##0 hold(shiftreg_1_0, shiftreg_1()) and
	t ##0 hold(shiftreg_2_0, shiftreg_2()) and
	t##0 data_out_5() and
	t##0 !(data_out_sync())
implies
	t##1 data_out_5() and
	t##1 acc() == acc_0 and
	t##1 coef_0() == coef_0_0 and
	t##1 coef_1() == coef_1_0 and
	t##1 coef_2() == coef_2_0 and
	t##1 data_algorithm() == data_algorithm_0 and
	t##1 data_out_sig() == data_out_sig_0 and
	t##1 shiftreg_0() == shiftreg_0_0 and
	t##1 shiftreg_1() == shiftreg_1_0 and
	t##1 shiftreg_2() == shiftreg_2_0 and
	t##1 data_in_notify() == 0 and
	t##1 data_out_notify() == 1;
endproperty;
wait_data_out_5_a: assert property (disable iff (reset) wait_data_out_5_p(1)); //ASSIGN t_end offset here



endmodule

//DESIGNER SHOULD PAY ATTENTION FOR USING THE MODEL CORRECT NAME FOR BINDING AND TO REFER TO THE RESET SIGNAL USED IN IT
bind FIR FIR_verification inst (.*, .reset());
