

property executeALU_2_read_0 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_2;
prove:
	 at t_end: executeALU_3;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_1 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: not(br_en);
	 at t: not((decodedInstr_instrType = jal));
	 at t: not((decodedInstr_instrType = jalr));
	 at t: not(mem_en);
	 at t: (wb_sel = WB_ALU);
	 at t: not((wb_en and not((decodedInstr_rd_addr = resize(0,32)))));
prove:
	 at t_end: fetch_4;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToMem_port_sig_addrIn = (4 + pc_reg_at_t)(31 downto 0);
	 at t_end: CtlToMem_port_sig_dataIn = 0;
	 at t_end: CtlToMem_port_sig_mask = MT_W;
	 at t_end: CtlToMem_port_sig_req = ME_RD;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (4 + pc_reg_at_t)(31 downto 0);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = ME_RD;
	 at t_end: pc_next = (4 + pc_reg_at_t)(31 downto 0);
	 at t_end: pc_reg = (4 + pc_reg_at_t)(31 downto 0);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end-1]: CtlToMem_port_notify = false;
	 at t_end: CtlToMem_port_notify = true;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_2 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: not(br_en);
	 at t: not((decodedInstr_instrType = jal));
	 at t: not((decodedInstr_instrType = jalr));
	 at t: not(mem_en);
	 at t: (wb_sel = WB_MEM);
	 at t: not((wb_en and not((decodedInstr_rd_addr = resize(0,32)))));
prove:
	 at t_end: fetch_4;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToMem_port_sig_addrIn = (4 + pc_reg_at_t)(31 downto 0);
	 at t_end: CtlToMem_port_sig_dataIn = 0;
	 at t_end: CtlToMem_port_sig_mask = MT_W;
	 at t_end: CtlToMem_port_sig_req = ME_RD;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (4 + pc_reg_at_t)(31 downto 0);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = ME_RD;
	 at t_end: pc_next = (4 + pc_reg_at_t)(31 downto 0);
	 at t_end: pc_reg = (4 + pc_reg_at_t)(31 downto 0);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end-1]: CtlToMem_port_notify = false;
	 at t_end: CtlToMem_port_notify = true;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_3 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: not(br_en);
	 at t: not((decodedInstr_instrType = jal));
	 at t: not((decodedInstr_instrType = jalr));
	 at t: not(mem_en);
	 at t: not((wb_sel = WB_ALU));
	 at t: not((wb_sel = WB_MEM));
	 at t: not((wb_sel = WB_PC4));
prove:
	 at t_end: fetch_4;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToMem_port_sig_addrIn = (4 + pc_reg_at_t)(31 downto 0);
	 at t_end: CtlToMem_port_sig_dataIn = 0;
	 at t_end: CtlToMem_port_sig_mask = MT_W;
	 at t_end: CtlToMem_port_sig_req = ME_RD;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (4 + pc_reg_at_t)(31 downto 0);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = ME_RD;
	 at t_end: pc_next = (4 + pc_reg_at_t)(31 downto 0);
	 at t_end: pc_reg = (4 + pc_reg_at_t)(31 downto 0);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end-1]: CtlToMem_port_notify = false;
	 at t_end: CtlToMem_port_notify = true;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_4 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: not(br_en);
	 at t: (decodedInstr_instrType = jal);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_ALU);
	 at t: not((wb_en and not((decodedInstr_rd_addr = resize(0,32)))));
prove:
	 at t_end: fetch_4;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToMem_port_sig_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: CtlToMem_port_sig_dataIn = 0;
	 at t_end: CtlToMem_port_sig_mask = MT_W;
	 at t_end: CtlToMem_port_sig_req = ME_RD;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = ME_RD;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end-1]: CtlToMem_port_notify = false;
	 at t_end: CtlToMem_port_notify = true;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_5 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: not(br_en);
	 at t: not((decodedInstr_instrType = jal));
	 at t: not((decodedInstr_instrType = jalr));
	 at t: not(mem_en);
	 at t: (wb_sel = WB_PC4);
	 at t: not((wb_en and not((decodedInstr_rd_addr = resize(0,32)))));
prove:
	 at t_end: fetch_4;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToMem_port_sig_addrIn = (4 + pc_reg_at_t)(31 downto 0);
	 at t_end: CtlToMem_port_sig_dataIn = 0;
	 at t_end: CtlToMem_port_sig_mask = MT_W;
	 at t_end: CtlToMem_port_sig_req = ME_RD;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (4 + pc_reg_at_t)(31 downto 0);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = ME_RD;
	 at t_end: pc_next = (4 + pc_reg_at_t)(31 downto 0);
	 at t_end: pc_reg = (4 + pc_reg_at_t)(31 downto 0);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end-1]: CtlToMem_port_notify = false;
	 at t_end: CtlToMem_port_notify = true;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_6 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: br_en;
	 at t: (decodedInstr_instrType = beq);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_ALU);
	 at t: not((wb_en and not((decodedInstr_rd_addr = resize(0,32)))));
	 at t: (ALUtoCtl_data_ALU_result = resize(0,32));
prove:
	 at t_end: fetch_4;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToMem_port_sig_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: CtlToMem_port_sig_dataIn = 0;
	 at t_end: CtlToMem_port_sig_mask = MT_W;
	 at t_end: CtlToMem_port_sig_req = ME_RD;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = ME_RD;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end-1]: CtlToMem_port_notify = false;
	 at t_end: CtlToMem_port_notify = true;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_7 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: not(br_en);
	 at t: (decodedInstr_instrType = jal);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_MEM);
	 at t: not((wb_en and not((decodedInstr_rd_addr = resize(0,32)))));
prove:
	 at t_end: fetch_4;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToMem_port_sig_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: CtlToMem_port_sig_dataIn = 0;
	 at t_end: CtlToMem_port_sig_mask = MT_W;
	 at t_end: CtlToMem_port_sig_req = ME_RD;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = ME_RD;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end-1]: CtlToMem_port_notify = false;
	 at t_end: CtlToMem_port_notify = true;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_8 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: not(br_en);
	 at t: (decodedInstr_instrType = jal);
	 at t: not(mem_en);
	 at t: not((wb_sel = WB_ALU));
	 at t: not((wb_sel = WB_MEM));
	 at t: not((wb_sel = WB_PC4));
prove:
	 at t_end: fetch_4;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToMem_port_sig_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: CtlToMem_port_sig_dataIn = 0;
	 at t_end: CtlToMem_port_sig_mask = MT_W;
	 at t_end: CtlToMem_port_sig_req = ME_RD;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = ME_RD;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end-1]: CtlToMem_port_notify = false;
	 at t_end: CtlToMem_port_notify = true;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_9 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: br_en;
	 at t: (decodedInstr_instrType = beq);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_MEM);
	 at t: not((wb_en and not((decodedInstr_rd_addr = resize(0,32)))));
	 at t: (ALUtoCtl_data_ALU_result = resize(0,32));
prove:
	 at t_end: fetch_4;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToMem_port_sig_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: CtlToMem_port_sig_dataIn = 0;
	 at t_end: CtlToMem_port_sig_mask = MT_W;
	 at t_end: CtlToMem_port_sig_req = ME_RD;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = ME_RD;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end-1]: CtlToMem_port_notify = false;
	 at t_end: CtlToMem_port_notify = true;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_10 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: br_en;
	 at t: (decodedInstr_instrType = beq);
	 at t: not(mem_en);
	 at t: not((wb_sel = WB_ALU));
	 at t: not((wb_sel = WB_MEM));
	 at t: not((wb_sel = WB_PC4));
	 at t: (ALUtoCtl_data_ALU_result = resize(0,32));
prove:
	 at t_end: fetch_4;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToMem_port_sig_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: CtlToMem_port_sig_dataIn = 0;
	 at t_end: CtlToMem_port_sig_mask = MT_W;
	 at t_end: CtlToMem_port_sig_req = ME_RD;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = ME_RD;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end-1]: CtlToMem_port_notify = false;
	 at t_end: CtlToMem_port_notify = true;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_11 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: br_en;
	 at t: (decodedInstr_instrType = bne);
	 at t: not((ALUtoCtl_data_ALU_result = resize(0,32)));
	 at t: not(mem_en);
	 at t: (wb_sel = WB_ALU);
	 at t: not((wb_en and not((decodedInstr_rd_addr = resize(0,32)))));
prove:
	 at t_end: fetch_4;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToMem_port_sig_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: CtlToMem_port_sig_dataIn = 0;
	 at t_end: CtlToMem_port_sig_mask = MT_W;
	 at t_end: CtlToMem_port_sig_req = ME_RD;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = ME_RD;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end-1]: CtlToMem_port_notify = false;
	 at t_end: CtlToMem_port_notify = true;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_12 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: not(br_en);
	 at t: (decodedInstr_instrType = jal);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_PC4);
	 at t: not((wb_en and not((decodedInstr_rd_addr = resize(0,32)))));
prove:
	 at t_end: fetch_4;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToMem_port_sig_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: CtlToMem_port_sig_dataIn = 0;
	 at t_end: CtlToMem_port_sig_mask = MT_W;
	 at t_end: CtlToMem_port_sig_req = ME_RD;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = ME_RD;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end-1]: CtlToMem_port_notify = false;
	 at t_end: CtlToMem_port_notify = true;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_13 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: not(br_en);
	 at t: (decodedInstr_instrType = jalr);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_ALU);
	 at t: not((wb_en and not((decodedInstr_rd_addr = resize(0,32)))));
prove:
	 at t_end: fetch_4;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToMem_port_sig_addrIn = (RegsToCtl_data_contents1_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: CtlToMem_port_sig_dataIn = 0;
	 at t_end: CtlToMem_port_sig_mask = MT_W;
	 at t_end: CtlToMem_port_sig_req = ME_RD;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (RegsToCtl_data_contents1_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = ME_RD;
	 at t_end: pc_next = (RegsToCtl_data_contents1_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = (RegsToCtl_data_contents1_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end-1]: CtlToMem_port_notify = false;
	 at t_end: CtlToMem_port_notify = true;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_14 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: br_en;
	 at t: (decodedInstr_instrType = beq);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_PC4);
	 at t: not((wb_en and not((decodedInstr_rd_addr = resize(0,32)))));
	 at t: (ALUtoCtl_data_ALU_result = resize(0,32));
prove:
	 at t_end: fetch_4;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToMem_port_sig_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: CtlToMem_port_sig_dataIn = 0;
	 at t_end: CtlToMem_port_sig_mask = MT_W;
	 at t_end: CtlToMem_port_sig_req = ME_RD;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = ME_RD;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end-1]: CtlToMem_port_notify = false;
	 at t_end: CtlToMem_port_notify = true;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_15 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: br_en;
	 at t: (decodedInstr_instrType = bne);
	 at t: not((ALUtoCtl_data_ALU_result = resize(0,32)));
	 at t: not(mem_en);
	 at t: (wb_sel = WB_MEM);
	 at t: not((wb_en and not((decodedInstr_rd_addr = resize(0,32)))));
prove:
	 at t_end: fetch_4;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToMem_port_sig_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: CtlToMem_port_sig_dataIn = 0;
	 at t_end: CtlToMem_port_sig_mask = MT_W;
	 at t_end: CtlToMem_port_sig_req = ME_RD;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = ME_RD;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end-1]: CtlToMem_port_notify = false;
	 at t_end: CtlToMem_port_notify = true;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_16 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: br_en;
	 at t: (decodedInstr_instrType = bne);
	 at t: not((ALUtoCtl_data_ALU_result = resize(0,32)));
	 at t: not(mem_en);
	 at t: not((wb_sel = WB_ALU));
	 at t: not((wb_sel = WB_MEM));
	 at t: not((wb_sel = WB_PC4));
prove:
	 at t_end: fetch_4;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToMem_port_sig_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: CtlToMem_port_sig_dataIn = 0;
	 at t_end: CtlToMem_port_sig_mask = MT_W;
	 at t_end: CtlToMem_port_sig_req = ME_RD;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = ME_RD;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end-1]: CtlToMem_port_notify = false;
	 at t_end: CtlToMem_port_notify = true;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_17 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: br_en;
	 at t: (decodedInstr_instrType = blt);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_ALU);
	 at t: not((wb_en and not((decodedInstr_rd_addr = resize(0,32)))));
	 at t: (ALUtoCtl_data_ALU_result = resize(1,32));
prove:
	 at t_end: fetch_4;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToMem_port_sig_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: CtlToMem_port_sig_dataIn = 0;
	 at t_end: CtlToMem_port_sig_mask = MT_W;
	 at t_end: CtlToMem_port_sig_req = ME_RD;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = ME_RD;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end-1]: CtlToMem_port_notify = false;
	 at t_end: CtlToMem_port_notify = true;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_18 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: not(br_en);
	 at t: (decodedInstr_instrType = jalr);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_MEM);
	 at t: not((wb_en and not((decodedInstr_rd_addr = resize(0,32)))));
prove:
	 at t_end: fetch_4;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToMem_port_sig_addrIn = (RegsToCtl_data_contents1_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: CtlToMem_port_sig_dataIn = 0;
	 at t_end: CtlToMem_port_sig_mask = MT_W;
	 at t_end: CtlToMem_port_sig_req = ME_RD;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (RegsToCtl_data_contents1_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = ME_RD;
	 at t_end: pc_next = (RegsToCtl_data_contents1_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = (RegsToCtl_data_contents1_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end-1]: CtlToMem_port_notify = false;
	 at t_end: CtlToMem_port_notify = true;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_19 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: not(br_en);
	 at t: (decodedInstr_instrType = jalr);
	 at t: not(mem_en);
	 at t: not((wb_sel = WB_ALU));
	 at t: not((wb_sel = WB_MEM));
	 at t: not((wb_sel = WB_PC4));
prove:
	 at t_end: fetch_4;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToMem_port_sig_addrIn = (RegsToCtl_data_contents1_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: CtlToMem_port_sig_dataIn = 0;
	 at t_end: CtlToMem_port_sig_mask = MT_W;
	 at t_end: CtlToMem_port_sig_req = ME_RD;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (RegsToCtl_data_contents1_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = ME_RD;
	 at t_end: pc_next = (RegsToCtl_data_contents1_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = (RegsToCtl_data_contents1_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end-1]: CtlToMem_port_notify = false;
	 at t_end: CtlToMem_port_notify = true;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_20 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: br_en;
	 at t: (decodedInstr_instrType = bne);
	 at t: not((ALUtoCtl_data_ALU_result = resize(0,32)));
	 at t: not(mem_en);
	 at t: (wb_sel = WB_PC4);
	 at t: not((wb_en and not((decodedInstr_rd_addr = resize(0,32)))));
prove:
	 at t_end: fetch_4;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToMem_port_sig_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: CtlToMem_port_sig_dataIn = 0;
	 at t_end: CtlToMem_port_sig_mask = MT_W;
	 at t_end: CtlToMem_port_sig_req = ME_RD;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = ME_RD;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end-1]: CtlToMem_port_notify = false;
	 at t_end: CtlToMem_port_notify = true;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_21 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: br_en;
	 at t: (decodedInstr_instrType = blt);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_MEM);
	 at t: not((wb_en and not((decodedInstr_rd_addr = resize(0,32)))));
	 at t: (ALUtoCtl_data_ALU_result = resize(1,32));
prove:
	 at t_end: fetch_4;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToMem_port_sig_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: CtlToMem_port_sig_dataIn = 0;
	 at t_end: CtlToMem_port_sig_mask = MT_W;
	 at t_end: CtlToMem_port_sig_req = ME_RD;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = ME_RD;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end-1]: CtlToMem_port_notify = false;
	 at t_end: CtlToMem_port_notify = true;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_22 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: br_en;
	 at t: (decodedInstr_instrType = blt);
	 at t: not(mem_en);
	 at t: not((wb_sel = WB_ALU));
	 at t: not((wb_sel = WB_MEM));
	 at t: not((wb_sel = WB_PC4));
	 at t: (ALUtoCtl_data_ALU_result = resize(1,32));
prove:
	 at t_end: fetch_4;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToMem_port_sig_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: CtlToMem_port_sig_dataIn = 0;
	 at t_end: CtlToMem_port_sig_mask = MT_W;
	 at t_end: CtlToMem_port_sig_req = ME_RD;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = ME_RD;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end-1]: CtlToMem_port_notify = false;
	 at t_end: CtlToMem_port_notify = true;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_23 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: br_en;
	 at t: (decodedInstr_instrType = bge);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_ALU);
	 at t: not((wb_en and not((decodedInstr_rd_addr = resize(0,32)))));
	 at t: (ALUtoCtl_data_ALU_result = resize(0,32));
prove:
	 at t_end: fetch_4;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToMem_port_sig_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: CtlToMem_port_sig_dataIn = 0;
	 at t_end: CtlToMem_port_sig_mask = MT_W;
	 at t_end: CtlToMem_port_sig_req = ME_RD;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = ME_RD;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end-1]: CtlToMem_port_notify = false;
	 at t_end: CtlToMem_port_notify = true;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_24 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: br_en;
	 at t: not(((decodedInstr_instrType = beq) and (ALUtoCtl_data_ALU_result = resize(0,32))));
	 at t: not(((decodedInstr_instrType = bne) and not((ALUtoCtl_data_ALU_result = resize(0,32)))));
	 at t: not(((decodedInstr_instrType = blt) and (ALUtoCtl_data_ALU_result = resize(1,32))));
	 at t: not(((decodedInstr_instrType = bge) and (ALUtoCtl_data_ALU_result = resize(0,32))));
	 at t: not(((decodedInstr_instrType = bltu) and (ALUtoCtl_data_ALU_result = resize(1,32))));
	 at t: not(((decodedInstr_instrType = bgeu) and (ALUtoCtl_data_ALU_result = resize(0,32))));
	 at t: not((decodedInstr_instrType = jal));
	 at t: not((decodedInstr_instrType = jalr));
	 at t: not(mem_en);
	 at t: (wb_sel = WB_ALU);
	 at t: not((wb_en and not((decodedInstr_rd_addr = resize(0,32)))));
prove:
	 at t_end: fetch_4;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToMem_port_sig_addrIn = (4 + pc_reg_at_t)(31 downto 0);
	 at t_end: CtlToMem_port_sig_dataIn = 0;
	 at t_end: CtlToMem_port_sig_mask = MT_W;
	 at t_end: CtlToMem_port_sig_req = ME_RD;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (4 + pc_reg_at_t)(31 downto 0);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = ME_RD;
	 at t_end: pc_next = (4 + pc_reg_at_t)(31 downto 0);
	 at t_end: pc_reg = (4 + pc_reg_at_t)(31 downto 0);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end-1]: CtlToMem_port_notify = false;
	 at t_end: CtlToMem_port_notify = true;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_25 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: not(br_en);
	 at t: (decodedInstr_instrType = jalr);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_PC4);
	 at t: not((wb_en and not((decodedInstr_rd_addr = resize(0,32)))));
prove:
	 at t_end: fetch_4;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToMem_port_sig_addrIn = (RegsToCtl_data_contents1_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: CtlToMem_port_sig_dataIn = 0;
	 at t_end: CtlToMem_port_sig_mask = MT_W;
	 at t_end: CtlToMem_port_sig_req = ME_RD;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (RegsToCtl_data_contents1_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = ME_RD;
	 at t_end: pc_next = (RegsToCtl_data_contents1_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = (RegsToCtl_data_contents1_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end-1]: CtlToMem_port_notify = false;
	 at t_end: CtlToMem_port_notify = true;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_26 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: br_en;
	 at t: (decodedInstr_instrType = blt);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_PC4);
	 at t: not((wb_en and not((decodedInstr_rd_addr = resize(0,32)))));
	 at t: (ALUtoCtl_data_ALU_result = resize(1,32));
prove:
	 at t_end: fetch_4;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToMem_port_sig_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: CtlToMem_port_sig_dataIn = 0;
	 at t_end: CtlToMem_port_sig_mask = MT_W;
	 at t_end: CtlToMem_port_sig_req = ME_RD;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = ME_RD;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end-1]: CtlToMem_port_notify = false;
	 at t_end: CtlToMem_port_notify = true;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_27 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: br_en;
	 at t: (decodedInstr_instrType = bge);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_MEM);
	 at t: not((wb_en and not((decodedInstr_rd_addr = resize(0,32)))));
	 at t: (ALUtoCtl_data_ALU_result = resize(0,32));
prove:
	 at t_end: fetch_4;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToMem_port_sig_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: CtlToMem_port_sig_dataIn = 0;
	 at t_end: CtlToMem_port_sig_mask = MT_W;
	 at t_end: CtlToMem_port_sig_req = ME_RD;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = ME_RD;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end-1]: CtlToMem_port_notify = false;
	 at t_end: CtlToMem_port_notify = true;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_28 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: br_en;
	 at t: (decodedInstr_instrType = bge);
	 at t: not(mem_en);
	 at t: not((wb_sel = WB_ALU));
	 at t: not((wb_sel = WB_MEM));
	 at t: not((wb_sel = WB_PC4));
	 at t: (ALUtoCtl_data_ALU_result = resize(0,32));
prove:
	 at t_end: fetch_4;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToMem_port_sig_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: CtlToMem_port_sig_dataIn = 0;
	 at t_end: CtlToMem_port_sig_mask = MT_W;
	 at t_end: CtlToMem_port_sig_req = ME_RD;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = ME_RD;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end-1]: CtlToMem_port_notify = false;
	 at t_end: CtlToMem_port_notify = true;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_29 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: br_en;
	 at t: (decodedInstr_instrType = bltu);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_ALU);
	 at t: not((wb_en and not((decodedInstr_rd_addr = resize(0,32)))));
	 at t: (ALUtoCtl_data_ALU_result = resize(1,32));
prove:
	 at t_end: fetch_4;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToMem_port_sig_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: CtlToMem_port_sig_dataIn = 0;
	 at t_end: CtlToMem_port_sig_mask = MT_W;
	 at t_end: CtlToMem_port_sig_req = ME_RD;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = ME_RD;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end-1]: CtlToMem_port_notify = false;
	 at t_end: CtlToMem_port_notify = true;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_30 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: br_en;
	 at t: not(((decodedInstr_instrType = beq) and (ALUtoCtl_data_ALU_result = resize(0,32))));
	 at t: not(((decodedInstr_instrType = bne) and not((ALUtoCtl_data_ALU_result = resize(0,32)))));
	 at t: not(((decodedInstr_instrType = blt) and (ALUtoCtl_data_ALU_result = resize(1,32))));
	 at t: not(((decodedInstr_instrType = bge) and (ALUtoCtl_data_ALU_result = resize(0,32))));
	 at t: not(((decodedInstr_instrType = bltu) and (ALUtoCtl_data_ALU_result = resize(1,32))));
	 at t: not(((decodedInstr_instrType = bgeu) and (ALUtoCtl_data_ALU_result = resize(0,32))));
	 at t: not((decodedInstr_instrType = jal));
	 at t: not((decodedInstr_instrType = jalr));
	 at t: not(mem_en);
	 at t: (wb_sel = WB_MEM);
	 at t: not((wb_en and not((decodedInstr_rd_addr = resize(0,32)))));
prove:
	 at t_end: fetch_4;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToMem_port_sig_addrIn = (4 + pc_reg_at_t)(31 downto 0);
	 at t_end: CtlToMem_port_sig_dataIn = 0;
	 at t_end: CtlToMem_port_sig_mask = MT_W;
	 at t_end: CtlToMem_port_sig_req = ME_RD;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (4 + pc_reg_at_t)(31 downto 0);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = ME_RD;
	 at t_end: pc_next = (4 + pc_reg_at_t)(31 downto 0);
	 at t_end: pc_reg = (4 + pc_reg_at_t)(31 downto 0);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end-1]: CtlToMem_port_notify = false;
	 at t_end: CtlToMem_port_notify = true;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_31 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: br_en;
	 at t: not(((decodedInstr_instrType = beq) and (ALUtoCtl_data_ALU_result = resize(0,32))));
	 at t: not(((decodedInstr_instrType = bne) and not((ALUtoCtl_data_ALU_result = resize(0,32)))));
	 at t: not(((decodedInstr_instrType = blt) and (ALUtoCtl_data_ALU_result = resize(1,32))));
	 at t: not(((decodedInstr_instrType = bge) and (ALUtoCtl_data_ALU_result = resize(0,32))));
	 at t: not(((decodedInstr_instrType = bltu) and (ALUtoCtl_data_ALU_result = resize(1,32))));
	 at t: not(((decodedInstr_instrType = bgeu) and (ALUtoCtl_data_ALU_result = resize(0,32))));
	 at t: not((decodedInstr_instrType = jal));
	 at t: not((decodedInstr_instrType = jalr));
	 at t: not(mem_en);
	 at t: not((wb_sel = WB_ALU));
	 at t: not((wb_sel = WB_MEM));
	 at t: not((wb_sel = WB_PC4));
prove:
	 at t_end: fetch_4;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToMem_port_sig_addrIn = (4 + pc_reg_at_t)(31 downto 0);
	 at t_end: CtlToMem_port_sig_dataIn = 0;
	 at t_end: CtlToMem_port_sig_mask = MT_W;
	 at t_end: CtlToMem_port_sig_req = ME_RD;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (4 + pc_reg_at_t)(31 downto 0);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = ME_RD;
	 at t_end: pc_next = (4 + pc_reg_at_t)(31 downto 0);
	 at t_end: pc_reg = (4 + pc_reg_at_t)(31 downto 0);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end-1]: CtlToMem_port_notify = false;
	 at t_end: CtlToMem_port_notify = true;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_32 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: br_en;
	 at t: (decodedInstr_instrType = bge);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_PC4);
	 at t: not((wb_en and not((decodedInstr_rd_addr = resize(0,32)))));
	 at t: (ALUtoCtl_data_ALU_result = resize(0,32));
prove:
	 at t_end: fetch_4;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToMem_port_sig_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: CtlToMem_port_sig_dataIn = 0;
	 at t_end: CtlToMem_port_sig_mask = MT_W;
	 at t_end: CtlToMem_port_sig_req = ME_RD;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = ME_RD;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end-1]: CtlToMem_port_notify = false;
	 at t_end: CtlToMem_port_notify = true;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_33 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: br_en;
	 at t: (decodedInstr_instrType = bltu);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_MEM);
	 at t: not((wb_en and not((decodedInstr_rd_addr = resize(0,32)))));
	 at t: (ALUtoCtl_data_ALU_result = resize(1,32));
prove:
	 at t_end: fetch_4;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToMem_port_sig_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: CtlToMem_port_sig_dataIn = 0;
	 at t_end: CtlToMem_port_sig_mask = MT_W;
	 at t_end: CtlToMem_port_sig_req = ME_RD;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = ME_RD;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end-1]: CtlToMem_port_notify = false;
	 at t_end: CtlToMem_port_notify = true;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_34 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: br_en;
	 at t: (decodedInstr_instrType = bltu);
	 at t: not(mem_en);
	 at t: not((wb_sel = WB_ALU));
	 at t: not((wb_sel = WB_MEM));
	 at t: not((wb_sel = WB_PC4));
	 at t: (ALUtoCtl_data_ALU_result = resize(1,32));
prove:
	 at t_end: fetch_4;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToMem_port_sig_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: CtlToMem_port_sig_dataIn = 0;
	 at t_end: CtlToMem_port_sig_mask = MT_W;
	 at t_end: CtlToMem_port_sig_req = ME_RD;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = ME_RD;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end-1]: CtlToMem_port_notify = false;
	 at t_end: CtlToMem_port_notify = true;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_35 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: br_en;
	 at t: (decodedInstr_instrType = bgeu);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_ALU);
	 at t: not((wb_en and not((decodedInstr_rd_addr = resize(0,32)))));
	 at t: (ALUtoCtl_data_ALU_result = resize(0,32));
prove:
	 at t_end: fetch_4;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToMem_port_sig_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: CtlToMem_port_sig_dataIn = 0;
	 at t_end: CtlToMem_port_sig_mask = MT_W;
	 at t_end: CtlToMem_port_sig_req = ME_RD;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = ME_RD;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end-1]: CtlToMem_port_notify = false;
	 at t_end: CtlToMem_port_notify = true;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_36 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: br_en;
	 at t: (decodedInstr_instrType = jal);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_ALU);
	 at t: not((wb_en and not((decodedInstr_rd_addr = resize(0,32)))));
prove:
	 at t_end: fetch_4;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToMem_port_sig_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: CtlToMem_port_sig_dataIn = 0;
	 at t_end: CtlToMem_port_sig_mask = MT_W;
	 at t_end: CtlToMem_port_sig_req = ME_RD;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = ME_RD;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end-1]: CtlToMem_port_notify = false;
	 at t_end: CtlToMem_port_notify = true;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_37 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: br_en;
	 at t: not(((decodedInstr_instrType = beq) and (ALUtoCtl_data_ALU_result = resize(0,32))));
	 at t: not(((decodedInstr_instrType = bne) and not((ALUtoCtl_data_ALU_result = resize(0,32)))));
	 at t: not(((decodedInstr_instrType = blt) and (ALUtoCtl_data_ALU_result = resize(1,32))));
	 at t: not(((decodedInstr_instrType = bge) and (ALUtoCtl_data_ALU_result = resize(0,32))));
	 at t: not(((decodedInstr_instrType = bltu) and (ALUtoCtl_data_ALU_result = resize(1,32))));
	 at t: not(((decodedInstr_instrType = bgeu) and (ALUtoCtl_data_ALU_result = resize(0,32))));
	 at t: not((decodedInstr_instrType = jal));
	 at t: not((decodedInstr_instrType = jalr));
	 at t: not(mem_en);
	 at t: (wb_sel = WB_PC4);
	 at t: not((wb_en and not((decodedInstr_rd_addr = resize(0,32)))));
prove:
	 at t_end: fetch_4;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToMem_port_sig_addrIn = (4 + pc_reg_at_t)(31 downto 0);
	 at t_end: CtlToMem_port_sig_dataIn = 0;
	 at t_end: CtlToMem_port_sig_mask = MT_W;
	 at t_end: CtlToMem_port_sig_req = ME_RD;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (4 + pc_reg_at_t)(31 downto 0);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = ME_RD;
	 at t_end: pc_next = (4 + pc_reg_at_t)(31 downto 0);
	 at t_end: pc_reg = (4 + pc_reg_at_t)(31 downto 0);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end-1]: CtlToMem_port_notify = false;
	 at t_end: CtlToMem_port_notify = true;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_38 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: br_en;
	 at t: (decodedInstr_instrType = bltu);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_PC4);
	 at t: not((wb_en and not((decodedInstr_rd_addr = resize(0,32)))));
	 at t: (ALUtoCtl_data_ALU_result = resize(1,32));
prove:
	 at t_end: fetch_4;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToMem_port_sig_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: CtlToMem_port_sig_dataIn = 0;
	 at t_end: CtlToMem_port_sig_mask = MT_W;
	 at t_end: CtlToMem_port_sig_req = ME_RD;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = ME_RD;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end-1]: CtlToMem_port_notify = false;
	 at t_end: CtlToMem_port_notify = true;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_39 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: br_en;
	 at t: (decodedInstr_instrType = bgeu);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_MEM);
	 at t: not((wb_en and not((decodedInstr_rd_addr = resize(0,32)))));
	 at t: (ALUtoCtl_data_ALU_result = resize(0,32));
prove:
	 at t_end: fetch_4;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToMem_port_sig_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: CtlToMem_port_sig_dataIn = 0;
	 at t_end: CtlToMem_port_sig_mask = MT_W;
	 at t_end: CtlToMem_port_sig_req = ME_RD;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = ME_RD;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end-1]: CtlToMem_port_notify = false;
	 at t_end: CtlToMem_port_notify = true;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_40 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: br_en;
	 at t: (decodedInstr_instrType = bgeu);
	 at t: not(mem_en);
	 at t: not((wb_sel = WB_ALU));
	 at t: not((wb_sel = WB_MEM));
	 at t: not((wb_sel = WB_PC4));
	 at t: (ALUtoCtl_data_ALU_result = resize(0,32));
prove:
	 at t_end: fetch_4;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToMem_port_sig_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: CtlToMem_port_sig_dataIn = 0;
	 at t_end: CtlToMem_port_sig_mask = MT_W;
	 at t_end: CtlToMem_port_sig_req = ME_RD;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = ME_RD;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end-1]: CtlToMem_port_notify = false;
	 at t_end: CtlToMem_port_notify = true;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_41 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: br_en;
	 at t: (decodedInstr_instrType = jal);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_MEM);
	 at t: not((wb_en and not((decodedInstr_rd_addr = resize(0,32)))));
prove:
	 at t_end: fetch_4;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToMem_port_sig_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: CtlToMem_port_sig_dataIn = 0;
	 at t_end: CtlToMem_port_sig_mask = MT_W;
	 at t_end: CtlToMem_port_sig_req = ME_RD;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = ME_RD;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end-1]: CtlToMem_port_notify = false;
	 at t_end: CtlToMem_port_notify = true;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_42 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: br_en;
	 at t: (decodedInstr_instrType = jal);
	 at t: not(mem_en);
	 at t: not((wb_sel = WB_ALU));
	 at t: not((wb_sel = WB_MEM));
	 at t: not((wb_sel = WB_PC4));
prove:
	 at t_end: fetch_4;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToMem_port_sig_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: CtlToMem_port_sig_dataIn = 0;
	 at t_end: CtlToMem_port_sig_mask = MT_W;
	 at t_end: CtlToMem_port_sig_req = ME_RD;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = ME_RD;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end-1]: CtlToMem_port_notify = false;
	 at t_end: CtlToMem_port_notify = true;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_43 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: br_en;
	 at t: (decodedInstr_instrType = bgeu);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_PC4);
	 at t: not((wb_en and not((decodedInstr_rd_addr = resize(0,32)))));
	 at t: (ALUtoCtl_data_ALU_result = resize(0,32));
prove:
	 at t_end: fetch_4;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToMem_port_sig_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: CtlToMem_port_sig_dataIn = 0;
	 at t_end: CtlToMem_port_sig_mask = MT_W;
	 at t_end: CtlToMem_port_sig_req = ME_RD;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = ME_RD;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end-1]: CtlToMem_port_notify = false;
	 at t_end: CtlToMem_port_notify = true;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_44 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: br_en;
	 at t: (decodedInstr_instrType = jal);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_PC4);
	 at t: not((wb_en and not((decodedInstr_rd_addr = resize(0,32)))));
prove:
	 at t_end: fetch_4;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToMem_port_sig_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: CtlToMem_port_sig_dataIn = 0;
	 at t_end: CtlToMem_port_sig_mask = MT_W;
	 at t_end: CtlToMem_port_sig_req = ME_RD;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = ME_RD;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end-1]: CtlToMem_port_notify = false;
	 at t_end: CtlToMem_port_notify = true;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_45 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: br_en;
	 at t: (decodedInstr_instrType = jalr);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_ALU);
	 at t: not((wb_en and not((decodedInstr_rd_addr = resize(0,32)))));
prove:
	 at t_end: fetch_4;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToMem_port_sig_addrIn = (RegsToCtl_data_contents1_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: CtlToMem_port_sig_dataIn = 0;
	 at t_end: CtlToMem_port_sig_mask = MT_W;
	 at t_end: CtlToMem_port_sig_req = ME_RD;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (RegsToCtl_data_contents1_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = ME_RD;
	 at t_end: pc_next = (RegsToCtl_data_contents1_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = (RegsToCtl_data_contents1_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end-1]: CtlToMem_port_notify = false;
	 at t_end: CtlToMem_port_notify = true;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_46 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: br_en;
	 at t: (decodedInstr_instrType = jalr);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_MEM);
	 at t: not((wb_en and not((decodedInstr_rd_addr = resize(0,32)))));
prove:
	 at t_end: fetch_4;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToMem_port_sig_addrIn = (RegsToCtl_data_contents1_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: CtlToMem_port_sig_dataIn = 0;
	 at t_end: CtlToMem_port_sig_mask = MT_W;
	 at t_end: CtlToMem_port_sig_req = ME_RD;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (RegsToCtl_data_contents1_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = ME_RD;
	 at t_end: pc_next = (RegsToCtl_data_contents1_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = (RegsToCtl_data_contents1_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end-1]: CtlToMem_port_notify = false;
	 at t_end: CtlToMem_port_notify = true;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_47 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: br_en;
	 at t: (decodedInstr_instrType = jalr);
	 at t: not(mem_en);
	 at t: not((wb_sel = WB_ALU));
	 at t: not((wb_sel = WB_MEM));
	 at t: not((wb_sel = WB_PC4));
prove:
	 at t_end: fetch_4;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToMem_port_sig_addrIn = (RegsToCtl_data_contents1_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: CtlToMem_port_sig_dataIn = 0;
	 at t_end: CtlToMem_port_sig_mask = MT_W;
	 at t_end: CtlToMem_port_sig_req = ME_RD;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (RegsToCtl_data_contents1_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = ME_RD;
	 at t_end: pc_next = (RegsToCtl_data_contents1_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = (RegsToCtl_data_contents1_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end-1]: CtlToMem_port_notify = false;
	 at t_end: CtlToMem_port_notify = true;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_48 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: br_en;
	 at t: (decodedInstr_instrType = jalr);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_PC4);
	 at t: not((wb_en and not((decodedInstr_rd_addr = resize(0,32)))));
prove:
	 at t_end: fetch_4;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToMem_port_sig_addrIn = (RegsToCtl_data_contents1_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: CtlToMem_port_sig_dataIn = 0;
	 at t_end: CtlToMem_port_sig_mask = MT_W;
	 at t_end: CtlToMem_port_sig_req = ME_RD;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (RegsToCtl_data_contents1_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = ME_RD;
	 at t_end: pc_next = (RegsToCtl_data_contents1_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = (RegsToCtl_data_contents1_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end-1]: CtlToMem_port_notify = false;
	 at t_end: CtlToMem_port_notify = true;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_49 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: not(br_en);
	 at t: not((decodedInstr_instrType = jal));
	 at t: not((decodedInstr_instrType = jalr));
	 at t: mem_en;
prove:
	 at t_end: memoryOperation_6;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToMem_port_sig_addrIn = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToMem_port_sig_dataIn = RegsToCtl_data_contents2_at_t;
	 at t_end: CtlToMem_port_sig_mask = memoryAccess_mask_at_t;
	 at t_end: CtlToMem_port_sig_req = memoryAccess_req_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: memoryAccess_dataIn = RegsToCtl_data_contents2_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (4 + pc_reg_at_t)(31 downto 0);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end-1]: CtlToMem_port_notify = false;
	 at t_end: CtlToMem_port_notify = true;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_50 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: not(br_en);
	 at t: (decodedInstr_instrType = jal);
	 at t: mem_en;
prove:
	 at t_end: memoryOperation_6;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToMem_port_sig_addrIn = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToMem_port_sig_dataIn = RegsToCtl_data_contents2_at_t;
	 at t_end: CtlToMem_port_sig_mask = memoryAccess_mask_at_t;
	 at t_end: CtlToMem_port_sig_req = memoryAccess_req_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: memoryAccess_dataIn = RegsToCtl_data_contents2_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end-1]: CtlToMem_port_notify = false;
	 at t_end: CtlToMem_port_notify = true;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_51 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: br_en;
	 at t: (decodedInstr_instrType = beq);
	 at t: mem_en;
	 at t: (ALUtoCtl_data_ALU_result = resize(0,32));
prove:
	 at t_end: memoryOperation_6;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToMem_port_sig_addrIn = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToMem_port_sig_dataIn = RegsToCtl_data_contents2_at_t;
	 at t_end: CtlToMem_port_sig_mask = memoryAccess_mask_at_t;
	 at t_end: CtlToMem_port_sig_req = memoryAccess_req_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: memoryAccess_dataIn = RegsToCtl_data_contents2_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end-1]: CtlToMem_port_notify = false;
	 at t_end: CtlToMem_port_notify = true;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_52 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: br_en;
	 at t: (decodedInstr_instrType = bne);
	 at t: not((ALUtoCtl_data_ALU_result = resize(0,32)));
	 at t: mem_en;
prove:
	 at t_end: memoryOperation_6;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToMem_port_sig_addrIn = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToMem_port_sig_dataIn = RegsToCtl_data_contents2_at_t;
	 at t_end: CtlToMem_port_sig_mask = memoryAccess_mask_at_t;
	 at t_end: CtlToMem_port_sig_req = memoryAccess_req_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: memoryAccess_dataIn = RegsToCtl_data_contents2_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end-1]: CtlToMem_port_notify = false;
	 at t_end: CtlToMem_port_notify = true;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_53 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: not(br_en);
	 at t: (decodedInstr_instrType = jalr);
	 at t: mem_en;
prove:
	 at t_end: memoryOperation_6;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToMem_port_sig_addrIn = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToMem_port_sig_dataIn = RegsToCtl_data_contents2_at_t;
	 at t_end: CtlToMem_port_sig_mask = memoryAccess_mask_at_t;
	 at t_end: CtlToMem_port_sig_req = memoryAccess_req_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: memoryAccess_dataIn = RegsToCtl_data_contents2_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (RegsToCtl_data_contents1_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end-1]: CtlToMem_port_notify = false;
	 at t_end: CtlToMem_port_notify = true;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_54 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: br_en;
	 at t: (decodedInstr_instrType = blt);
	 at t: mem_en;
	 at t: (ALUtoCtl_data_ALU_result = resize(1,32));
prove:
	 at t_end: memoryOperation_6;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToMem_port_sig_addrIn = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToMem_port_sig_dataIn = RegsToCtl_data_contents2_at_t;
	 at t_end: CtlToMem_port_sig_mask = memoryAccess_mask_at_t;
	 at t_end: CtlToMem_port_sig_req = memoryAccess_req_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: memoryAccess_dataIn = RegsToCtl_data_contents2_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end-1]: CtlToMem_port_notify = false;
	 at t_end: CtlToMem_port_notify = true;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_55 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: br_en;
	 at t: (decodedInstr_instrType = bge);
	 at t: mem_en;
	 at t: (ALUtoCtl_data_ALU_result = resize(0,32));
prove:
	 at t_end: memoryOperation_6;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToMem_port_sig_addrIn = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToMem_port_sig_dataIn = RegsToCtl_data_contents2_at_t;
	 at t_end: CtlToMem_port_sig_mask = memoryAccess_mask_at_t;
	 at t_end: CtlToMem_port_sig_req = memoryAccess_req_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: memoryAccess_dataIn = RegsToCtl_data_contents2_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end-1]: CtlToMem_port_notify = false;
	 at t_end: CtlToMem_port_notify = true;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_56 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: br_en;
	 at t: not(((decodedInstr_instrType = beq) and (ALUtoCtl_data_ALU_result = resize(0,32))));
	 at t: not(((decodedInstr_instrType = bne) and not((ALUtoCtl_data_ALU_result = resize(0,32)))));
	 at t: not(((decodedInstr_instrType = blt) and (ALUtoCtl_data_ALU_result = resize(1,32))));
	 at t: not(((decodedInstr_instrType = bge) and (ALUtoCtl_data_ALU_result = resize(0,32))));
	 at t: not(((decodedInstr_instrType = bltu) and (ALUtoCtl_data_ALU_result = resize(1,32))));
	 at t: not(((decodedInstr_instrType = bgeu) and (ALUtoCtl_data_ALU_result = resize(0,32))));
	 at t: not((decodedInstr_instrType = jal));
	 at t: not((decodedInstr_instrType = jalr));
	 at t: mem_en;
prove:
	 at t_end: memoryOperation_6;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToMem_port_sig_addrIn = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToMem_port_sig_dataIn = RegsToCtl_data_contents2_at_t;
	 at t_end: CtlToMem_port_sig_mask = memoryAccess_mask_at_t;
	 at t_end: CtlToMem_port_sig_req = memoryAccess_req_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: memoryAccess_dataIn = RegsToCtl_data_contents2_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (4 + pc_reg_at_t)(31 downto 0);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end-1]: CtlToMem_port_notify = false;
	 at t_end: CtlToMem_port_notify = true;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_57 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: br_en;
	 at t: (decodedInstr_instrType = bltu);
	 at t: mem_en;
	 at t: (ALUtoCtl_data_ALU_result = resize(1,32));
prove:
	 at t_end: memoryOperation_6;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToMem_port_sig_addrIn = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToMem_port_sig_dataIn = RegsToCtl_data_contents2_at_t;
	 at t_end: CtlToMem_port_sig_mask = memoryAccess_mask_at_t;
	 at t_end: CtlToMem_port_sig_req = memoryAccess_req_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: memoryAccess_dataIn = RegsToCtl_data_contents2_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end-1]: CtlToMem_port_notify = false;
	 at t_end: CtlToMem_port_notify = true;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_58 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: br_en;
	 at t: (decodedInstr_instrType = bgeu);
	 at t: mem_en;
	 at t: (ALUtoCtl_data_ALU_result = resize(0,32));
prove:
	 at t_end: memoryOperation_6;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToMem_port_sig_addrIn = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToMem_port_sig_dataIn = RegsToCtl_data_contents2_at_t;
	 at t_end: CtlToMem_port_sig_mask = memoryAccess_mask_at_t;
	 at t_end: CtlToMem_port_sig_req = memoryAccess_req_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: memoryAccess_dataIn = RegsToCtl_data_contents2_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end-1]: CtlToMem_port_notify = false;
	 at t_end: CtlToMem_port_notify = true;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_59 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: br_en;
	 at t: (decodedInstr_instrType = jal);
	 at t: mem_en;
prove:
	 at t_end: memoryOperation_6;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToMem_port_sig_addrIn = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToMem_port_sig_dataIn = RegsToCtl_data_contents2_at_t;
	 at t_end: CtlToMem_port_sig_mask = memoryAccess_mask_at_t;
	 at t_end: CtlToMem_port_sig_req = memoryAccess_req_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: memoryAccess_dataIn = RegsToCtl_data_contents2_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end-1]: CtlToMem_port_notify = false;
	 at t_end: CtlToMem_port_notify = true;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_60 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: br_en;
	 at t: (decodedInstr_instrType = jalr);
	 at t: mem_en;
prove:
	 at t_end: memoryOperation_6;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToMem_port_sig_addrIn = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToMem_port_sig_dataIn = RegsToCtl_data_contents2_at_t;
	 at t_end: CtlToMem_port_sig_mask = memoryAccess_mask_at_t;
	 at t_end: CtlToMem_port_sig_req = memoryAccess_req_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: memoryAccess_dataIn = RegsToCtl_data_contents2_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (RegsToCtl_data_contents1_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end-1]: CtlToMem_port_notify = false;
	 at t_end: CtlToMem_port_notify = true;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_61 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: not(br_en);
	 at t: not((decodedInstr_instrType = jal));
	 at t: not((decodedInstr_instrType = jalr));
	 at t: not(mem_en);
	 at t: (wb_sel = WB_ALU);
	 at t: wb_en;
	 at t: not((decodedInstr_rd_addr = resize(0,32)));
prove:
	 at t_end: writeBack_10;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToRegs_data_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_data_dst_data = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: CtlToRegs_port_sig_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_WR;
	 at t_end: CtlToRegs_port_sig_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (4 + pc_reg_at_t)(31 downto 0);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_62 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: not(br_en);
	 at t: not((decodedInstr_instrType = jal));
	 at t: not((decodedInstr_instrType = jalr));
	 at t: not(mem_en);
	 at t: (wb_sel = WB_MEM);
	 at t: wb_en;
	 at t: not((decodedInstr_rd_addr = resize(0,32)));
prove:
	 at t_end: writeBack_10;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToRegs_data_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_data_dst_data = fromMemoryData_loadedData_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: CtlToRegs_port_sig_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = fromMemoryData_loadedData_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_WR;
	 at t_end: CtlToRegs_port_sig_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (4 + pc_reg_at_t)(31 downto 0);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_63 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: not(br_en);
	 at t: (decodedInstr_instrType = jal);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_ALU);
	 at t: wb_en;
	 at t: not((decodedInstr_rd_addr = resize(0,32)));
prove:
	 at t_end: writeBack_10;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToRegs_data_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_data_dst_data = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: CtlToRegs_port_sig_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_WR;
	 at t_end: CtlToRegs_port_sig_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_64 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: not(br_en);
	 at t: not((decodedInstr_instrType = jal));
	 at t: not((decodedInstr_instrType = jalr));
	 at t: not(mem_en);
	 at t: (wb_sel = WB_PC4);
	 at t: wb_en;
	 at t: not((decodedInstr_rd_addr = resize(0,32)));
prove:
	 at t_end: writeBack_10;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToRegs_data_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_data_dst_data = (4 + pc_reg_at_t)(31 downto 0);
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: CtlToRegs_port_sig_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = (4 + pc_reg_at_t)(31 downto 0);
	 at t_end: CtlToRegs_port_sig_req = REG_WR;
	 at t_end: CtlToRegs_port_sig_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (4 + pc_reg_at_t)(31 downto 0);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_65 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: br_en;
	 at t: (decodedInstr_instrType = beq);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_ALU);
	 at t: wb_en;
	 at t: not((decodedInstr_rd_addr = resize(0,32)));
	 at t: (ALUtoCtl_data_ALU_result = resize(0,32));
prove:
	 at t_end: writeBack_10;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToRegs_data_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_data_dst_data = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: CtlToRegs_port_sig_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_WR;
	 at t_end: CtlToRegs_port_sig_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_66 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: not(br_en);
	 at t: (decodedInstr_instrType = jal);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_MEM);
	 at t: wb_en;
	 at t: not((decodedInstr_rd_addr = resize(0,32)));
prove:
	 at t_end: writeBack_10;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToRegs_data_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_data_dst_data = fromMemoryData_loadedData_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: CtlToRegs_port_sig_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = fromMemoryData_loadedData_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_WR;
	 at t_end: CtlToRegs_port_sig_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_67 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: br_en;
	 at t: (decodedInstr_instrType = beq);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_MEM);
	 at t: wb_en;
	 at t: not((decodedInstr_rd_addr = resize(0,32)));
	 at t: (ALUtoCtl_data_ALU_result = resize(0,32));
prove:
	 at t_end: writeBack_10;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToRegs_data_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_data_dst_data = fromMemoryData_loadedData_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: CtlToRegs_port_sig_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = fromMemoryData_loadedData_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_WR;
	 at t_end: CtlToRegs_port_sig_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_68 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: br_en;
	 at t: (decodedInstr_instrType = bne);
	 at t: not((ALUtoCtl_data_ALU_result = resize(0,32)));
	 at t: not(mem_en);
	 at t: (wb_sel = WB_ALU);
	 at t: wb_en;
	 at t: not((decodedInstr_rd_addr = resize(0,32)));
prove:
	 at t_end: writeBack_10;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToRegs_data_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_data_dst_data = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: CtlToRegs_port_sig_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_WR;
	 at t_end: CtlToRegs_port_sig_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_69 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: not(br_en);
	 at t: (decodedInstr_instrType = jal);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_PC4);
	 at t: wb_en;
	 at t: not((decodedInstr_rd_addr = resize(0,32)));
prove:
	 at t_end: writeBack_10;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToRegs_data_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_data_dst_data = (4 + pc_reg_at_t)(31 downto 0);
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: CtlToRegs_port_sig_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = (4 + pc_reg_at_t)(31 downto 0);
	 at t_end: CtlToRegs_port_sig_req = REG_WR;
	 at t_end: CtlToRegs_port_sig_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_70 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: not(br_en);
	 at t: (decodedInstr_instrType = jalr);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_ALU);
	 at t: wb_en;
	 at t: not((decodedInstr_rd_addr = resize(0,32)));
prove:
	 at t_end: writeBack_10;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToRegs_data_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_data_dst_data = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: CtlToRegs_port_sig_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_WR;
	 at t_end: CtlToRegs_port_sig_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (RegsToCtl_data_contents1_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_71 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: br_en;
	 at t: (decodedInstr_instrType = beq);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_PC4);
	 at t: wb_en;
	 at t: not((decodedInstr_rd_addr = resize(0,32)));
	 at t: (ALUtoCtl_data_ALU_result = resize(0,32));
prove:
	 at t_end: writeBack_10;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToRegs_data_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_data_dst_data = (4 + pc_reg_at_t)(31 downto 0);
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: CtlToRegs_port_sig_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = (4 + pc_reg_at_t)(31 downto 0);
	 at t_end: CtlToRegs_port_sig_req = REG_WR;
	 at t_end: CtlToRegs_port_sig_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_72 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: br_en;
	 at t: (decodedInstr_instrType = bne);
	 at t: not((ALUtoCtl_data_ALU_result = resize(0,32)));
	 at t: not(mem_en);
	 at t: (wb_sel = WB_MEM);
	 at t: wb_en;
	 at t: not((decodedInstr_rd_addr = resize(0,32)));
prove:
	 at t_end: writeBack_10;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToRegs_data_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_data_dst_data = fromMemoryData_loadedData_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: CtlToRegs_port_sig_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = fromMemoryData_loadedData_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_WR;
	 at t_end: CtlToRegs_port_sig_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_73 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: br_en;
	 at t: (decodedInstr_instrType = blt);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_ALU);
	 at t: wb_en;
	 at t: not((decodedInstr_rd_addr = resize(0,32)));
	 at t: (ALUtoCtl_data_ALU_result = resize(1,32));
prove:
	 at t_end: writeBack_10;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToRegs_data_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_data_dst_data = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: CtlToRegs_port_sig_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_WR;
	 at t_end: CtlToRegs_port_sig_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_74 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: not(br_en);
	 at t: (decodedInstr_instrType = jalr);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_MEM);
	 at t: wb_en;
	 at t: not((decodedInstr_rd_addr = resize(0,32)));
prove:
	 at t_end: writeBack_10;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToRegs_data_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_data_dst_data = fromMemoryData_loadedData_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: CtlToRegs_port_sig_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = fromMemoryData_loadedData_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_WR;
	 at t_end: CtlToRegs_port_sig_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (RegsToCtl_data_contents1_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_75 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: br_en;
	 at t: (decodedInstr_instrType = bne);
	 at t: not((ALUtoCtl_data_ALU_result = resize(0,32)));
	 at t: not(mem_en);
	 at t: (wb_sel = WB_PC4);
	 at t: wb_en;
	 at t: not((decodedInstr_rd_addr = resize(0,32)));
prove:
	 at t_end: writeBack_10;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToRegs_data_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_data_dst_data = (4 + pc_reg_at_t)(31 downto 0);
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: CtlToRegs_port_sig_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = (4 + pc_reg_at_t)(31 downto 0);
	 at t_end: CtlToRegs_port_sig_req = REG_WR;
	 at t_end: CtlToRegs_port_sig_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_76 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: br_en;
	 at t: (decodedInstr_instrType = blt);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_MEM);
	 at t: wb_en;
	 at t: not((decodedInstr_rd_addr = resize(0,32)));
	 at t: (ALUtoCtl_data_ALU_result = resize(1,32));
prove:
	 at t_end: writeBack_10;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToRegs_data_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_data_dst_data = fromMemoryData_loadedData_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: CtlToRegs_port_sig_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = fromMemoryData_loadedData_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_WR;
	 at t_end: CtlToRegs_port_sig_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_77 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: br_en;
	 at t: (decodedInstr_instrType = bge);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_ALU);
	 at t: wb_en;
	 at t: not((decodedInstr_rd_addr = resize(0,32)));
	 at t: (ALUtoCtl_data_ALU_result = resize(0,32));
prove:
	 at t_end: writeBack_10;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToRegs_data_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_data_dst_data = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: CtlToRegs_port_sig_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_WR;
	 at t_end: CtlToRegs_port_sig_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_78 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: br_en;
	 at t: not(((decodedInstr_instrType = beq) and (ALUtoCtl_data_ALU_result = resize(0,32))));
	 at t: not(((decodedInstr_instrType = bne) and not((ALUtoCtl_data_ALU_result = resize(0,32)))));
	 at t: not(((decodedInstr_instrType = blt) and (ALUtoCtl_data_ALU_result = resize(1,32))));
	 at t: not(((decodedInstr_instrType = bge) and (ALUtoCtl_data_ALU_result = resize(0,32))));
	 at t: not(((decodedInstr_instrType = bltu) and (ALUtoCtl_data_ALU_result = resize(1,32))));
	 at t: not(((decodedInstr_instrType = bgeu) and (ALUtoCtl_data_ALU_result = resize(0,32))));
	 at t: not((decodedInstr_instrType = jal));
	 at t: not((decodedInstr_instrType = jalr));
	 at t: not(mem_en);
	 at t: (wb_sel = WB_ALU);
	 at t: wb_en;
	 at t: not((decodedInstr_rd_addr = resize(0,32)));
prove:
	 at t_end: writeBack_10;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToRegs_data_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_data_dst_data = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: CtlToRegs_port_sig_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_WR;
	 at t_end: CtlToRegs_port_sig_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (4 + pc_reg_at_t)(31 downto 0);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_79 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: not(br_en);
	 at t: (decodedInstr_instrType = jalr);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_PC4);
	 at t: wb_en;
	 at t: not((decodedInstr_rd_addr = resize(0,32)));
prove:
	 at t_end: writeBack_10;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToRegs_data_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_data_dst_data = (4 + pc_reg_at_t)(31 downto 0);
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: CtlToRegs_port_sig_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = (4 + pc_reg_at_t)(31 downto 0);
	 at t_end: CtlToRegs_port_sig_req = REG_WR;
	 at t_end: CtlToRegs_port_sig_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (RegsToCtl_data_contents1_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_80 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: br_en;
	 at t: (decodedInstr_instrType = blt);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_PC4);
	 at t: wb_en;
	 at t: not((decodedInstr_rd_addr = resize(0,32)));
	 at t: (ALUtoCtl_data_ALU_result = resize(1,32));
prove:
	 at t_end: writeBack_10;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToRegs_data_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_data_dst_data = (4 + pc_reg_at_t)(31 downto 0);
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: CtlToRegs_port_sig_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = (4 + pc_reg_at_t)(31 downto 0);
	 at t_end: CtlToRegs_port_sig_req = REG_WR;
	 at t_end: CtlToRegs_port_sig_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_81 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: br_en;
	 at t: (decodedInstr_instrType = bge);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_MEM);
	 at t: wb_en;
	 at t: not((decodedInstr_rd_addr = resize(0,32)));
	 at t: (ALUtoCtl_data_ALU_result = resize(0,32));
prove:
	 at t_end: writeBack_10;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToRegs_data_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_data_dst_data = fromMemoryData_loadedData_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: CtlToRegs_port_sig_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = fromMemoryData_loadedData_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_WR;
	 at t_end: CtlToRegs_port_sig_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_82 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: br_en;
	 at t: (decodedInstr_instrType = bltu);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_ALU);
	 at t: wb_en;
	 at t: not((decodedInstr_rd_addr = resize(0,32)));
	 at t: (ALUtoCtl_data_ALU_result = resize(1,32));
prove:
	 at t_end: writeBack_10;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToRegs_data_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_data_dst_data = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: CtlToRegs_port_sig_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_WR;
	 at t_end: CtlToRegs_port_sig_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_83 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: br_en;
	 at t: not(((decodedInstr_instrType = beq) and (ALUtoCtl_data_ALU_result = resize(0,32))));
	 at t: not(((decodedInstr_instrType = bne) and not((ALUtoCtl_data_ALU_result = resize(0,32)))));
	 at t: not(((decodedInstr_instrType = blt) and (ALUtoCtl_data_ALU_result = resize(1,32))));
	 at t: not(((decodedInstr_instrType = bge) and (ALUtoCtl_data_ALU_result = resize(0,32))));
	 at t: not(((decodedInstr_instrType = bltu) and (ALUtoCtl_data_ALU_result = resize(1,32))));
	 at t: not(((decodedInstr_instrType = bgeu) and (ALUtoCtl_data_ALU_result = resize(0,32))));
	 at t: not((decodedInstr_instrType = jal));
	 at t: not((decodedInstr_instrType = jalr));
	 at t: not(mem_en);
	 at t: (wb_sel = WB_MEM);
	 at t: wb_en;
	 at t: not((decodedInstr_rd_addr = resize(0,32)));
prove:
	 at t_end: writeBack_10;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToRegs_data_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_data_dst_data = fromMemoryData_loadedData_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: CtlToRegs_port_sig_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = fromMemoryData_loadedData_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_WR;
	 at t_end: CtlToRegs_port_sig_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (4 + pc_reg_at_t)(31 downto 0);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_84 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: br_en;
	 at t: (decodedInstr_instrType = bge);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_PC4);
	 at t: wb_en;
	 at t: not((decodedInstr_rd_addr = resize(0,32)));
	 at t: (ALUtoCtl_data_ALU_result = resize(0,32));
prove:
	 at t_end: writeBack_10;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToRegs_data_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_data_dst_data = (4 + pc_reg_at_t)(31 downto 0);
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: CtlToRegs_port_sig_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = (4 + pc_reg_at_t)(31 downto 0);
	 at t_end: CtlToRegs_port_sig_req = REG_WR;
	 at t_end: CtlToRegs_port_sig_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_85 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: br_en;
	 at t: (decodedInstr_instrType = bltu);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_MEM);
	 at t: wb_en;
	 at t: not((decodedInstr_rd_addr = resize(0,32)));
	 at t: (ALUtoCtl_data_ALU_result = resize(1,32));
prove:
	 at t_end: writeBack_10;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToRegs_data_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_data_dst_data = fromMemoryData_loadedData_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: CtlToRegs_port_sig_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = fromMemoryData_loadedData_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_WR;
	 at t_end: CtlToRegs_port_sig_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_86 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: br_en;
	 at t: (decodedInstr_instrType = bgeu);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_ALU);
	 at t: wb_en;
	 at t: not((decodedInstr_rd_addr = resize(0,32)));
	 at t: (ALUtoCtl_data_ALU_result = resize(0,32));
prove:
	 at t_end: writeBack_10;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToRegs_data_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_data_dst_data = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: CtlToRegs_port_sig_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_WR;
	 at t_end: CtlToRegs_port_sig_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_87 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: br_en;
	 at t: (decodedInstr_instrType = jal);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_ALU);
	 at t: wb_en;
	 at t: not((decodedInstr_rd_addr = resize(0,32)));
prove:
	 at t_end: writeBack_10;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToRegs_data_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_data_dst_data = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: CtlToRegs_port_sig_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_WR;
	 at t_end: CtlToRegs_port_sig_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_88 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: br_en;
	 at t: not(((decodedInstr_instrType = beq) and (ALUtoCtl_data_ALU_result = resize(0,32))));
	 at t: not(((decodedInstr_instrType = bne) and not((ALUtoCtl_data_ALU_result = resize(0,32)))));
	 at t: not(((decodedInstr_instrType = blt) and (ALUtoCtl_data_ALU_result = resize(1,32))));
	 at t: not(((decodedInstr_instrType = bge) and (ALUtoCtl_data_ALU_result = resize(0,32))));
	 at t: not(((decodedInstr_instrType = bltu) and (ALUtoCtl_data_ALU_result = resize(1,32))));
	 at t: not(((decodedInstr_instrType = bgeu) and (ALUtoCtl_data_ALU_result = resize(0,32))));
	 at t: not((decodedInstr_instrType = jal));
	 at t: not((decodedInstr_instrType = jalr));
	 at t: not(mem_en);
	 at t: (wb_sel = WB_PC4);
	 at t: wb_en;
	 at t: not((decodedInstr_rd_addr = resize(0,32)));
prove:
	 at t_end: writeBack_10;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToRegs_data_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_data_dst_data = (4 + pc_reg_at_t)(31 downto 0);
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: CtlToRegs_port_sig_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = (4 + pc_reg_at_t)(31 downto 0);
	 at t_end: CtlToRegs_port_sig_req = REG_WR;
	 at t_end: CtlToRegs_port_sig_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (4 + pc_reg_at_t)(31 downto 0);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_89 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: br_en;
	 at t: (decodedInstr_instrType = bltu);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_PC4);
	 at t: wb_en;
	 at t: not((decodedInstr_rd_addr = resize(0,32)));
	 at t: (ALUtoCtl_data_ALU_result = resize(1,32));
prove:
	 at t_end: writeBack_10;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToRegs_data_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_data_dst_data = (4 + pc_reg_at_t)(31 downto 0);
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: CtlToRegs_port_sig_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = (4 + pc_reg_at_t)(31 downto 0);
	 at t_end: CtlToRegs_port_sig_req = REG_WR;
	 at t_end: CtlToRegs_port_sig_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_90 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: br_en;
	 at t: (decodedInstr_instrType = bgeu);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_MEM);
	 at t: wb_en;
	 at t: not((decodedInstr_rd_addr = resize(0,32)));
	 at t: (ALUtoCtl_data_ALU_result = resize(0,32));
prove:
	 at t_end: writeBack_10;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToRegs_data_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_data_dst_data = fromMemoryData_loadedData_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: CtlToRegs_port_sig_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = fromMemoryData_loadedData_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_WR;
	 at t_end: CtlToRegs_port_sig_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_91 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: br_en;
	 at t: (decodedInstr_instrType = jal);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_MEM);
	 at t: wb_en;
	 at t: not((decodedInstr_rd_addr = resize(0,32)));
prove:
	 at t_end: writeBack_10;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToRegs_data_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_data_dst_data = fromMemoryData_loadedData_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: CtlToRegs_port_sig_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = fromMemoryData_loadedData_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_WR;
	 at t_end: CtlToRegs_port_sig_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_92 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: br_en;
	 at t: (decodedInstr_instrType = bgeu);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_PC4);
	 at t: wb_en;
	 at t: not((decodedInstr_rd_addr = resize(0,32)));
	 at t: (ALUtoCtl_data_ALU_result = resize(0,32));
prove:
	 at t_end: writeBack_10;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToRegs_data_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_data_dst_data = (4 + pc_reg_at_t)(31 downto 0);
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: CtlToRegs_port_sig_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = (4 + pc_reg_at_t)(31 downto 0);
	 at t_end: CtlToRegs_port_sig_req = REG_WR;
	 at t_end: CtlToRegs_port_sig_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_93 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: br_en;
	 at t: (decodedInstr_instrType = jal);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_PC4);
	 at t: wb_en;
	 at t: not((decodedInstr_rd_addr = resize(0,32)));
prove:
	 at t_end: writeBack_10;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToRegs_data_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_data_dst_data = (4 + pc_reg_at_t)(31 downto 0);
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: CtlToRegs_port_sig_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = (4 + pc_reg_at_t)(31 downto 0);
	 at t_end: CtlToRegs_port_sig_req = REG_WR;
	 at t_end: CtlToRegs_port_sig_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_94 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: br_en;
	 at t: (decodedInstr_instrType = jalr);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_ALU);
	 at t: wb_en;
	 at t: not((decodedInstr_rd_addr = resize(0,32)));
prove:
	 at t_end: writeBack_10;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToRegs_data_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_data_dst_data = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: CtlToRegs_port_sig_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_WR;
	 at t_end: CtlToRegs_port_sig_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (RegsToCtl_data_contents1_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_95 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: br_en;
	 at t: (decodedInstr_instrType = jalr);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_MEM);
	 at t: wb_en;
	 at t: not((decodedInstr_rd_addr = resize(0,32)));
prove:
	 at t_end: writeBack_10;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToRegs_data_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_data_dst_data = fromMemoryData_loadedData_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: CtlToRegs_port_sig_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = fromMemoryData_loadedData_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_WR;
	 at t_end: CtlToRegs_port_sig_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (RegsToCtl_data_contents1_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property executeALU_3_read_96 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_3;
	 at t: br_en;
	 at t: (decodedInstr_instrType = jalr);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_PC4);
	 at t: wb_en;
	 at t: not((decodedInstr_rd_addr = resize(0,32)));
prove:
	 at t_end: writeBack_10;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToRegs_data_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_data_dst_data = (4 + pc_reg_at_t)(31 downto 0);
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: CtlToRegs_port_sig_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = (4 + pc_reg_at_t)(31 downto 0);
	 at t_end: CtlToRegs_port_sig_req = REG_WR;
	 at t_end: CtlToRegs_port_sig_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (RegsToCtl_data_contents1_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_4_write_97 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_4;
	 at t: CtlToMem_port_sync;
prove:
	 at t_end: fetch_5;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end-1]: MemToCtl_port_notify = false;
	 at t_end: MemToCtl_port_notify = true;
end property;

property fetch_5_read_98 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_X);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_99 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_X);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_100 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_X);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_101 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_X);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_102 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_ADD);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (RegsToCtl_data_contents1_at_t + RegsToCtl_data_contents2_at_t)(31 downto 0);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_103 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_X);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_104 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_X);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_105 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_X);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_106 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_X);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_107 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_X);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_108 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_X);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_109 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_X);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_110 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_X);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_111 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SUB);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (RegsToCtl_data_contents1_at_t + (4294967295 * RegsToCtl_data_contents2_at_t)(31 downto 0))(31 downto 0);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_112 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_ADD);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (RegsToCtl_data_contents1_at_t + DecToCtl_port_sig_imm_at_t)(31 downto 0);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_113 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_ADD);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (DecToCtl_port_sig_imm_at_t + RegsToCtl_data_contents2_at_t)(31 downto 0);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_114 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_X);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_115 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_X);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_116 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_X);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_117 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_X);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_118 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_ADD);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (RegsToCtl_data_contents1_at_t + RegsToCtl_data_contents2_at_t)(31 downto 0);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_119 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_X);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_120 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_X);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_121 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_X);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_122 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_X);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_123 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_X);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_124 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_X);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_125 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_X);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_126 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_AND);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = not((not(RegsToCtl_data_contents1_at_t) or not(RegsToCtl_data_contents2_at_t)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_127 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SUB);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (RegsToCtl_data_contents1_at_t + (4294967295 * DecToCtl_port_sig_imm_at_t)(31 downto 0))(31 downto 0);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_128 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_ADD);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (RegsToCtl_data_contents1_at_t + pc_reg_at_t)(31 downto 0);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_129 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_ADD);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = RegsToCtl_data_contents1_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_130 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SUB);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (DecToCtl_port_sig_imm_at_t + (4294967295 * RegsToCtl_data_contents2_at_t)(31 downto 0))(31 downto 0);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_131 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_ADD);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (2 * DecToCtl_port_sig_imm_at_t)(31 downto 0);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_132 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_ADD);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (pc_reg_at_t + RegsToCtl_data_contents2_at_t)(31 downto 0);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_133 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_X);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_134 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_X);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_135 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_ADD);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = RegsToCtl_data_contents2_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_136 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_X);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_137 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_X);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_138 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SUB);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (RegsToCtl_data_contents1_at_t + (4294967295 * RegsToCtl_data_contents2_at_t)(31 downto 0))(31 downto 0);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_139 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_ADD);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (RegsToCtl_data_contents1_at_t + DecToCtl_port_sig_imm_at_t)(31 downto 0);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_140 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_ADD);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (DecToCtl_port_sig_imm_at_t + RegsToCtl_data_contents2_at_t)(31 downto 0);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_141 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_X);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_142 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_X);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_143 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_X);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_144 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_X);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_145 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_ADD);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (RegsToCtl_data_contents1_at_t + RegsToCtl_data_contents2_at_t)(31 downto 0);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_146 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_X);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_147 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_X);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_148 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_X);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_149 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_X);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_150 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_X);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_151 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_OR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (RegsToCtl_data_contents1_at_t or RegsToCtl_data_contents2_at_t);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_152 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_AND);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = not((not(RegsToCtl_data_contents1_at_t) or not(DecToCtl_port_sig_imm_at_t)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_153 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SUB);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (RegsToCtl_data_contents1_at_t + (4294967295 * pc_reg_at_t)(31 downto 0))(31 downto 0);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_154 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SUB);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = RegsToCtl_data_contents1_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_155 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_AND);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = not((not(DecToCtl_port_sig_imm_at_t) or not(RegsToCtl_data_contents2_at_t)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_156 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SUB);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (0 * DecToCtl_port_sig_imm_at_t)(31 downto 0);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_157 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_ADD);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (DecToCtl_port_sig_imm_at_t + pc_reg_at_t)(31 downto 0);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_158 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_ADD);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = DecToCtl_port_sig_imm_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_159 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SUB);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (pc_reg_at_t + (4294967295 * RegsToCtl_data_contents2_at_t)(31 downto 0))(31 downto 0);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_160 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_ADD);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (pc_reg_at_t + DecToCtl_port_sig_imm_at_t)(31 downto 0);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_161 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SUB);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (4294967295 * RegsToCtl_data_contents2_at_t)(31 downto 0);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_162 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_ADD);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = DecToCtl_port_sig_imm_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_163 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_AND);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = not((not(RegsToCtl_data_contents1_at_t) or not(RegsToCtl_data_contents2_at_t)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_164 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SUB);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (RegsToCtl_data_contents1_at_t + (4294967295 * DecToCtl_port_sig_imm_at_t)(31 downto 0))(31 downto 0);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_165 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_ADD);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (RegsToCtl_data_contents1_at_t + pc_reg_at_t)(31 downto 0);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_166 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_ADD);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = RegsToCtl_data_contents1_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_167 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SUB);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (DecToCtl_port_sig_imm_at_t + (4294967295 * RegsToCtl_data_contents2_at_t)(31 downto 0))(31 downto 0);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_168 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_ADD);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (2 * DecToCtl_port_sig_imm_at_t)(31 downto 0);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_169 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_ADD);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (pc_reg_at_t + RegsToCtl_data_contents2_at_t)(31 downto 0);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_170 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_X);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_171 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_X);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_172 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_ADD);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = RegsToCtl_data_contents2_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_173 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_X);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_174 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_X);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_175 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SUB);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (RegsToCtl_data_contents1_at_t + (4294967295 * RegsToCtl_data_contents2_at_t)(31 downto 0))(31 downto 0);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_176 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_ADD);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (RegsToCtl_data_contents1_at_t + DecToCtl_port_sig_imm_at_t)(31 downto 0);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_177 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_ADD);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (DecToCtl_port_sig_imm_at_t + RegsToCtl_data_contents2_at_t)(31 downto 0);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_178 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_X);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_179 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_X);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_180 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_X);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_181 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_X);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_182 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_XOR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (RegsToCtl_data_contents1_at_t xor RegsToCtl_data_contents2_at_t);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_183 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_OR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (RegsToCtl_data_contents1_at_t or DecToCtl_port_sig_imm_at_t);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_184 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_AND);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = not((not(RegsToCtl_data_contents1_at_t) or not(pc_reg_at_t)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_185 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_AND);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_186 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_OR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (DecToCtl_port_sig_imm_at_t or RegsToCtl_data_contents2_at_t);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_187 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_AND);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = DecToCtl_port_sig_imm_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_188 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SUB);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (DecToCtl_port_sig_imm_at_t + (4294967295 * pc_reg_at_t)(31 downto 0))(31 downto 0);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_189 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SUB);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = DecToCtl_port_sig_imm_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_190 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_AND);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = not((not(pc_reg_at_t) or not(RegsToCtl_data_contents2_at_t)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_191 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SUB);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (pc_reg_at_t + (4294967295 * DecToCtl_port_sig_imm_at_t)(31 downto 0))(31 downto 0);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_192 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_ADD);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (2 * pc_reg_at_t)(31 downto 0);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_193 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_ADD);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = pc_reg_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_194 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_AND);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_195 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SUB);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (4294967295 * DecToCtl_port_sig_imm_at_t)(31 downto 0);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_196 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_ADD);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = pc_reg_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_197 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_ADD);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_198 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_OR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (RegsToCtl_data_contents1_at_t or RegsToCtl_data_contents2_at_t);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_199 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_AND);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = not((not(RegsToCtl_data_contents1_at_t) or not(DecToCtl_port_sig_imm_at_t)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_200 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SUB);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (RegsToCtl_data_contents1_at_t + (4294967295 * pc_reg_at_t)(31 downto 0))(31 downto 0);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_201 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SUB);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = RegsToCtl_data_contents1_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_202 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_AND);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = not((not(DecToCtl_port_sig_imm_at_t) or not(RegsToCtl_data_contents2_at_t)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_203 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SUB);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (0 * DecToCtl_port_sig_imm_at_t)(31 downto 0);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_204 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_ADD);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (DecToCtl_port_sig_imm_at_t + pc_reg_at_t)(31 downto 0);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_205 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_ADD);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = DecToCtl_port_sig_imm_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_206 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SUB);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (pc_reg_at_t + (4294967295 * RegsToCtl_data_contents2_at_t)(31 downto 0))(31 downto 0);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_207 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_ADD);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (pc_reg_at_t + DecToCtl_port_sig_imm_at_t)(31 downto 0);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_208 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SUB);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (4294967295 * RegsToCtl_data_contents2_at_t)(31 downto 0);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_209 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_ADD);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = DecToCtl_port_sig_imm_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_210 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_AND);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = not((not(RegsToCtl_data_contents1_at_t) or not(RegsToCtl_data_contents2_at_t)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_211 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SUB);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (RegsToCtl_data_contents1_at_t + (4294967295 * DecToCtl_port_sig_imm_at_t)(31 downto 0))(31 downto 0);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_212 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_ADD);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (RegsToCtl_data_contents1_at_t + pc_reg_at_t)(31 downto 0);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_213 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_ADD);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = RegsToCtl_data_contents1_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_214 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SUB);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (DecToCtl_port_sig_imm_at_t + (4294967295 * RegsToCtl_data_contents2_at_t)(31 downto 0))(31 downto 0);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_215 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_ADD);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (2 * DecToCtl_port_sig_imm_at_t)(31 downto 0);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_216 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_ADD);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (pc_reg_at_t + RegsToCtl_data_contents2_at_t)(31 downto 0);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_217 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_X);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_218 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_X);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_219 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_ADD);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = RegsToCtl_data_contents2_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_220 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_X);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_221 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_X);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_222 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_XOR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (RegsToCtl_data_contents1_at_t xor DecToCtl_port_sig_imm_at_t);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_223 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_OR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (RegsToCtl_data_contents1_at_t or pc_reg_at_t);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_224 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_OR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = RegsToCtl_data_contents1_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_225 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_XOR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (DecToCtl_port_sig_imm_at_t xor RegsToCtl_data_contents2_at_t);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_226 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_OR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = DecToCtl_port_sig_imm_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_227 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_AND);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = not((not(DecToCtl_port_sig_imm_at_t) or not(pc_reg_at_t)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_228 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_AND);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_229 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_OR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (pc_reg_at_t or RegsToCtl_data_contents2_at_t);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_230 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_AND);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = not((not(pc_reg_at_t) or not(DecToCtl_port_sig_imm_at_t)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_231 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SUB);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (0 * pc_reg_at_t)(31 downto 0);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_232 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SUB);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = pc_reg_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_233 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_OR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = RegsToCtl_data_contents2_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_234 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_AND);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_235 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SUB);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (4294967295 * pc_reg_at_t)(31 downto 0);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_236 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SUB);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_237 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_XOR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (RegsToCtl_data_contents1_at_t xor RegsToCtl_data_contents2_at_t);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_238 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_OR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (RegsToCtl_data_contents1_at_t or DecToCtl_port_sig_imm_at_t);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_239 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_AND);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = not((not(RegsToCtl_data_contents1_at_t) or not(pc_reg_at_t)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_240 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_AND);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_241 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_OR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (DecToCtl_port_sig_imm_at_t or RegsToCtl_data_contents2_at_t);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_242 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_AND);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = DecToCtl_port_sig_imm_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_243 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SUB);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (DecToCtl_port_sig_imm_at_t + (4294967295 * pc_reg_at_t)(31 downto 0))(31 downto 0);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_244 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SUB);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = DecToCtl_port_sig_imm_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_245 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_AND);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = not((not(pc_reg_at_t) or not(RegsToCtl_data_contents2_at_t)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_246 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SUB);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (pc_reg_at_t + (4294967295 * DecToCtl_port_sig_imm_at_t)(31 downto 0))(31 downto 0);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_247 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_ADD);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (2 * pc_reg_at_t)(31 downto 0);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_248 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_ADD);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = pc_reg_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_249 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_AND);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_250 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SUB);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (4294967295 * DecToCtl_port_sig_imm_at_t)(31 downto 0);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_251 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_ADD);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = pc_reg_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_252 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_ADD);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_253 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_OR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (RegsToCtl_data_contents1_at_t or RegsToCtl_data_contents2_at_t);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_254 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_AND);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = not((not(RegsToCtl_data_contents1_at_t) or not(DecToCtl_port_sig_imm_at_t)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_255 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SUB);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (RegsToCtl_data_contents1_at_t + (4294967295 * pc_reg_at_t)(31 downto 0))(31 downto 0);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_256 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SUB);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = RegsToCtl_data_contents1_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_257 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_AND);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = not((not(DecToCtl_port_sig_imm_at_t) or not(RegsToCtl_data_contents2_at_t)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_258 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SUB);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (0 * DecToCtl_port_sig_imm_at_t)(31 downto 0);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_259 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_ADD);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (DecToCtl_port_sig_imm_at_t + pc_reg_at_t)(31 downto 0);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_260 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_ADD);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = DecToCtl_port_sig_imm_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_261 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SUB);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (pc_reg_at_t + (4294967295 * RegsToCtl_data_contents2_at_t)(31 downto 0))(31 downto 0);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_262 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_ADD);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (pc_reg_at_t + DecToCtl_port_sig_imm_at_t)(31 downto 0);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_263 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SUB);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (4294967295 * RegsToCtl_data_contents2_at_t)(31 downto 0);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_264 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_ADD);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = DecToCtl_port_sig_imm_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_265 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: not((RegsToCtl_data_contents2 <= RegsToCtl_data_contents1));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 1;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_266 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: (RegsToCtl_data_contents2 <= RegsToCtl_data_contents1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_267 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_XOR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (RegsToCtl_data_contents1_at_t xor pc_reg_at_t);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_268 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_XOR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = RegsToCtl_data_contents1_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_269 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_XOR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_270 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_OR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (DecToCtl_port_sig_imm_at_t or pc_reg_at_t);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_271 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_OR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = DecToCtl_port_sig_imm_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_272 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_XOR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (pc_reg_at_t xor RegsToCtl_data_contents2_at_t);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_273 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_OR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (pc_reg_at_t or DecToCtl_port_sig_imm_at_t);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_274 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_AND);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = pc_reg_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_275 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_AND);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_276 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_XOR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = RegsToCtl_data_contents2_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_277 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_OR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = DecToCtl_port_sig_imm_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_278 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_AND);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_279 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_AND);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_280 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_XOR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (RegsToCtl_data_contents1_at_t xor DecToCtl_port_sig_imm_at_t);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_281 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_OR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (RegsToCtl_data_contents1_at_t or pc_reg_at_t);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_282 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_OR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = RegsToCtl_data_contents1_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_283 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_XOR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (DecToCtl_port_sig_imm_at_t xor RegsToCtl_data_contents2_at_t);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_284 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_OR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = DecToCtl_port_sig_imm_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_285 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_AND);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = not((not(DecToCtl_port_sig_imm_at_t) or not(pc_reg_at_t)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_286 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_AND);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_287 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_OR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (pc_reg_at_t or RegsToCtl_data_contents2_at_t);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_288 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_AND);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = not((not(pc_reg_at_t) or not(DecToCtl_port_sig_imm_at_t)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_289 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SUB);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (0 * pc_reg_at_t)(31 downto 0);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_290 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SUB);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = pc_reg_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_291 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_OR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = RegsToCtl_data_contents2_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_292 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_AND);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_293 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SUB);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (4294967295 * pc_reg_at_t)(31 downto 0);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_294 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SUB);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_295 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_XOR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (RegsToCtl_data_contents1_at_t xor RegsToCtl_data_contents2_at_t);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_296 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_OR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (RegsToCtl_data_contents1_at_t or DecToCtl_port_sig_imm_at_t);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_297 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_AND);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = not((not(RegsToCtl_data_contents1_at_t) or not(pc_reg_at_t)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_298 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_AND);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_299 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_OR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (DecToCtl_port_sig_imm_at_t or RegsToCtl_data_contents2_at_t);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_300 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_AND);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = DecToCtl_port_sig_imm_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_301 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SUB);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (DecToCtl_port_sig_imm_at_t + (4294967295 * pc_reg_at_t)(31 downto 0))(31 downto 0);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_302 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SUB);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = DecToCtl_port_sig_imm_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_303 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_AND);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = not((not(pc_reg_at_t) or not(RegsToCtl_data_contents2_at_t)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_304 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SUB);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (pc_reg_at_t + (4294967295 * DecToCtl_port_sig_imm_at_t)(31 downto 0))(31 downto 0);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_305 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_ADD);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (2 * pc_reg_at_t)(31 downto 0);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_306 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_ADD);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = pc_reg_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_307 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_AND);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_308 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SUB);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (4294967295 * DecToCtl_port_sig_imm_at_t)(31 downto 0);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_309 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_ADD);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = pc_reg_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_310 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_ADD);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_311 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: not((RegsToCtl_data_contents2 <= RegsToCtl_data_contents1));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 1;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_312 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: (RegsToCtl_data_contents2 <= RegsToCtl_data_contents1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_313 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SLL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_left(RegsToCtl_data_contents1_at_t,(RegsToCtl_data_contents2_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_314 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: not((DecToCtl_port_sig_imm <= RegsToCtl_data_contents1));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 1;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_315 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: (DecToCtl_port_sig_imm <= RegsToCtl_data_contents1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_316 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: not((RegsToCtl_data_contents2 <= DecToCtl_port_sig_imm));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 1;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_317 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: (RegsToCtl_data_contents2 <= DecToCtl_port_sig_imm);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_318 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_XOR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (DecToCtl_port_sig_imm_at_t xor pc_reg_at_t);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_319 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_XOR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = DecToCtl_port_sig_imm_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_320 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_XOR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (pc_reg_at_t xor DecToCtl_port_sig_imm_at_t);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_321 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_OR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = pc_reg_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_322 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_OR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = pc_reg_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_323 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_XOR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = DecToCtl_port_sig_imm_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_324 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_OR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = pc_reg_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_325 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_OR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_326 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: not((RegsToCtl_data_contents2 <= RegsToCtl_data_contents1));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 1;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_327 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: (RegsToCtl_data_contents2 <= RegsToCtl_data_contents1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_328 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_XOR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (RegsToCtl_data_contents1_at_t xor pc_reg_at_t);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_329 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_XOR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = RegsToCtl_data_contents1_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_330 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_XOR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_331 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_OR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (DecToCtl_port_sig_imm_at_t or pc_reg_at_t);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_332 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_OR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = DecToCtl_port_sig_imm_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_333 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_XOR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (pc_reg_at_t xor RegsToCtl_data_contents2_at_t);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_334 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_OR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (pc_reg_at_t or DecToCtl_port_sig_imm_at_t);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_335 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_AND);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = pc_reg_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_336 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_AND);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_337 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_XOR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = RegsToCtl_data_contents2_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_338 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_OR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = DecToCtl_port_sig_imm_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_339 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_AND);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_340 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_AND);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_341 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_X);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_342 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_XOR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (RegsToCtl_data_contents1_at_t xor DecToCtl_port_sig_imm_at_t);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_343 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_OR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (RegsToCtl_data_contents1_at_t or pc_reg_at_t);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_344 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_OR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = RegsToCtl_data_contents1_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_345 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_XOR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (DecToCtl_port_sig_imm_at_t xor RegsToCtl_data_contents2_at_t);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_346 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_OR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = DecToCtl_port_sig_imm_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_347 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_AND);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = not((not(DecToCtl_port_sig_imm_at_t) or not(pc_reg_at_t)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_348 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_AND);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_349 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_OR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (pc_reg_at_t or RegsToCtl_data_contents2_at_t);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_350 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_AND);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = not((not(pc_reg_at_t) or not(DecToCtl_port_sig_imm_at_t)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_351 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SUB);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (0 * pc_reg_at_t)(31 downto 0);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_352 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SUB);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = pc_reg_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_353 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_OR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = RegsToCtl_data_contents2_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_354 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_AND);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_355 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SUB);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (4294967295 * pc_reg_at_t)(31 downto 0);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_356 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SUB);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_357 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SRA);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(RegsToCtl_data_contents1_at_t,(RegsToCtl_data_contents2_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_358 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: not((DecToCtl_port_sig_imm <= RegsToCtl_data_contents1));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 1;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_359 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: (DecToCtl_port_sig_imm <= RegsToCtl_data_contents1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_360 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SLL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_left(RegsToCtl_data_contents1_at_t,(DecToCtl_port_sig_imm_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_361 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: not((pc_reg <= RegsToCtl_data_contents1));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 1;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_362 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: (pc_reg <= RegsToCtl_data_contents1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_363 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_364 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: not((RegsToCtl_data_contents2 <= DecToCtl_port_sig_imm));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 1;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_365 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: (RegsToCtl_data_contents2 <= DecToCtl_port_sig_imm);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_366 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SLL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_left(DecToCtl_port_sig_imm_at_t,(RegsToCtl_data_contents2_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_367 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_368 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: not((RegsToCtl_data_contents2 <= pc_reg));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 1;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_369 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: (RegsToCtl_data_contents2 <= pc_reg);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_370 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_XOR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_371 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_XOR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = pc_reg_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_372 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: not((RegsToCtl_data_contents2 = resize(0,32)));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 1;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_373 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: (RegsToCtl_data_contents2 = resize(0,32));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_374 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_XOR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = pc_reg_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_375 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_XOR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_376 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: not((RegsToCtl_data_contents2 <= RegsToCtl_data_contents1));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 1;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_377 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: (RegsToCtl_data_contents2 <= RegsToCtl_data_contents1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_378 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SLL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_left(RegsToCtl_data_contents1_at_t,(RegsToCtl_data_contents2_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_379 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: not((DecToCtl_port_sig_imm <= RegsToCtl_data_contents1));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 1;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_380 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: (DecToCtl_port_sig_imm <= RegsToCtl_data_contents1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_381 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: not((RegsToCtl_data_contents2 <= DecToCtl_port_sig_imm));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 1;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_382 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: (RegsToCtl_data_contents2 <= DecToCtl_port_sig_imm);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_383 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_XOR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (DecToCtl_port_sig_imm_at_t xor pc_reg_at_t);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_384 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_XOR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = DecToCtl_port_sig_imm_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_385 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_XOR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (pc_reg_at_t xor DecToCtl_port_sig_imm_at_t);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_386 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_OR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = pc_reg_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_387 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_OR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = pc_reg_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_388 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_XOR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = DecToCtl_port_sig_imm_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_389 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_OR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = pc_reg_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_390 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_OR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_391 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_X);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_392 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_X);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_393 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: not((RegsToCtl_data_contents2 <= RegsToCtl_data_contents1));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 1;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_394 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: (RegsToCtl_data_contents2 <= RegsToCtl_data_contents1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_395 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_XOR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (RegsToCtl_data_contents1_at_t xor pc_reg_at_t);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_396 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_XOR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = RegsToCtl_data_contents1_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_397 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_XOR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_398 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_OR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (DecToCtl_port_sig_imm_at_t or pc_reg_at_t);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_399 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_OR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = DecToCtl_port_sig_imm_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_400 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_XOR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (pc_reg_at_t xor RegsToCtl_data_contents2_at_t);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_401 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_OR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (pc_reg_at_t or DecToCtl_port_sig_imm_at_t);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_402 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_AND);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = pc_reg_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_403 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_AND);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_404 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_XOR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = RegsToCtl_data_contents2_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_405 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_OR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = DecToCtl_port_sig_imm_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_406 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_AND);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_407 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_AND);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_408 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SRL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(RegsToCtl_data_contents1_at_t,(RegsToCtl_data_contents2_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_409 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SRA);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(RegsToCtl_data_contents1_at_t,(DecToCtl_port_sig_imm_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_410 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: not((pc_reg <= RegsToCtl_data_contents1));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 1;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_411 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: (pc_reg <= RegsToCtl_data_contents1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_412 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SLL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_left(RegsToCtl_data_contents1_at_t,(pc_reg_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_413 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_414 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SLL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = RegsToCtl_data_contents1_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_415 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SRA);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(DecToCtl_port_sig_imm_at_t,(RegsToCtl_data_contents2_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_416 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_417 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SLL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_left(DecToCtl_port_sig_imm_at_t,(DecToCtl_port_sig_imm_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_418 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: not((pc_reg <= DecToCtl_port_sig_imm));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 1;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_419 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: (pc_reg <= DecToCtl_port_sig_imm);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_420 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_421 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: not((RegsToCtl_data_contents2 <= pc_reg));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 1;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_422 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: (RegsToCtl_data_contents2 <= pc_reg);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_423 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SLL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_left(pc_reg_at_t,(RegsToCtl_data_contents2_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_424 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: not((DecToCtl_port_sig_imm <= pc_reg));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 1;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_425 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: (DecToCtl_port_sig_imm <= pc_reg);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_426 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: not((RegsToCtl_data_contents2 = resize(0,32)));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 1;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_427 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: (RegsToCtl_data_contents2 = resize(0,32));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_428 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SLL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_left(resize(0,32),(RegsToCtl_data_contents2_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_429 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: not((DecToCtl_port_sig_imm = resize(0,32)));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 1;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_430 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: (DecToCtl_port_sig_imm = resize(0,32));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_431 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SRA);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(RegsToCtl_data_contents1_at_t,(RegsToCtl_data_contents2_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_432 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: not((DecToCtl_port_sig_imm <= RegsToCtl_data_contents1));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 1;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_433 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: (DecToCtl_port_sig_imm <= RegsToCtl_data_contents1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_434 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SLL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_left(RegsToCtl_data_contents1_at_t,(DecToCtl_port_sig_imm_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_435 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: not((pc_reg <= RegsToCtl_data_contents1));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 1;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_436 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: (pc_reg <= RegsToCtl_data_contents1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_437 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_438 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: not((RegsToCtl_data_contents2 <= DecToCtl_port_sig_imm));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 1;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_439 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: (RegsToCtl_data_contents2 <= DecToCtl_port_sig_imm);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_440 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SLL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_left(DecToCtl_port_sig_imm_at_t,(RegsToCtl_data_contents2_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_441 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_442 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: not((RegsToCtl_data_contents2 <= pc_reg));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 1;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_443 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: (RegsToCtl_data_contents2 <= pc_reg);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_444 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_XOR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_445 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_XOR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = pc_reg_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_446 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: not((RegsToCtl_data_contents2 = resize(0,32)));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 1;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_447 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: (RegsToCtl_data_contents2 = resize(0,32));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_448 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_XOR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = pc_reg_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_449 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_XOR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_450 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_ADD);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (RegsToCtl_data_contents1_at_t + RegsToCtl_data_contents2_at_t)(31 downto 0);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_451 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_X);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_452 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_X);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_453 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_X);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_454 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_X);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_455 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_X);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_456 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: not((RegsToCtl_data_contents2 <= RegsToCtl_data_contents1));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 1;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_457 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: (RegsToCtl_data_contents2 <= RegsToCtl_data_contents1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_458 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SLL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_left(RegsToCtl_data_contents1_at_t,(RegsToCtl_data_contents2_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_459 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: not((DecToCtl_port_sig_imm <= RegsToCtl_data_contents1));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 1;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_460 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: (DecToCtl_port_sig_imm <= RegsToCtl_data_contents1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_461 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: not((RegsToCtl_data_contents2 <= DecToCtl_port_sig_imm));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 1;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_462 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: (RegsToCtl_data_contents2 <= DecToCtl_port_sig_imm);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_463 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_XOR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (DecToCtl_port_sig_imm_at_t xor pc_reg_at_t);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_464 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_XOR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = DecToCtl_port_sig_imm_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_465 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_XOR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (pc_reg_at_t xor DecToCtl_port_sig_imm_at_t);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_466 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_OR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = pc_reg_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_467 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_OR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = pc_reg_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_468 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_XOR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = DecToCtl_port_sig_imm_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_469 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_OR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = pc_reg_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_470 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_OR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_471 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_COPY1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = RegsToCtl_data_contents1_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_472 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SRL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(RegsToCtl_data_contents1_at_t,(DecToCtl_port_sig_imm_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_473 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SRA);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(RegsToCtl_data_contents1_at_t,(pc_reg_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_474 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SRA);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = RegsToCtl_data_contents1_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_475 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SRL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(DecToCtl_port_sig_imm_at_t,(RegsToCtl_data_contents2_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_476 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SRA);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(DecToCtl_port_sig_imm_at_t,(DecToCtl_port_sig_imm_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_477 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: not((pc_reg <= DecToCtl_port_sig_imm));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 1;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_478 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: (pc_reg <= DecToCtl_port_sig_imm);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_479 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SLL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_left(DecToCtl_port_sig_imm_at_t,(pc_reg_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_480 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_481 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SLL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = DecToCtl_port_sig_imm_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_482 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SRA);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(pc_reg_at_t,(RegsToCtl_data_contents2_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_483 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: not((DecToCtl_port_sig_imm <= pc_reg));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 1;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_484 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: (DecToCtl_port_sig_imm <= pc_reg);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_485 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SLL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_left(pc_reg_at_t,(DecToCtl_port_sig_imm_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_486 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_487 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_488 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SRA);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(0,(RegsToCtl_data_contents2_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_489 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: not((DecToCtl_port_sig_imm = resize(0,32)));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 1;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_490 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: (DecToCtl_port_sig_imm = resize(0,32));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_491 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SLL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_left(resize(0,32),(DecToCtl_port_sig_imm_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_492 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: not((pc_reg = resize(0,32)));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 1;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_493 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: (pc_reg = resize(0,32));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_494 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_495 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SRL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(RegsToCtl_data_contents1_at_t,(RegsToCtl_data_contents2_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_496 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SRA);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(RegsToCtl_data_contents1_at_t,(DecToCtl_port_sig_imm_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_497 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: not((pc_reg <= RegsToCtl_data_contents1));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 1;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_498 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: (pc_reg <= RegsToCtl_data_contents1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_499 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SLL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_left(RegsToCtl_data_contents1_at_t,(pc_reg_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_500 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_501 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SLL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = RegsToCtl_data_contents1_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_502 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SRA);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(DecToCtl_port_sig_imm_at_t,(RegsToCtl_data_contents2_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_503 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_504 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SLL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_left(DecToCtl_port_sig_imm_at_t,(DecToCtl_port_sig_imm_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_505 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: not((pc_reg <= DecToCtl_port_sig_imm));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 1;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_506 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: (pc_reg <= DecToCtl_port_sig_imm);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_507 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_508 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: not((RegsToCtl_data_contents2 <= pc_reg));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 1;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_509 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: (RegsToCtl_data_contents2 <= pc_reg);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_510 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SLL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_left(pc_reg_at_t,(RegsToCtl_data_contents2_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_511 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: not((DecToCtl_port_sig_imm <= pc_reg));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 1;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_512 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: (DecToCtl_port_sig_imm <= pc_reg);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_513 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: not((RegsToCtl_data_contents2 = resize(0,32)));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 1;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_514 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: (RegsToCtl_data_contents2 = resize(0,32));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_515 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SLL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_left(resize(0,32),(RegsToCtl_data_contents2_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_516 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: not((DecToCtl_port_sig_imm = resize(0,32)));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 1;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_517 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: (DecToCtl_port_sig_imm = resize(0,32));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_518 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SUB);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (RegsToCtl_data_contents1_at_t + (4294967295 * RegsToCtl_data_contents2_at_t)(31 downto 0))(31 downto 0);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_519 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_ADD);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (RegsToCtl_data_contents1_at_t + DecToCtl_port_sig_imm_at_t)(31 downto 0);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_520 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_ADD);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (DecToCtl_port_sig_imm_at_t + RegsToCtl_data_contents2_at_t)(31 downto 0);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_521 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_X);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_522 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_X);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_523 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_X);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_524 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_X);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_525 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SRA);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(RegsToCtl_data_contents1_at_t,(RegsToCtl_data_contents2_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_526 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: not((DecToCtl_port_sig_imm <= RegsToCtl_data_contents1));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 1;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_527 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: (DecToCtl_port_sig_imm <= RegsToCtl_data_contents1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_528 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SLL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_left(RegsToCtl_data_contents1_at_t,(DecToCtl_port_sig_imm_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_529 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: not((pc_reg <= RegsToCtl_data_contents1));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 1;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_530 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: (pc_reg <= RegsToCtl_data_contents1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_531 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_532 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: not((RegsToCtl_data_contents2 <= DecToCtl_port_sig_imm));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 1;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_533 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: (RegsToCtl_data_contents2 <= DecToCtl_port_sig_imm);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_534 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SLL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_left(DecToCtl_port_sig_imm_at_t,(RegsToCtl_data_contents2_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_535 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_536 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: not((RegsToCtl_data_contents2 <= pc_reg));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 1;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_537 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: (RegsToCtl_data_contents2 <= pc_reg);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_538 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_XOR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_539 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_XOR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = pc_reg_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_540 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: not((RegsToCtl_data_contents2 = resize(0,32)));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 1;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_541 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: (RegsToCtl_data_contents2 = resize(0,32));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_542 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_XOR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = pc_reg_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_543 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_XOR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_544 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_COPY1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = RegsToCtl_data_contents1_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_545 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SRL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(RegsToCtl_data_contents1_at_t,(pc_reg_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_546 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SRL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = RegsToCtl_data_contents1_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_547 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_COPY1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = DecToCtl_port_sig_imm_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_548 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SRL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(DecToCtl_port_sig_imm_at_t,(DecToCtl_port_sig_imm_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_549 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SRA);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(DecToCtl_port_sig_imm_at_t,(pc_reg_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_550 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SRA);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = DecToCtl_port_sig_imm_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_551 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SRL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(pc_reg_at_t,(RegsToCtl_data_contents2_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_552 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SRA);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(pc_reg_at_t,(DecToCtl_port_sig_imm_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_553 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_554 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SLL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_left(pc_reg_at_t,(pc_reg_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_555 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_556 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SLL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = pc_reg_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_557 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SRL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(0,(RegsToCtl_data_contents2_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_558 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SRA);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(0,(DecToCtl_port_sig_imm_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_559 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: not((pc_reg = resize(0,32)));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 1;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_560 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: (pc_reg = resize(0,32));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_561 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SLL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_left(resize(0,32),(pc_reg_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_562 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_563 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SLL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_564 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: (DecToCtl_port_sig_instrType = jal);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = ALU_X;
	 at t_end: CtlToALU_data_op1_sel = OP_X;
	 at t_end: CtlToALU_data_op2_sel = OP_X;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_PC4;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_565 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_COPY1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = RegsToCtl_data_contents1_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_566 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SRL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(RegsToCtl_data_contents1_at_t,(DecToCtl_port_sig_imm_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_567 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SRA);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(RegsToCtl_data_contents1_at_t,(pc_reg_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_568 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SRA);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = RegsToCtl_data_contents1_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_569 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SRL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(DecToCtl_port_sig_imm_at_t,(RegsToCtl_data_contents2_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_570 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SRA);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(DecToCtl_port_sig_imm_at_t,(DecToCtl_port_sig_imm_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_571 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: not((pc_reg <= DecToCtl_port_sig_imm));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 1;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_572 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: (pc_reg <= DecToCtl_port_sig_imm);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_573 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SLL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_left(DecToCtl_port_sig_imm_at_t,(pc_reg_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_574 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_575 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SLL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = DecToCtl_port_sig_imm_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_576 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SRA);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(pc_reg_at_t,(RegsToCtl_data_contents2_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_577 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: not((DecToCtl_port_sig_imm <= pc_reg));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 1;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_578 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: (DecToCtl_port_sig_imm <= pc_reg);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_579 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SLL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_left(pc_reg_at_t,(DecToCtl_port_sig_imm_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_580 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_581 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_582 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SRA);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(0,(RegsToCtl_data_contents2_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_583 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: not((DecToCtl_port_sig_imm = resize(0,32)));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 1;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_584 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: (DecToCtl_port_sig_imm = resize(0,32));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_585 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SLL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_left(resize(0,32),(DecToCtl_port_sig_imm_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_586 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: not((pc_reg = resize(0,32)));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 1;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_587 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: (pc_reg = resize(0,32));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_588 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_589 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_AND);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = not((not(RegsToCtl_data_contents1_at_t) or not(RegsToCtl_data_contents2_at_t)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_590 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SUB);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (RegsToCtl_data_contents1_at_t + (4294967295 * DecToCtl_port_sig_imm_at_t)(31 downto 0))(31 downto 0);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_591 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_ADD);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (RegsToCtl_data_contents1_at_t + pc_reg_at_t)(31 downto 0);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_592 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_ADD);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = RegsToCtl_data_contents1_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_593 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SUB);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (DecToCtl_port_sig_imm_at_t + (4294967295 * RegsToCtl_data_contents2_at_t)(31 downto 0))(31 downto 0);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_594 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_ADD);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (2 * DecToCtl_port_sig_imm_at_t)(31 downto 0);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_595 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_ADD);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (pc_reg_at_t + RegsToCtl_data_contents2_at_t)(31 downto 0);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_596 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_X);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_597 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_X);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_598 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_ADD);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = RegsToCtl_data_contents2_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_599 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_X);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_600 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_X);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_601 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SRL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(RegsToCtl_data_contents1_at_t,(RegsToCtl_data_contents2_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_602 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SRA);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(RegsToCtl_data_contents1_at_t,(DecToCtl_port_sig_imm_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_603 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: not((pc_reg <= RegsToCtl_data_contents1));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 1;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_604 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: (pc_reg <= RegsToCtl_data_contents1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_605 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SLL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_left(RegsToCtl_data_contents1_at_t,(pc_reg_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_606 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_607 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SLL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = RegsToCtl_data_contents1_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_608 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SRA);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(DecToCtl_port_sig_imm_at_t,(RegsToCtl_data_contents2_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_609 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_610 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SLL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_left(DecToCtl_port_sig_imm_at_t,(DecToCtl_port_sig_imm_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_611 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: not((pc_reg <= DecToCtl_port_sig_imm));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 1;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_612 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: (pc_reg <= DecToCtl_port_sig_imm);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_613 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_614 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: not((RegsToCtl_data_contents2 <= pc_reg));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 1;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_615 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: (RegsToCtl_data_contents2 <= pc_reg);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_616 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SLL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_left(pc_reg_at_t,(RegsToCtl_data_contents2_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_617 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: not((DecToCtl_port_sig_imm <= pc_reg));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 1;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_618 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: (DecToCtl_port_sig_imm <= pc_reg);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_619 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: not((RegsToCtl_data_contents2 = resize(0,32)));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 1;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_620 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: (RegsToCtl_data_contents2 = resize(0,32));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_621 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SLL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_left(resize(0,32),(RegsToCtl_data_contents2_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_622 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: not((DecToCtl_port_sig_imm = resize(0,32)));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 1;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_623 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: (DecToCtl_port_sig_imm = resize(0,32));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_624 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_COPY1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = RegsToCtl_data_contents1_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_625 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_COPY1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = RegsToCtl_data_contents1_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_626 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_COPY1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = DecToCtl_port_sig_imm_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_627 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SRL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(DecToCtl_port_sig_imm_at_t,(pc_reg_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_628 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SRL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = DecToCtl_port_sig_imm_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_629 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_COPY1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = pc_reg_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_630 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SRL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(pc_reg_at_t,(DecToCtl_port_sig_imm_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_631 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SRA);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(pc_reg_at_t,(pc_reg_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_632 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SRA);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = pc_reg_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_633 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_COPY1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_634 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SRL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(0,(DecToCtl_port_sig_imm_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_635 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SRA);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(0,(pc_reg_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_636 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SRA);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_637 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_COPY1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = RegsToCtl_data_contents1_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_638 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SRL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(RegsToCtl_data_contents1_at_t,(pc_reg_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_639 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SRL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = RegsToCtl_data_contents1_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_640 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_COPY1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = DecToCtl_port_sig_imm_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_641 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SRL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(DecToCtl_port_sig_imm_at_t,(DecToCtl_port_sig_imm_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_642 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SRA);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(DecToCtl_port_sig_imm_at_t,(pc_reg_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_643 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SRA);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = DecToCtl_port_sig_imm_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_644 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SRL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(pc_reg_at_t,(RegsToCtl_data_contents2_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_645 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SRA);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(pc_reg_at_t,(DecToCtl_port_sig_imm_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_646 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_647 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SLL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_left(pc_reg_at_t,(pc_reg_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_648 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_649 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SLL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = pc_reg_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_650 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SRL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(0,(RegsToCtl_data_contents2_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_651 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SRA);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(0,(DecToCtl_port_sig_imm_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_652 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: not((pc_reg = resize(0,32)));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 1;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_653 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: (pc_reg = resize(0,32));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_654 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SLL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_left(resize(0,32),(pc_reg_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_655 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_656 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SLL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_657 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_OR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (RegsToCtl_data_contents1_at_t or RegsToCtl_data_contents2_at_t);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_658 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_AND);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = not((not(RegsToCtl_data_contents1_at_t) or not(DecToCtl_port_sig_imm_at_t)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_659 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SUB);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (RegsToCtl_data_contents1_at_t + (4294967295 * pc_reg_at_t)(31 downto 0))(31 downto 0);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_660 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SUB);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = RegsToCtl_data_contents1_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_661 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_AND);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = not((not(DecToCtl_port_sig_imm_at_t) or not(RegsToCtl_data_contents2_at_t)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_662 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SUB);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (0 * DecToCtl_port_sig_imm_at_t)(31 downto 0);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_663 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_ADD);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (DecToCtl_port_sig_imm_at_t + pc_reg_at_t)(31 downto 0);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_664 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_ADD);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = DecToCtl_port_sig_imm_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_665 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SUB);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (pc_reg_at_t + (4294967295 * RegsToCtl_data_contents2_at_t)(31 downto 0))(31 downto 0);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_666 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_ADD);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (pc_reg_at_t + DecToCtl_port_sig_imm_at_t)(31 downto 0);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_667 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SUB);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (4294967295 * RegsToCtl_data_contents2_at_t)(31 downto 0);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_668 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_ADD);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = DecToCtl_port_sig_imm_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_669 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_COPY1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = RegsToCtl_data_contents1_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_670 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SRL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(RegsToCtl_data_contents1_at_t,(DecToCtl_port_sig_imm_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_671 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SRA);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(RegsToCtl_data_contents1_at_t,(pc_reg_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_672 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SRA);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = RegsToCtl_data_contents1_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_673 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SRL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(DecToCtl_port_sig_imm_at_t,(RegsToCtl_data_contents2_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_674 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SRA);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(DecToCtl_port_sig_imm_at_t,(DecToCtl_port_sig_imm_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_675 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: not((pc_reg <= DecToCtl_port_sig_imm));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 1;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_676 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: (pc_reg <= DecToCtl_port_sig_imm);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_677 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SLL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_left(DecToCtl_port_sig_imm_at_t,(pc_reg_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_678 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_679 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SLL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = DecToCtl_port_sig_imm_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_680 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SRA);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(pc_reg_at_t,(RegsToCtl_data_contents2_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_681 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: not((DecToCtl_port_sig_imm <= pc_reg));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 1;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_682 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: (DecToCtl_port_sig_imm <= pc_reg);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_683 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SLL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_left(pc_reg_at_t,(DecToCtl_port_sig_imm_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_684 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_685 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_686 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SRA);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(0,(RegsToCtl_data_contents2_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_687 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: not((DecToCtl_port_sig_imm = resize(0,32)));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 1;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_688 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: (DecToCtl_port_sig_imm = resize(0,32));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_689 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SLL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_left(resize(0,32),(DecToCtl_port_sig_imm_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_690 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: not((pc_reg = resize(0,32)));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 1;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_691 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: (pc_reg = resize(0,32));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_692 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_693 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_COPY1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = DecToCtl_port_sig_imm_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_694 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_COPY1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = DecToCtl_port_sig_imm_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_695 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_COPY1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = pc_reg_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_696 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SRL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(pc_reg_at_t,(pc_reg_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_697 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SRL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = pc_reg_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_698 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_COPY1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_699 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SRL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(0,(pc_reg_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_700 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SRL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_701 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_COPY1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = RegsToCtl_data_contents1_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_702 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_COPY1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = RegsToCtl_data_contents1_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_703 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_COPY1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = DecToCtl_port_sig_imm_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_704 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SRL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(DecToCtl_port_sig_imm_at_t,(pc_reg_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_705 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SRL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = DecToCtl_port_sig_imm_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_706 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_COPY1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = pc_reg_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_707 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SRL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(pc_reg_at_t,(DecToCtl_port_sig_imm_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_708 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SRA);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(pc_reg_at_t,(pc_reg_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_709 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SRA);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = pc_reg_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_710 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_COPY1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_711 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SRL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(0,(DecToCtl_port_sig_imm_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_712 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SRA);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(0,(pc_reg_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_713 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SRA);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_714 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_XOR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (RegsToCtl_data_contents1_at_t xor RegsToCtl_data_contents2_at_t);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_715 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_OR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (RegsToCtl_data_contents1_at_t or DecToCtl_port_sig_imm_at_t);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_716 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_AND);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = not((not(RegsToCtl_data_contents1_at_t) or not(pc_reg_at_t)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_717 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_AND);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_718 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_OR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (DecToCtl_port_sig_imm_at_t or RegsToCtl_data_contents2_at_t);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_719 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_AND);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = DecToCtl_port_sig_imm_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_720 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SUB);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (DecToCtl_port_sig_imm_at_t + (4294967295 * pc_reg_at_t)(31 downto 0))(31 downto 0);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_721 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SUB);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = DecToCtl_port_sig_imm_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_722 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_AND);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = not((not(pc_reg_at_t) or not(RegsToCtl_data_contents2_at_t)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_723 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SUB);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (pc_reg_at_t + (4294967295 * DecToCtl_port_sig_imm_at_t)(31 downto 0))(31 downto 0);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_724 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_ADD);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (2 * pc_reg_at_t)(31 downto 0);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_725 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_ADD);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = pc_reg_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_726 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_AND);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_727 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SUB);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (4294967295 * DecToCtl_port_sig_imm_at_t)(31 downto 0);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_728 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_ADD);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = pc_reg_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_729 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_ADD);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_730 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_COPY1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = RegsToCtl_data_contents1_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_731 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SRL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(RegsToCtl_data_contents1_at_t,(pc_reg_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_732 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SRL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = RegsToCtl_data_contents1_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_733 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_COPY1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = DecToCtl_port_sig_imm_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_734 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SRL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(DecToCtl_port_sig_imm_at_t,(DecToCtl_port_sig_imm_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_735 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SRA);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(DecToCtl_port_sig_imm_at_t,(pc_reg_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_736 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SRA);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = DecToCtl_port_sig_imm_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_737 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SRL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(pc_reg_at_t,(RegsToCtl_data_contents2_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_738 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SRA);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(pc_reg_at_t,(DecToCtl_port_sig_imm_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_739 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_740 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SLL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_left(pc_reg_at_t,(pc_reg_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_741 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_742 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SLL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = pc_reg_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_743 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SRL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(0,(RegsToCtl_data_contents2_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_744 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SRA);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(0,(DecToCtl_port_sig_imm_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_745 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: not((pc_reg = resize(0,32)));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 1;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_746 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: (pc_reg = resize(0,32));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_747 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SLL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_left(resize(0,32),(pc_reg_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_748 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_749 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SLL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_750 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_COPY1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = pc_reg_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_751 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_COPY1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = pc_reg_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_752 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_COPY1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_753 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_COPY1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_754 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_COPY1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = DecToCtl_port_sig_imm_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_755 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_COPY1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = DecToCtl_port_sig_imm_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_756 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_COPY1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = pc_reg_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_757 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SRL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(pc_reg_at_t,(pc_reg_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_758 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SRL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = pc_reg_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_759 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_COPY1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_760 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SRL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(0,(pc_reg_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_761 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SRL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_762 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_XOR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (RegsToCtl_data_contents1_at_t xor DecToCtl_port_sig_imm_at_t);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_763 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_OR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (RegsToCtl_data_contents1_at_t or pc_reg_at_t);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_764 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_OR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = RegsToCtl_data_contents1_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_765 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_XOR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (DecToCtl_port_sig_imm_at_t xor RegsToCtl_data_contents2_at_t);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_766 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_OR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = DecToCtl_port_sig_imm_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_767 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_AND);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = not((not(DecToCtl_port_sig_imm_at_t) or not(pc_reg_at_t)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_768 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_AND);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_769 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_OR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (pc_reg_at_t or RegsToCtl_data_contents2_at_t);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_770 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_AND);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = not((not(pc_reg_at_t) or not(DecToCtl_port_sig_imm_at_t)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_771 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SUB);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (0 * pc_reg_at_t)(31 downto 0);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_772 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SUB);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = pc_reg_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_773 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_OR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = RegsToCtl_data_contents2_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_774 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_AND);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_775 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SUB);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (4294967295 * pc_reg_at_t)(31 downto 0);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_776 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SUB);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_777 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_COPY1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = RegsToCtl_data_contents1_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_778 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_COPY1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = RegsToCtl_data_contents1_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_779 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_COPY1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = DecToCtl_port_sig_imm_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_780 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SRL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(DecToCtl_port_sig_imm_at_t,(pc_reg_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_781 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SRL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = DecToCtl_port_sig_imm_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_782 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_COPY1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = pc_reg_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_783 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SRL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(pc_reg_at_t,(DecToCtl_port_sig_imm_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_784 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SRA);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(pc_reg_at_t,(pc_reg_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_785 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SRA);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = pc_reg_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_786 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_COPY1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_787 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SRL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(0,(DecToCtl_port_sig_imm_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_788 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SRA);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(0,(pc_reg_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_789 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SRA);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_790 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_COPY1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = pc_reg_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_791 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_COPY1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = pc_reg_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_792 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_COPY1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_793 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_COPY1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_794 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: (DecToCtl_port_sig_instrType = auipc);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (pc_reg_at_t + DecToCtl_port_sig_imm_at_t)(31 downto 0);
	 at t_end: CtlToALU_data_alu_fun = ALU_ADD;
	 at t_end: CtlToALU_data_op1_sel = OP_PC;
	 at t_end: CtlToALU_data_op2_sel = OP_IMM;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_795 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: not((RegsToCtl_data_contents2 <= RegsToCtl_data_contents1));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 1;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_796 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: (RegsToCtl_data_contents2 <= RegsToCtl_data_contents1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_797 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_XOR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (RegsToCtl_data_contents1_at_t xor pc_reg_at_t);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_798 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_XOR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = RegsToCtl_data_contents1_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_799 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_XOR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_800 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_OR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (DecToCtl_port_sig_imm_at_t or pc_reg_at_t);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_801 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_OR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = DecToCtl_port_sig_imm_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_802 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_XOR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (pc_reg_at_t xor RegsToCtl_data_contents2_at_t);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_803 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_OR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (pc_reg_at_t or DecToCtl_port_sig_imm_at_t);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_804 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_AND);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = pc_reg_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_805 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_AND);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_806 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_XOR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = RegsToCtl_data_contents2_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_807 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_OR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = DecToCtl_port_sig_imm_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_808 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_AND);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_809 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_AND);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_810 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_COPY1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = DecToCtl_port_sig_imm_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_811 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_COPY1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = DecToCtl_port_sig_imm_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_812 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_COPY1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = pc_reg_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_813 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SRL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(pc_reg_at_t,(pc_reg_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_814 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SRL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = pc_reg_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_815 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_COPY1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_816 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SRL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(0,(pc_reg_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_817 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SRL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_818 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: not((RegsToCtl_data_contents2 <= RegsToCtl_data_contents1));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 1;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_819 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: (RegsToCtl_data_contents2 <= RegsToCtl_data_contents1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_820 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SLL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_left(RegsToCtl_data_contents1_at_t,(RegsToCtl_data_contents2_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_821 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: not((DecToCtl_port_sig_imm <= RegsToCtl_data_contents1));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 1;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_822 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: (DecToCtl_port_sig_imm <= RegsToCtl_data_contents1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_823 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: not((RegsToCtl_data_contents2 <= DecToCtl_port_sig_imm));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 1;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_824 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: (RegsToCtl_data_contents2 <= DecToCtl_port_sig_imm);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_825 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_XOR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (DecToCtl_port_sig_imm_at_t xor pc_reg_at_t);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_826 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_XOR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = DecToCtl_port_sig_imm_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_827 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_XOR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (pc_reg_at_t xor DecToCtl_port_sig_imm_at_t);
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_828 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_OR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = pc_reg_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_829 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_OR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = pc_reg_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_830 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_XOR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = DecToCtl_port_sig_imm_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_831 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_OR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = pc_reg_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_832 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_OR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_833 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_COPY1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = pc_reg_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_834 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_COPY1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = pc_reg_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_835 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_COPY1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_836 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_COPY1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_837 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SRA);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(RegsToCtl_data_contents1_at_t,(RegsToCtl_data_contents2_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_838 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: not((DecToCtl_port_sig_imm <= RegsToCtl_data_contents1));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 1;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_839 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: (DecToCtl_port_sig_imm <= RegsToCtl_data_contents1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_840 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SLL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_left(RegsToCtl_data_contents1_at_t,(DecToCtl_port_sig_imm_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_841 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: not((pc_reg <= RegsToCtl_data_contents1));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 1;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_842 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: (pc_reg <= RegsToCtl_data_contents1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_843 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_844 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: not((RegsToCtl_data_contents2 <= DecToCtl_port_sig_imm));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 1;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_845 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: (RegsToCtl_data_contents2 <= DecToCtl_port_sig_imm);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_846 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SLL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_left(DecToCtl_port_sig_imm_at_t,(RegsToCtl_data_contents2_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_847 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_848 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: not((RegsToCtl_data_contents2 <= pc_reg));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 1;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_849 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: (RegsToCtl_data_contents2 <= pc_reg);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_850 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_XOR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_851 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_XOR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = pc_reg_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_852 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: not((RegsToCtl_data_contents2 = resize(0,32)));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 1;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_853 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: (RegsToCtl_data_contents2 = resize(0,32));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_854 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_XOR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = pc_reg_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_855 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_XOR);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_856 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SRL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(RegsToCtl_data_contents1_at_t,(RegsToCtl_data_contents2_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_857 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SRA);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(RegsToCtl_data_contents1_at_t,(DecToCtl_port_sig_imm_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_858 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: not((pc_reg <= RegsToCtl_data_contents1));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 1;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_859 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: (pc_reg <= RegsToCtl_data_contents1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_860 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SLL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_left(RegsToCtl_data_contents1_at_t,(pc_reg_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_861 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_862 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SLL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = RegsToCtl_data_contents1_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_863 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SRA);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(DecToCtl_port_sig_imm_at_t,(RegsToCtl_data_contents2_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_864 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_865 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SLL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_left(DecToCtl_port_sig_imm_at_t,(DecToCtl_port_sig_imm_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_866 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: not((pc_reg <= DecToCtl_port_sig_imm));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 1;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_867 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: (pc_reg <= DecToCtl_port_sig_imm);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_868 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_869 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: not((RegsToCtl_data_contents2 <= pc_reg));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 1;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_870 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: (RegsToCtl_data_contents2 <= pc_reg);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_871 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SLL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_left(pc_reg_at_t,(RegsToCtl_data_contents2_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_872 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: not((DecToCtl_port_sig_imm <= pc_reg));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 1;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_873 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: (DecToCtl_port_sig_imm <= pc_reg);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_874 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: not((RegsToCtl_data_contents2 = resize(0,32)));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 1;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_875 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: (RegsToCtl_data_contents2 = resize(0,32));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_876 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SLL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_left(resize(0,32),(RegsToCtl_data_contents2_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_877 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: not((DecToCtl_port_sig_imm = resize(0,32)));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 1;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_878 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: (DecToCtl_port_sig_imm = resize(0,32));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_879 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_COPY1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = RegsToCtl_data_contents1_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_880 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SRL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(RegsToCtl_data_contents1_at_t,(DecToCtl_port_sig_imm_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_881 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SRA);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(RegsToCtl_data_contents1_at_t,(pc_reg_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_882 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SRA);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = RegsToCtl_data_contents1_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_883 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SRL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(DecToCtl_port_sig_imm_at_t,(RegsToCtl_data_contents2_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_884 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SRA);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(DecToCtl_port_sig_imm_at_t,(DecToCtl_port_sig_imm_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_885 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: not((pc_reg <= DecToCtl_port_sig_imm));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 1;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_886 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: (pc_reg <= DecToCtl_port_sig_imm);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_887 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SLL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_left(DecToCtl_port_sig_imm_at_t,(pc_reg_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_888 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_889 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SLL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = DecToCtl_port_sig_imm_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_890 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SRA);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(pc_reg_at_t,(RegsToCtl_data_contents2_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_891 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: not((DecToCtl_port_sig_imm <= pc_reg));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 1;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_892 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: (DecToCtl_port_sig_imm <= pc_reg);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_893 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SLL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_left(pc_reg_at_t,(DecToCtl_port_sig_imm_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_894 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_895 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_896 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SRA);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(0,(RegsToCtl_data_contents2_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_897 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: not((DecToCtl_port_sig_imm = resize(0,32)));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 1;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_898 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: (DecToCtl_port_sig_imm = resize(0,32));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_899 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SLL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_left(resize(0,32),(DecToCtl_port_sig_imm_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_900 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: not((pc_reg = resize(0,32)));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 1;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_901 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: (pc_reg = resize(0,32));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_902 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SLT);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_903 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_COPY1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = RegsToCtl_data_contents1_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_904 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SRL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(RegsToCtl_data_contents1_at_t,(pc_reg_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_905 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SRL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = RegsToCtl_data_contents1_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_906 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_COPY1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = DecToCtl_port_sig_imm_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_907 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SRL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(DecToCtl_port_sig_imm_at_t,(DecToCtl_port_sig_imm_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_908 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SRA);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(DecToCtl_port_sig_imm_at_t,(pc_reg_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_909 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SRA);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = DecToCtl_port_sig_imm_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_910 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SRL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(pc_reg_at_t,(RegsToCtl_data_contents2_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_911 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SRA);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(pc_reg_at_t,(DecToCtl_port_sig_imm_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_912 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_913 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SLL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_left(pc_reg_at_t,(pc_reg_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_914 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_915 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SLL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = pc_reg_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_916 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_SRL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(0,(RegsToCtl_data_contents2_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_917 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SRA);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(0,(DecToCtl_port_sig_imm_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_918 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: not((pc_reg = resize(0,32)));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 1;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_919 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: (pc_reg = resize(0,32));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_920 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SLL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_left(resize(0,32),(pc_reg_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_921 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SLTU);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_922 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SLL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_923 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_COPY1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = RegsToCtl_data_contents1_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_924 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_REG);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_COPY1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = RegsToCtl_data_contents1_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_925 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_COPY1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = DecToCtl_port_sig_imm_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_926 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SRL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(DecToCtl_port_sig_imm_at_t,(pc_reg_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_927 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SRL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = DecToCtl_port_sig_imm_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_928 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_COPY1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = pc_reg_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_929 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SRL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(pc_reg_at_t,(DecToCtl_port_sig_imm_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_930 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SRA);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(pc_reg_at_t,(pc_reg_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_931 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SRA);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = pc_reg_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_932 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_REG);
	 at t: (CtlToALU_data_alu_fun = ALU_COPY1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_933 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_SRL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(0,(DecToCtl_port_sig_imm_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_934 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SRA);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(0,(pc_reg_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_935 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SRA);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_936 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_COPY1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = DecToCtl_port_sig_imm_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_937 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_IMM);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_COPY1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = DecToCtl_port_sig_imm_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_938 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_COPY1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = pc_reg_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_939 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SRL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(pc_reg_at_t,(pc_reg_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_940 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SRL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = pc_reg_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_941 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_IMM);
	 at t: (CtlToALU_data_alu_fun = ALU_COPY1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_942 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_SRL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = (shift_right(0,(pc_reg_at_t and 31)));
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_943 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_SRL);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_944 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_COPY1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = pc_reg_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_945 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: (CtlToALU_data_op1_sel = OP_PC);
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_COPY1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = pc_reg_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_946 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: (CtlToALU_data_op2_sel = OP_PC);
	 at t: (CtlToALU_data_alu_fun = ALU_COPY1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_947 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: not((DecToCtl_port_sig_instrType = lui));
	 at t: not((DecToCtl_port_sig_instrType = auipc));
	 at t: not((CtlToALU_data_op1_sel = OP_REG));
	 at t: not((CtlToALU_data_op1_sel = OP_IMM));
	 at t: not((CtlToALU_data_op1_sel = OP_PC));
	 at t: not((CtlToALU_data_op2_sel = OP_REG));
	 at t: not((CtlToALU_data_op2_sel = OP_IMM));
	 at t: not((CtlToALU_data_op2_sel = OP_PC));
	 at t: (CtlToALU_data_alu_fun = ALU_COPY1);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = 0;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_948 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = U);
	 at t: (DecToCtl_port_sig_instrType = lui);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: executeALU_2;
	 at t_end: ALUtoCtl_data_ALU_result = DecToCtl_port_sig_imm_at_t;
	 at t_end: CtlToALU_data_alu_fun = ALU_COPY1;
	 at t_end: CtlToALU_data_op1_sel = OP_IMM;
	 at t_end: CtlToALU_data_op2_sel = OP_X;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_949 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	DecToCtl_port_sig_rs1_addr_at_t = DecToCtl_port_sig_rs1_addr@t,
	DecToCtl_port_sig_rs2_addr_at_t = DecToCtl_port_sig_rs2_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: not((DecToCtl_port_sig_instrType = addI));
	 at t: not((DecToCtl_port_sig_instrType = sltI));
	 at t: not((DecToCtl_port_sig_instrType = sltIu));
	 at t: not((DecToCtl_port_sig_instrType = xorI));
	 at t: not((DecToCtl_port_sig_instrType = orI));
	 at t: not((DecToCtl_port_sig_instrType = andI));
	 at t: not((DecToCtl_port_sig_instrType = sllI));
	 at t: not((DecToCtl_port_sig_instrType = srlI));
	 at t: not((DecToCtl_port_sig_instrType = sraI));
	 at t: not((DecToCtl_port_sig_instrType = lb));
	 at t: not((DecToCtl_port_sig_instrType = lh));
	 at t: not((DecToCtl_port_sig_instrType = lw));
	 at t: not((DecToCtl_port_sig_instrType = lbu));
	 at t: not((DecToCtl_port_sig_instrType = lhu));
	 at t: not((DecToCtl_port_sig_instrType = jalr));
	 at t: reg_rd_en;
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: readRegisterFile_8;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = DecToCtl_port_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_data_src2 = DecToCtl_port_sig_rs2_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_RD;
	 at t_end: CtlToRegs_port_sig_src1 = DecToCtl_port_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = DecToCtl_port_sig_rs2_addr_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_950 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	DecToCtl_port_sig_rs1_addr_at_t = DecToCtl_port_sig_rs1_addr@t,
	DecToCtl_port_sig_rs2_addr_at_t = DecToCtl_port_sig_rs2_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = J);
	 at t: not((DecToCtl_port_sig_instrType = jal));
	 at t: reg_rd_en;
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: readRegisterFile_8;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = DecToCtl_port_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_data_src2 = DecToCtl_port_sig_rs2_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_RD;
	 at t_end: CtlToRegs_port_sig_src1 = DecToCtl_port_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = DecToCtl_port_sig_rs2_addr_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_951 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	DecToCtl_port_sig_rs1_addr_at_t = DecToCtl_port_sig_rs1_addr@t,
	DecToCtl_port_sig_rs2_addr_at_t = DecToCtl_port_sig_rs2_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetch_5;
	 at t: not((DecToCtl_port_sig_encType = I));
	 at t: not((DecToCtl_port_sig_encType = R));
	 at t: not((DecToCtl_port_sig_encType = B));
	 at t: not((DecToCtl_port_sig_encType = J));
	 at t: not((DecToCtl_port_sig_encType = S));
	 at t: not((DecToCtl_port_sig_encType = U));
	 at t: reg_rd_en;
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: readRegisterFile_8;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = DecToCtl_port_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_data_src2 = DecToCtl_port_sig_rs2_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_RD;
	 at t_end: CtlToRegs_port_sig_src1 = DecToCtl_port_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = DecToCtl_port_sig_rs2_addr_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_952 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	DecToCtl_port_sig_rs1_addr_at_t = DecToCtl_port_sig_rs1_addr@t,
	DecToCtl_port_sig_rs2_addr_at_t = DecToCtl_port_sig_rs2_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: (DecToCtl_port_sig_instrType = addI);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: readRegisterFile_8;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = ALU_ADD;
	 at t_end: CtlToALU_data_op1_sel = OP_REG;
	 at t_end: CtlToALU_data_op2_sel = OP_IMM;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = DecToCtl_port_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_data_src2 = DecToCtl_port_sig_rs2_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_RD;
	 at t_end: CtlToRegs_port_sig_src1 = DecToCtl_port_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = DecToCtl_port_sig_rs2_addr_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = true;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_953 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	DecToCtl_port_sig_rs1_addr_at_t = DecToCtl_port_sig_rs1_addr@t,
	DecToCtl_port_sig_rs2_addr_at_t = DecToCtl_port_sig_rs2_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = R);
	 at t: (DecToCtl_port_sig_instrType = add);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: readRegisterFile_8;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = ALU_ADD;
	 at t_end: CtlToALU_data_op1_sel = OP_REG;
	 at t_end: CtlToALU_data_op2_sel = OP_REG;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = DecToCtl_port_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_data_src2 = DecToCtl_port_sig_rs2_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_RD;
	 at t_end: CtlToRegs_port_sig_src1 = DecToCtl_port_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = DecToCtl_port_sig_rs2_addr_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = true;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_954 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	DecToCtl_port_sig_rs1_addr_at_t = DecToCtl_port_sig_rs1_addr@t,
	DecToCtl_port_sig_rs2_addr_at_t = DecToCtl_port_sig_rs2_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: (DecToCtl_port_sig_instrType = sltI);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: readRegisterFile_8;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = ALU_SLT;
	 at t_end: CtlToALU_data_op1_sel = OP_REG;
	 at t_end: CtlToALU_data_op2_sel = OP_IMM;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = DecToCtl_port_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_data_src2 = DecToCtl_port_sig_rs2_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_RD;
	 at t_end: CtlToRegs_port_sig_src1 = DecToCtl_port_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = DecToCtl_port_sig_rs2_addr_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = true;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_955 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	DecToCtl_port_sig_rs1_addr_at_t = DecToCtl_port_sig_rs1_addr@t,
	DecToCtl_port_sig_rs2_addr_at_t = DecToCtl_port_sig_rs2_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: (DecToCtl_port_sig_instrType = jalr);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: readRegisterFile_8;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = ALU_X;
	 at t_end: CtlToALU_data_op1_sel = OP_X;
	 at t_end: CtlToALU_data_op2_sel = OP_X;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = DecToCtl_port_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_data_src2 = DecToCtl_port_sig_rs2_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_RD;
	 at t_end: CtlToRegs_port_sig_src1 = DecToCtl_port_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = DecToCtl_port_sig_rs2_addr_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = true;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_PC4;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_956 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	DecToCtl_port_sig_rs1_addr_at_t = DecToCtl_port_sig_rs1_addr@t,
	DecToCtl_port_sig_rs2_addr_at_t = DecToCtl_port_sig_rs2_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = R);
	 at t: (DecToCtl_port_sig_instrType = sub);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: readRegisterFile_8;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = ALU_SUB;
	 at t_end: CtlToALU_data_op1_sel = OP_REG;
	 at t_end: CtlToALU_data_op2_sel = OP_REG;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = DecToCtl_port_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_data_src2 = DecToCtl_port_sig_rs2_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_RD;
	 at t_end: CtlToRegs_port_sig_src1 = DecToCtl_port_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = DecToCtl_port_sig_rs2_addr_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = true;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_957 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	DecToCtl_port_sig_rs1_addr_at_t = DecToCtl_port_sig_rs1_addr@t,
	DecToCtl_port_sig_rs2_addr_at_t = DecToCtl_port_sig_rs2_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = B);
	 at t: (DecToCtl_port_sig_instrType = beq);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: readRegisterFile_8;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = ALU_SUB;
	 at t_end: CtlToALU_data_op1_sel = OP_REG;
	 at t_end: CtlToALU_data_op2_sel = OP_REG;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = DecToCtl_port_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_data_src2 = DecToCtl_port_sig_rs2_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_RD;
	 at t_end: CtlToRegs_port_sig_src1 = DecToCtl_port_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = DecToCtl_port_sig_rs2_addr_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = true;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = true;
	 at t_end: wb_en = false;
	 at t_end: wb_sel = WB_X;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_958 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	DecToCtl_port_sig_rs1_addr_at_t = DecToCtl_port_sig_rs1_addr@t,
	DecToCtl_port_sig_rs2_addr_at_t = DecToCtl_port_sig_rs2_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: (DecToCtl_port_sig_instrType = sltIu);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: readRegisterFile_8;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = ALU_SLTU;
	 at t_end: CtlToALU_data_op1_sel = OP_REG;
	 at t_end: CtlToALU_data_op2_sel = OP_IMM;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = DecToCtl_port_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_data_src2 = DecToCtl_port_sig_rs2_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_RD;
	 at t_end: CtlToRegs_port_sig_src1 = DecToCtl_port_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = DecToCtl_port_sig_rs2_addr_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = true;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_959 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	DecToCtl_port_sig_rs1_addr_at_t = DecToCtl_port_sig_rs1_addr@t,
	DecToCtl_port_sig_rs2_addr_at_t = DecToCtl_port_sig_rs2_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = R);
	 at t: (DecToCtl_port_sig_instrType = sll_Instr);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: readRegisterFile_8;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = ALU_SLL;
	 at t_end: CtlToALU_data_op1_sel = OP_REG;
	 at t_end: CtlToALU_data_op2_sel = OP_REG;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = DecToCtl_port_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_data_src2 = DecToCtl_port_sig_rs2_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_RD;
	 at t_end: CtlToRegs_port_sig_src1 = DecToCtl_port_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = DecToCtl_port_sig_rs2_addr_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = true;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_960 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	DecToCtl_port_sig_rs1_addr_at_t = DecToCtl_port_sig_rs1_addr@t,
	DecToCtl_port_sig_rs2_addr_at_t = DecToCtl_port_sig_rs2_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = B);
	 at t: (DecToCtl_port_sig_instrType = bne);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: readRegisterFile_8;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = ALU_SUB;
	 at t_end: CtlToALU_data_op1_sel = OP_REG;
	 at t_end: CtlToALU_data_op2_sel = OP_REG;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = DecToCtl_port_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_data_src2 = DecToCtl_port_sig_rs2_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_RD;
	 at t_end: CtlToRegs_port_sig_src1 = DecToCtl_port_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = DecToCtl_port_sig_rs2_addr_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = true;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = true;
	 at t_end: wb_en = false;
	 at t_end: wb_sel = WB_X;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_961 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	DecToCtl_port_sig_rs1_addr_at_t = DecToCtl_port_sig_rs1_addr@t,
	DecToCtl_port_sig_rs2_addr_at_t = DecToCtl_port_sig_rs2_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: (DecToCtl_port_sig_instrType = xorI);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: readRegisterFile_8;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = ALU_XOR;
	 at t_end: CtlToALU_data_op1_sel = OP_REG;
	 at t_end: CtlToALU_data_op2_sel = OP_IMM;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = DecToCtl_port_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_data_src2 = DecToCtl_port_sig_rs2_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_RD;
	 at t_end: CtlToRegs_port_sig_src1 = DecToCtl_port_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = DecToCtl_port_sig_rs2_addr_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = true;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_962 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	DecToCtl_port_sig_rs1_addr_at_t = DecToCtl_port_sig_rs1_addr@t,
	DecToCtl_port_sig_rs2_addr_at_t = DecToCtl_port_sig_rs2_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: (DecToCtl_port_sig_instrType = lb);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: readRegisterFile_8;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = ALU_ADD;
	 at t_end: CtlToALU_data_op1_sel = OP_REG;
	 at t_end: CtlToALU_data_op2_sel = OP_IMM;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = DecToCtl_port_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_data_src2 = DecToCtl_port_sig_rs2_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_RD;
	 at t_end: CtlToRegs_port_sig_src1 = DecToCtl_port_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = DecToCtl_port_sig_rs2_addr_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = true;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = MT_B;
	 at t_end: memoryAccess_req = ME_RD;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = true;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_MEM;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_963 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	DecToCtl_port_sig_rs1_addr_at_t = DecToCtl_port_sig_rs1_addr@t,
	DecToCtl_port_sig_rs2_addr_at_t = DecToCtl_port_sig_rs2_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = R);
	 at t: (DecToCtl_port_sig_instrType = slt);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: readRegisterFile_8;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = ALU_SLT;
	 at t_end: CtlToALU_data_op1_sel = OP_REG;
	 at t_end: CtlToALU_data_op2_sel = OP_REG;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = DecToCtl_port_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_data_src2 = DecToCtl_port_sig_rs2_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_RD;
	 at t_end: CtlToRegs_port_sig_src1 = DecToCtl_port_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = DecToCtl_port_sig_rs2_addr_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = true;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_964 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	DecToCtl_port_sig_rs1_addr_at_t = DecToCtl_port_sig_rs1_addr@t,
	DecToCtl_port_sig_rs2_addr_at_t = DecToCtl_port_sig_rs2_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = B);
	 at t: (DecToCtl_port_sig_instrType = blt);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: readRegisterFile_8;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = ALU_SLT;
	 at t_end: CtlToALU_data_op1_sel = OP_REG;
	 at t_end: CtlToALU_data_op2_sel = OP_REG;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = DecToCtl_port_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_data_src2 = DecToCtl_port_sig_rs2_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_RD;
	 at t_end: CtlToRegs_port_sig_src1 = DecToCtl_port_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = DecToCtl_port_sig_rs2_addr_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = true;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = true;
	 at t_end: wb_en = false;
	 at t_end: wb_sel = WB_X;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_965 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	DecToCtl_port_sig_rs1_addr_at_t = DecToCtl_port_sig_rs1_addr@t,
	DecToCtl_port_sig_rs2_addr_at_t = DecToCtl_port_sig_rs2_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: (DecToCtl_port_sig_instrType = orI);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: readRegisterFile_8;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = ALU_OR;
	 at t_end: CtlToALU_data_op1_sel = OP_REG;
	 at t_end: CtlToALU_data_op2_sel = OP_IMM;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = DecToCtl_port_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_data_src2 = DecToCtl_port_sig_rs2_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_RD;
	 at t_end: CtlToRegs_port_sig_src1 = DecToCtl_port_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = DecToCtl_port_sig_rs2_addr_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = true;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_966 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	DecToCtl_port_sig_rs1_addr_at_t = DecToCtl_port_sig_rs1_addr@t,
	DecToCtl_port_sig_rs2_addr_at_t = DecToCtl_port_sig_rs2_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: (DecToCtl_port_sig_instrType = lh);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: readRegisterFile_8;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = ALU_ADD;
	 at t_end: CtlToALU_data_op1_sel = OP_REG;
	 at t_end: CtlToALU_data_op2_sel = OP_IMM;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = DecToCtl_port_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_data_src2 = DecToCtl_port_sig_rs2_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_RD;
	 at t_end: CtlToRegs_port_sig_src1 = DecToCtl_port_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = DecToCtl_port_sig_rs2_addr_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = true;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = MT_H;
	 at t_end: memoryAccess_req = ME_RD;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = true;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_MEM;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_967 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	DecToCtl_port_sig_rs1_addr_at_t = DecToCtl_port_sig_rs1_addr@t,
	DecToCtl_port_sig_rs2_addr_at_t = DecToCtl_port_sig_rs2_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = R);
	 at t: (DecToCtl_port_sig_instrType = sltu);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: readRegisterFile_8;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = ALU_SLTU;
	 at t_end: CtlToALU_data_op1_sel = OP_REG;
	 at t_end: CtlToALU_data_op2_sel = OP_REG;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = DecToCtl_port_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_data_src2 = DecToCtl_port_sig_rs2_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_RD;
	 at t_end: CtlToRegs_port_sig_src1 = DecToCtl_port_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = DecToCtl_port_sig_rs2_addr_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = true;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_968 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	DecToCtl_port_sig_rs1_addr_at_t = DecToCtl_port_sig_rs1_addr@t,
	DecToCtl_port_sig_rs2_addr_at_t = DecToCtl_port_sig_rs2_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = B);
	 at t: (DecToCtl_port_sig_instrType = bge);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: readRegisterFile_8;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = ALU_SLT;
	 at t_end: CtlToALU_data_op1_sel = OP_REG;
	 at t_end: CtlToALU_data_op2_sel = OP_REG;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = DecToCtl_port_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_data_src2 = DecToCtl_port_sig_rs2_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_RD;
	 at t_end: CtlToRegs_port_sig_src1 = DecToCtl_port_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = DecToCtl_port_sig_rs2_addr_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = true;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = true;
	 at t_end: wb_en = false;
	 at t_end: wb_sel = WB_X;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_969 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	DecToCtl_port_sig_rs1_addr_at_t = DecToCtl_port_sig_rs1_addr@t,
	DecToCtl_port_sig_rs2_addr_at_t = DecToCtl_port_sig_rs2_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: (DecToCtl_port_sig_instrType = andI);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: readRegisterFile_8;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = ALU_AND;
	 at t_end: CtlToALU_data_op1_sel = OP_REG;
	 at t_end: CtlToALU_data_op2_sel = OP_IMM;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = DecToCtl_port_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_data_src2 = DecToCtl_port_sig_rs2_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_RD;
	 at t_end: CtlToRegs_port_sig_src1 = DecToCtl_port_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = DecToCtl_port_sig_rs2_addr_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = true;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_970 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	DecToCtl_port_sig_rs1_addr_at_t = DecToCtl_port_sig_rs1_addr@t,
	DecToCtl_port_sig_rs2_addr_at_t = DecToCtl_port_sig_rs2_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: (DecToCtl_port_sig_instrType = lw);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: readRegisterFile_8;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = ALU_ADD;
	 at t_end: CtlToALU_data_op1_sel = OP_REG;
	 at t_end: CtlToALU_data_op2_sel = OP_IMM;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = DecToCtl_port_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_data_src2 = DecToCtl_port_sig_rs2_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_RD;
	 at t_end: CtlToRegs_port_sig_src1 = DecToCtl_port_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = DecToCtl_port_sig_rs2_addr_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = true;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = ME_RD;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = true;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_MEM;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_971 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	DecToCtl_port_sig_rs1_addr_at_t = DecToCtl_port_sig_rs1_addr@t,
	DecToCtl_port_sig_rs2_addr_at_t = DecToCtl_port_sig_rs2_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = R);
	 at t: (DecToCtl_port_sig_instrType = Xor_Instr);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: readRegisterFile_8;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = ALU_XOR;
	 at t_end: CtlToALU_data_op1_sel = OP_REG;
	 at t_end: CtlToALU_data_op2_sel = OP_REG;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = DecToCtl_port_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_data_src2 = DecToCtl_port_sig_rs2_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_RD;
	 at t_end: CtlToRegs_port_sig_src1 = DecToCtl_port_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = DecToCtl_port_sig_rs2_addr_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = true;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_972 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	DecToCtl_port_sig_rs1_addr_at_t = DecToCtl_port_sig_rs1_addr@t,
	DecToCtl_port_sig_rs2_addr_at_t = DecToCtl_port_sig_rs2_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = B);
	 at t: (DecToCtl_port_sig_instrType = bltu);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: readRegisterFile_8;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = ALU_SLTU;
	 at t_end: CtlToALU_data_op1_sel = OP_REG;
	 at t_end: CtlToALU_data_op2_sel = OP_REG;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = DecToCtl_port_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_data_src2 = DecToCtl_port_sig_rs2_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_RD;
	 at t_end: CtlToRegs_port_sig_src1 = DecToCtl_port_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = DecToCtl_port_sig_rs2_addr_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = true;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = true;
	 at t_end: wb_en = false;
	 at t_end: wb_sel = WB_X;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_973 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	DecToCtl_port_sig_rs1_addr_at_t = DecToCtl_port_sig_rs1_addr@t,
	DecToCtl_port_sig_rs2_addr_at_t = DecToCtl_port_sig_rs2_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = B);
	 at t: not((DecToCtl_port_sig_instrType = beq));
	 at t: not((DecToCtl_port_sig_instrType = bne));
	 at t: not((DecToCtl_port_sig_instrType = blt));
	 at t: not((DecToCtl_port_sig_instrType = bge));
	 at t: not((DecToCtl_port_sig_instrType = bltu));
	 at t: not((DecToCtl_port_sig_instrType = bgeu));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: readRegisterFile_8;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = OP_REG;
	 at t_end: CtlToALU_data_op2_sel = OP_REG;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = DecToCtl_port_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_data_src2 = DecToCtl_port_sig_rs2_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_RD;
	 at t_end: CtlToRegs_port_sig_src1 = DecToCtl_port_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = DecToCtl_port_sig_rs2_addr_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = true;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = true;
	 at t_end: wb_en = false;
	 at t_end: wb_sel = WB_X;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_974 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	DecToCtl_port_sig_rs1_addr_at_t = DecToCtl_port_sig_rs1_addr@t,
	DecToCtl_port_sig_rs2_addr_at_t = DecToCtl_port_sig_rs2_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = S);
	 at t: (DecToCtl_port_sig_instrType = sb);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: readRegisterFile_8;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = ALU_ADD;
	 at t_end: CtlToALU_data_op1_sel = OP_REG;
	 at t_end: CtlToALU_data_op2_sel = OP_IMM;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = DecToCtl_port_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_data_src2 = DecToCtl_port_sig_rs2_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_RD;
	 at t_end: CtlToRegs_port_sig_src1 = DecToCtl_port_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = DecToCtl_port_sig_rs2_addr_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = true;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = MT_B;
	 at t_end: memoryAccess_req = ME_WR;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = true;
	 at t_end: wb_en = false;
	 at t_end: wb_sel = WB_X;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_975 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	DecToCtl_port_sig_rs1_addr_at_t = DecToCtl_port_sig_rs1_addr@t,
	DecToCtl_port_sig_rs2_addr_at_t = DecToCtl_port_sig_rs2_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: (DecToCtl_port_sig_instrType = sllI);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: readRegisterFile_8;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = ALU_SLL;
	 at t_end: CtlToALU_data_op1_sel = OP_REG;
	 at t_end: CtlToALU_data_op2_sel = OP_IMM;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = DecToCtl_port_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_data_src2 = DecToCtl_port_sig_rs2_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_RD;
	 at t_end: CtlToRegs_port_sig_src1 = DecToCtl_port_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = DecToCtl_port_sig_rs2_addr_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = true;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_976 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	DecToCtl_port_sig_rs1_addr_at_t = DecToCtl_port_sig_rs1_addr@t,
	DecToCtl_port_sig_rs2_addr_at_t = DecToCtl_port_sig_rs2_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: (DecToCtl_port_sig_instrType = lbu);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: readRegisterFile_8;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = ALU_ADD;
	 at t_end: CtlToALU_data_op1_sel = OP_REG;
	 at t_end: CtlToALU_data_op2_sel = OP_IMM;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = DecToCtl_port_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_data_src2 = DecToCtl_port_sig_rs2_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_RD;
	 at t_end: CtlToRegs_port_sig_src1 = DecToCtl_port_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = DecToCtl_port_sig_rs2_addr_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = true;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = MT_BU;
	 at t_end: memoryAccess_req = ME_RD;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = true;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_MEM;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_977 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	DecToCtl_port_sig_rs1_addr_at_t = DecToCtl_port_sig_rs1_addr@t,
	DecToCtl_port_sig_rs2_addr_at_t = DecToCtl_port_sig_rs2_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = R);
	 at t: (DecToCtl_port_sig_instrType = srl_Instr);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: readRegisterFile_8;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = ALU_SRL;
	 at t_end: CtlToALU_data_op1_sel = OP_REG;
	 at t_end: CtlToALU_data_op2_sel = OP_REG;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = DecToCtl_port_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_data_src2 = DecToCtl_port_sig_rs2_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_RD;
	 at t_end: CtlToRegs_port_sig_src1 = DecToCtl_port_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = DecToCtl_port_sig_rs2_addr_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = true;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_978 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	DecToCtl_port_sig_rs1_addr_at_t = DecToCtl_port_sig_rs1_addr@t,
	DecToCtl_port_sig_rs2_addr_at_t = DecToCtl_port_sig_rs2_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = B);
	 at t: (DecToCtl_port_sig_instrType = bgeu);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: readRegisterFile_8;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = ALU_SLTU;
	 at t_end: CtlToALU_data_op1_sel = OP_REG;
	 at t_end: CtlToALU_data_op2_sel = OP_REG;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = DecToCtl_port_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_data_src2 = DecToCtl_port_sig_rs2_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_RD;
	 at t_end: CtlToRegs_port_sig_src1 = DecToCtl_port_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = DecToCtl_port_sig_rs2_addr_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = true;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = true;
	 at t_end: wb_en = false;
	 at t_end: wb_sel = WB_X;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_979 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	DecToCtl_port_sig_rs1_addr_at_t = DecToCtl_port_sig_rs1_addr@t,
	DecToCtl_port_sig_rs2_addr_at_t = DecToCtl_port_sig_rs2_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = S);
	 at t: (DecToCtl_port_sig_instrType = sh);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: readRegisterFile_8;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = ALU_ADD;
	 at t_end: CtlToALU_data_op1_sel = OP_REG;
	 at t_end: CtlToALU_data_op2_sel = OP_IMM;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = DecToCtl_port_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_data_src2 = DecToCtl_port_sig_rs2_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_RD;
	 at t_end: CtlToRegs_port_sig_src1 = DecToCtl_port_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = DecToCtl_port_sig_rs2_addr_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = true;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = MT_H;
	 at t_end: memoryAccess_req = ME_WR;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = true;
	 at t_end: wb_en = false;
	 at t_end: wb_sel = WB_X;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_980 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	DecToCtl_port_sig_rs1_addr_at_t = DecToCtl_port_sig_rs1_addr@t,
	DecToCtl_port_sig_rs2_addr_at_t = DecToCtl_port_sig_rs2_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = S);
	 at t: not((DecToCtl_port_sig_instrType = sb));
	 at t: not((DecToCtl_port_sig_instrType = sh));
	 at t: not((DecToCtl_port_sig_instrType = sw));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: readRegisterFile_8;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = ALU_ADD;
	 at t_end: CtlToALU_data_op1_sel = OP_REG;
	 at t_end: CtlToALU_data_op2_sel = OP_IMM;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = DecToCtl_port_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_data_src2 = DecToCtl_port_sig_rs2_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_RD;
	 at t_end: CtlToRegs_port_sig_src1 = DecToCtl_port_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = DecToCtl_port_sig_rs2_addr_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = true;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = ME_WR;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = true;
	 at t_end: wb_en = false;
	 at t_end: wb_sel = WB_X;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_981 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	DecToCtl_port_sig_rs1_addr_at_t = DecToCtl_port_sig_rs1_addr@t,
	DecToCtl_port_sig_rs2_addr_at_t = DecToCtl_port_sig_rs2_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: (DecToCtl_port_sig_instrType = srlI);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: readRegisterFile_8;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = ALU_SRL;
	 at t_end: CtlToALU_data_op1_sel = OP_REG;
	 at t_end: CtlToALU_data_op2_sel = OP_IMM;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = DecToCtl_port_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_data_src2 = DecToCtl_port_sig_rs2_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_RD;
	 at t_end: CtlToRegs_port_sig_src1 = DecToCtl_port_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = DecToCtl_port_sig_rs2_addr_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = true;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_982 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	DecToCtl_port_sig_rs1_addr_at_t = DecToCtl_port_sig_rs1_addr@t,
	DecToCtl_port_sig_rs2_addr_at_t = DecToCtl_port_sig_rs2_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: (DecToCtl_port_sig_instrType = lhu);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: readRegisterFile_8;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = ALU_ADD;
	 at t_end: CtlToALU_data_op1_sel = OP_REG;
	 at t_end: CtlToALU_data_op2_sel = OP_IMM;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = DecToCtl_port_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_data_src2 = DecToCtl_port_sig_rs2_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_RD;
	 at t_end: CtlToRegs_port_sig_src1 = DecToCtl_port_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = DecToCtl_port_sig_rs2_addr_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = true;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = MT_HU;
	 at t_end: memoryAccess_req = ME_RD;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = true;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_MEM;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_983 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	DecToCtl_port_sig_rs1_addr_at_t = DecToCtl_port_sig_rs1_addr@t,
	DecToCtl_port_sig_rs2_addr_at_t = DecToCtl_port_sig_rs2_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = R);
	 at t: (DecToCtl_port_sig_instrType = sra_Instr);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: readRegisterFile_8;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = ALU_SRA;
	 at t_end: CtlToALU_data_op1_sel = OP_REG;
	 at t_end: CtlToALU_data_op2_sel = OP_REG;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = DecToCtl_port_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_data_src2 = DecToCtl_port_sig_rs2_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_RD;
	 at t_end: CtlToRegs_port_sig_src1 = DecToCtl_port_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = DecToCtl_port_sig_rs2_addr_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = true;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_984 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	DecToCtl_port_sig_rs1_addr_at_t = DecToCtl_port_sig_rs1_addr@t,
	DecToCtl_port_sig_rs2_addr_at_t = DecToCtl_port_sig_rs2_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = S);
	 at t: (DecToCtl_port_sig_instrType = sw);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: readRegisterFile_8;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = ALU_ADD;
	 at t_end: CtlToALU_data_op1_sel = OP_REG;
	 at t_end: CtlToALU_data_op2_sel = OP_IMM;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = DecToCtl_port_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_data_src2 = DecToCtl_port_sig_rs2_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_RD;
	 at t_end: CtlToRegs_port_sig_src1 = DecToCtl_port_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = DecToCtl_port_sig_rs2_addr_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = true;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = ME_WR;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = true;
	 at t_end: wb_en = false;
	 at t_end: wb_sel = WB_X;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_985 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	DecToCtl_port_sig_rs1_addr_at_t = DecToCtl_port_sig_rs1_addr@t,
	DecToCtl_port_sig_rs2_addr_at_t = DecToCtl_port_sig_rs2_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = I);
	 at t: (DecToCtl_port_sig_instrType = sraI);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: readRegisterFile_8;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = ALU_SRA;
	 at t_end: CtlToALU_data_op1_sel = OP_REG;
	 at t_end: CtlToALU_data_op2_sel = OP_IMM;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = DecToCtl_port_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_data_src2 = DecToCtl_port_sig_rs2_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_RD;
	 at t_end: CtlToRegs_port_sig_src1 = DecToCtl_port_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = DecToCtl_port_sig_rs2_addr_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = true;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_986 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	DecToCtl_port_sig_rs1_addr_at_t = DecToCtl_port_sig_rs1_addr@t,
	DecToCtl_port_sig_rs2_addr_at_t = DecToCtl_port_sig_rs2_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = R);
	 at t: (DecToCtl_port_sig_instrType = Or_Instr);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: readRegisterFile_8;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = ALU_OR;
	 at t_end: CtlToALU_data_op1_sel = OP_REG;
	 at t_end: CtlToALU_data_op2_sel = OP_REG;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = DecToCtl_port_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_data_src2 = DecToCtl_port_sig_rs2_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_RD;
	 at t_end: CtlToRegs_port_sig_src1 = DecToCtl_port_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = DecToCtl_port_sig_rs2_addr_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = true;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_987 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	DecToCtl_port_sig_rs1_addr_at_t = DecToCtl_port_sig_rs1_addr@t,
	DecToCtl_port_sig_rs2_addr_at_t = DecToCtl_port_sig_rs2_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = R);
	 at t: not((DecToCtl_port_sig_instrType = add));
	 at t: not((DecToCtl_port_sig_instrType = sub));
	 at t: not((DecToCtl_port_sig_instrType = sll_Instr));
	 at t: not((DecToCtl_port_sig_instrType = slt));
	 at t: not((DecToCtl_port_sig_instrType = sltu));
	 at t: not((DecToCtl_port_sig_instrType = Xor_Instr));
	 at t: not((DecToCtl_port_sig_instrType = srl_Instr));
	 at t: not((DecToCtl_port_sig_instrType = sra_Instr));
	 at t: not((DecToCtl_port_sig_instrType = Or_Instr));
	 at t: not((DecToCtl_port_sig_instrType = And_Instr));
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: readRegisterFile_8;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = OP_REG;
	 at t_end: CtlToALU_data_op2_sel = OP_REG;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = DecToCtl_port_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_data_src2 = DecToCtl_port_sig_rs2_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_RD;
	 at t_end: CtlToRegs_port_sig_src1 = DecToCtl_port_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = DecToCtl_port_sig_rs2_addr_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = true;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property fetch_5_read_988 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	DecToCtl_port_sig_imm_at_t = DecToCtl_port_sig_imm@t,
	DecToCtl_port_sig_instrType_at_t = DecToCtl_port_sig_instrType@t,
	DecToCtl_port_sig_rd_addr_at_t = DecToCtl_port_sig_rd_addr@t,
	DecToCtl_port_sig_rs1_addr_at_t = DecToCtl_port_sig_rs1_addr@t,
	DecToCtl_port_sig_rs2_addr_at_t = DecToCtl_port_sig_rs2_addr@t,
	MemToCtl_port_sig_loadedData_at_t = MemToCtl_port_sig_loadedData@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetch_5;
	 at t: (DecToCtl_port_sig_encType = R);
	 at t: (DecToCtl_port_sig_instrType = And_Instr);
	 at t: MemToCtl_port_sync;
prove:
	 at t_end: readRegisterFile_8;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = ALU_AND;
	 at t_end: CtlToALU_data_op1_sel = OP_REG;
	 at t_end: CtlToALU_data_op2_sel = OP_REG;
	 at t_end: CtlToDec_port_sig = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = DecToCtl_port_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_data_src2 = DecToCtl_port_sig_rs2_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_RD;
	 at t_end: CtlToRegs_port_sig_src1 = DecToCtl_port_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = DecToCtl_port_sig_rs2_addr_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = DecToCtl_port_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = DecToCtl_port_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = DecToCtl_port_sig_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = MemToCtl_port_sig_loadedData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = true;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end-1]: CtlToDec_port_notify = false;
	 at t_end: CtlToDec_port_notify = true;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property memoryOperation_6_write_989 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	pc_next_at_t = pc_next@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: memoryOperation_6;
	 at t: not((memoryAccess_req = ME_RD));
	 at t: (wb_sel = WB_ALU);
	 at t: not((wb_en and not((decodedInstr_rd_addr = resize(0,32)))));
	 at t: CtlToMem_port_sync;
prove:
	 at t_end: fetch_4;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToMem_port_sig_addrIn = pc_next_at_t;
	 at t_end: CtlToMem_port_sig_dataIn = 0;
	 at t_end: CtlToMem_port_sig_mask = MT_W;
	 at t_end: CtlToMem_port_sig_req = ME_RD;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = pc_next_at_t;
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = ME_RD;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_next_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end-1]: CtlToMem_port_notify = false;
	 at t_end: CtlToMem_port_notify = true;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property memoryOperation_6_write_990 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	pc_next_at_t = pc_next@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: memoryOperation_6;
	 at t: not((memoryAccess_req = ME_RD));
	 at t: (wb_sel = WB_MEM);
	 at t: not((wb_en and not((decodedInstr_rd_addr = resize(0,32)))));
	 at t: CtlToMem_port_sync;
prove:
	 at t_end: fetch_4;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToMem_port_sig_addrIn = pc_next_at_t;
	 at t_end: CtlToMem_port_sig_dataIn = 0;
	 at t_end: CtlToMem_port_sig_mask = MT_W;
	 at t_end: CtlToMem_port_sig_req = ME_RD;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = pc_next_at_t;
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = ME_RD;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_next_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end-1]: CtlToMem_port_notify = false;
	 at t_end: CtlToMem_port_notify = true;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property memoryOperation_6_write_991 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	pc_next_at_t = pc_next@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: memoryOperation_6;
	 at t: not((memoryAccess_req = ME_RD));
	 at t: not((wb_sel = WB_ALU));
	 at t: not((wb_sel = WB_MEM));
	 at t: not((wb_sel = WB_PC4));
	 at t: CtlToMem_port_sync;
prove:
	 at t_end: fetch_4;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToMem_port_sig_addrIn = pc_next_at_t;
	 at t_end: CtlToMem_port_sig_dataIn = 0;
	 at t_end: CtlToMem_port_sig_mask = MT_W;
	 at t_end: CtlToMem_port_sig_req = ME_RD;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = pc_next_at_t;
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = ME_RD;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_next_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end-1]: CtlToMem_port_notify = false;
	 at t_end: CtlToMem_port_notify = true;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property memoryOperation_6_write_992 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	pc_next_at_t = pc_next@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: memoryOperation_6;
	 at t: not((memoryAccess_req = ME_RD));
	 at t: (wb_sel = WB_PC4);
	 at t: not((wb_en and not((decodedInstr_rd_addr = resize(0,32)))));
	 at t: CtlToMem_port_sync;
prove:
	 at t_end: fetch_4;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToMem_port_sig_addrIn = pc_next_at_t;
	 at t_end: CtlToMem_port_sig_dataIn = 0;
	 at t_end: CtlToMem_port_sig_mask = MT_W;
	 at t_end: CtlToMem_port_sig_req = ME_RD;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = pc_next_at_t;
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = ME_RD;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_next_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end-1]: CtlToMem_port_notify = false;
	 at t_end: CtlToMem_port_notify = true;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property memoryOperation_6_write_993 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: memoryOperation_6;
	 at t: (memoryAccess_req = ME_RD);
	 at t: CtlToMem_port_sync;
prove:
	 at t_end: memoryOperation_7;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end-1]: MemToCtl_port_notify = false;
	 at t_end: MemToCtl_port_notify = true;
end property;

property memoryOperation_6_write_994 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: memoryOperation_6;
	 at t: not((memoryAccess_req = ME_RD));
	 at t: (wb_sel = WB_ALU);
	 at t: wb_en;
	 at t: not((decodedInstr_rd_addr = resize(0,32)));
	 at t: CtlToMem_port_sync;
prove:
	 at t_end: writeBack_10;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToRegs_data_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_data_dst_data = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: CtlToRegs_port_sig_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_WR;
	 at t_end: CtlToRegs_port_sig_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property memoryOperation_6_write_995 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: memoryOperation_6;
	 at t: not((memoryAccess_req = ME_RD));
	 at t: (wb_sel = WB_MEM);
	 at t: wb_en;
	 at t: not((decodedInstr_rd_addr = resize(0,32)));
	 at t: CtlToMem_port_sync;
prove:
	 at t_end: writeBack_10;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToRegs_data_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_data_dst_data = fromMemoryData_loadedData_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: CtlToRegs_port_sig_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = fromMemoryData_loadedData_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_WR;
	 at t_end: CtlToRegs_port_sig_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;

property memoryOperation_6_write_996 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_loadedData_at_t = fromMemoryData_loadedData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: memoryOperation_6;
	 at t: not((memoryAccess_req = ME_RD));
	 at t: (wb_sel = WB_PC4);
	 at t: wb_en;
	 at t: not((decodedInstr_rd_addr = resize(0,32)));
	 at t: CtlToMem_port_sync;
prove:
	 at t_end: writeBack_10;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToRegs_data_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_data_dst_data = (4 + pc_reg_at_t)(31 downto 0);
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: CtlToRegs_port_sig_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = (4 + pc_reg_at_t)(31 downto 0);
	 at t_end: CtlToRegs_port_sig_req = REG_WR;
	 at t_end: CtlToRegs_port_sig_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData_loadedData = fromMemoryData_loadedData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: CtlToDec_port_notify = false;
	 during[t+1, t_end]: CtlToMem_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: MemToCtl_port_notify = false;
end property;