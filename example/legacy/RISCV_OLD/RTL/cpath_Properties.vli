-- SYNC AND NOTIFY SIGNALS (1-cycle macros) -- 
--macro ALUtoCtl_port_notify  :  boolean  := end macro; 
--macro ALUtoCtl_port_sync    :  boolean  := end macro; 
--macro CtlToALU_port_notify  :  boolean  := end macro; 
--macro CtlToALU_port_sync    :  boolean  := end macro; 
--macro CtlToRegs_port_notify :  boolean  := end macro; 
--macro CtlToRegs_port_sync   :  boolean  := end macro; 
--macro RegsToCtl_port_notify :  boolean  := end macro; 
--macro RegsToCtl_port_sync   :  boolean  := end macro; 
macro fromDecoder_notify    :  boolean  := DecToCtl_port_notify end macro; 
macro fromDecoder_sync      :  boolean  := DecToCtl_port_sync   end macro; 
macro fromMemory_notify     :  boolean  := MemToCtl_port_notify end macro; 
macro fromMemory_sync       :  boolean  := MemToCtl_port_sync   end macro; 
macro toMemory_notify       :  boolean  := CtlToMem_port_notify end macro; 
macro toMemory_sync         :  boolean  := CtlToMem_port_sync   end macro; 


-- DP SIGNALS -- 
macro ALUtoCtl_port_sig_ALU_result          : unsigned       := ALUtoCtl_port.ALU_result                 end macro; 
macro CtlToALU_port_sig_alu_fun             : ALU_function   := CtlToALU_port.alu_fun                    end macro; 
macro CtlToALU_port_sig_imm                 : unsigned       := CtlToALU_port.imm                        end macro; 
macro CtlToALU_port_sig_op1_sel             : ALUopType      := CtlToALU_port.op1_sel                    end macro; 
macro CtlToALU_port_sig_op2_sel             : ALUopType      := CtlToALU_port.op2_sel                    end macro; 
macro CtlToALU_port_sig_pc_reg              : unsigned       := CtlToALU_port.pc_reg                     end macro; 
macro CtlToALU_port_sig_reg1_contents       : unsigned       := CtlToALU_port.reg1_contents              end macro; 
macro CtlToALU_port_sig_reg2_contents       : unsigned       := CtlToALU_port.reg2_contents              end macro; 
macro CtlToRegs_port_sig_dst                : unsigned       := CtlToRegs_port.dst                       end macro; 
macro CtlToRegs_port_sig_dst_data           : unsigned       := CtlToRegs_port.dst_data                  end macro; 
macro CtlToRegs_port_sig_req                : AccessType_Reg := CtlToRegs_port.req                       end macro; 
macro CtlToRegs_port_sig_src1               : unsigned       := CtlToRegs_port.src1                      end macro; 
macro CtlToRegs_port_sig_src2               : unsigned       := CtlToRegs_port.src2                      end macro; 
macro RegsToCtl_port_sig_contents1          : unsigned       := RegsToCtl_port.contents1                 end macro; 
macro RegsToCtl_port_sig_contents2          : unsigned       := RegsToCtl_port.contents2                 end macro; 
macro fromDecoder_sig_encType               : EncType        := DecToCtl_port.encType                    end macro; 
macro fromDecoder_sig_imm                   : unsigned       := DecToCtl_port.imm                        end macro; 
macro fromDecoder_sig_instrType             : InstrType      := DecToCtl_port.instrType                  end macro; 
macro fromDecoder_sig_rd_addr               : unsigned       := DecToCtl_port.rd_addr                    end macro; 
macro fromDecoder_sig_rs1_addr              : unsigned       := DecToCtl_port.rs1_addr                   end macro; 
macro fromDecoder_sig_rs2_addr              : unsigned       := DecToCtl_port.rs2_addr                   end macro; 
macro fromMemory_sig                        : unsigned       := MemToCtl_port                            end macro; 
macro toMemory_sig_addrIn                   : unsigned       := CtlToMem_port.addrIn                     end macro;  
macro toMemory_sig_dataIn                   : unsigned       := CtlToMem_port.dataIn                     end macro; 
macro toMemory_sig_mask                     : MemMaskType    := CtlToMem_port.mask                       end macro; 
macro toMemory_sig_req                      : AccessType_Mem := CtlToMem_port.req                        end macro; 


--CONSTRAINTS-- 
constraint no_reset := rst = '0'; end constraint;
constraint bounded_pc := (pc_reg_signal < 2147483648)
                     and (pc_next_signal < 2147483648)
                     and (memoryAccess_signal.addrIn < 2147483648)
                     and (RegsToCtl_data_signal.contents1 < 2147483648)
                     and (decodedInstr_signal.imm < 2147483648)
                     and (CtlToRegs_data_signal.dst_data < 2147483648); 
end constraint;

-- VISIBLE REGISTERS --
macro ALUtoCtl_data_ALU_result          : unsigned       := ALUtoCtl_data_signal.ALU_result          end macro; 
macro CtlToALU_data_alu_fun             : ALU_function   := CtlToALU_data_signal.alu_fun             end macro; 
macro CtlToALU_data_imm                 : unsigned       := CtlToALU_data_signal.imm                 end macro; 
macro CtlToALU_data_op1_sel             : ALUopType      := CtlToALU_data_signal.op1_sel             end macro; 
macro CtlToALU_data_op2_sel             : ALUopType      := CtlToALU_data_signal.op2_sel             end macro; 
macro CtlToALU_data_pc_reg              : unsigned       := CtlToALU_data_signal.pc_reg              end macro; 
macro CtlToALU_data_reg1_contents       : unsigned       := CtlToALU_data_signal.reg1_contents       end macro; 
macro CtlToALU_data_reg2_contents       : unsigned       := CtlToALU_data_signal.reg2_contents       end macro; 
macro CtlToRegs_data_dst                : unsigned       := CtlToRegs_data_signal.dst                end macro; 
macro CtlToRegs_data_dst_data           : unsigned       := CtlToRegs_data_signal.dst_data           end macro; 
macro CtlToRegs_data_req                : AccessType_Reg := CtlToRegs_data_signal.req                end macro; 
macro CtlToRegs_data_src1               : unsigned       := CtlToRegs_data_signal.src1               end macro; 
macro CtlToRegs_data_src2               : unsigned       := CtlToRegs_data_signal.src2               end macro; 
macro RegsToCtl_data_contents1          : unsigned       := RegsToCtl_data_signal.contents1          end macro; 
macro RegsToCtl_data_contents2          : unsigned       := RegsToCtl_data_signal.contents2          end macro; 
macro br_en                             : bool           := br_en_signal                             end macro; 
macro decodedInstr_imm                  : unsigned       := decodedInstr_signal.imm                  end macro; 
macro decodedInstr_instrType            : InstrType      := decodedInstr_signal.instrType            end macro; 
macro decodedInstr_rd_addr              : unsigned       := decodedInstr_signal.rd_addr              end macro; 
macro fromMemoryData                    : unsigned       := MemToCtl_data_signal                     end macro; 
macro mem_en                            : bool           := mem_en_signal                            end macro; 
macro memoryAccess_addrIn               : unsigned       := memoryAccess_signal.addrIn               end macro;  
macro memoryAccess_dataIn               : unsigned       := memoryAccess_signal.dataIn               end macro;
macro memoryAccess_mask                 : MemMaskType    := memoryAccess_signal.mask                 end macro; 
macro memoryAccess_req                  : AccessType_Mem := memoryAccess_signal.req                  end macro; 
macro pc_next                           : unsigned       := pc_next_signal                           end macro; 
macro pc_reg                            : unsigned       := pc_reg_signal                            end macro; 
macro reg_rd_en                         : bool           := reg_rd_en_signal                         end macro; 
macro wb_en                             : bool           := wb_en_signal                             end macro; 
macro wb_sel                            : WBselType      := wb_sel_signal                            end macro; 


-- STATES -- 
macro executeALU_0       : boolean := (section = executeALU0)       end macro;
macro executeALU_1       : boolean := (section = executeALU1)       end macro;
macro fetchAndDecode_2   : boolean := (section = fetchAndDecode0)   end macro;
macro fetchAndDecode_3   : boolean := (section = fetchAndDecode1)   end macro;
macro memoryOperation_4  : boolean := (section = memoryOperation0)  end macro;
macro memoryOperation_5  : boolean := (section = memoryOperation1)  end macro;
macro readRegisterFile_6 : boolean := (section = readRegisterFile0) end macro;
macro readRegisterFile_7 : boolean := (section = readRegisterFile1) end macro;
macro writeBack_8        : boolean := (section = writeBack)         end macro;


--Operations -- 
property reset is
assume:
	 reset_sequence;
prove:
	 at t: fetchAndDecode_2;
	 at t: ALUtoCtl_data_ALU_result = 0;
	 at t: CtlToALU_data_alu_fun = ALU_ADD;
	 at t: CtlToALU_data_imm = 0;
	 at t: CtlToALU_data_op1_sel = OP_IMM;
	 at t: CtlToALU_data_op2_sel = OP_IMM;
	 at t: CtlToALU_data_pc_reg = 0;
	 at t: CtlToALU_data_reg1_contents = 0;
	 at t: CtlToALU_data_reg2_contents = 0;
	 at t: CtlToRegs_data_dst = 0;
	 at t: CtlToRegs_data_dst_data = 0;
	 at t: CtlToRegs_data_req = REG_RD;
	 at t: CtlToRegs_data_src1 = 0;
	 at t: CtlToRegs_data_src2 = 0;
	 at t: RegsToCtl_data_contents1 = 0;
	 at t: RegsToCtl_data_contents2 = 0;
	 at t: br_en = false;
	 at t: decodedInstr_imm = 0;
	 at t: decodedInstr_instrType = And_Instr;
	 at t: decodedInstr_rd_addr = 0;
	 at t: fromMemoryData = 0;
	 at t: mem_en = false;
	 at t: memoryAccess_addrIn = 0;
	 at t: memoryAccess_dataIn = 0;
	 at t: memoryAccess_mask = MT_W;
	 at t: memoryAccess_req = MEM_RD_I;
	 at t: pc_next = 0;
	 at t: pc_reg = 0;
	 at t: reg_rd_en = false;
	 at t: toMemory_sig_addrIn = 0;
	 at t: toMemory_sig_dataIn = 0;
	 at t: toMemory_sig_mask = MT_W;
	 at t: toMemory_sig_req = MEM_RD_I;
	 at t: wb_en = false;
	 at t: wb_sel = WB_ALU;
	 at t: ALUtoCtl_port_notify = false;
	 at t: CtlToALU_port_notify = false;
	 at t: CtlToRegs_port_notify = false;
	 at t: RegsToCtl_port_notify = false;
	 at t: fromDecoder_notify = false;
	 at t: fromMemory_notify = false;
	 at t: toMemory_notify = true;
end property;


property executeALU_0_write_0 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_req_at_t = CtlToRegs_data_req@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_0;
	 at t: CtlToALU_port_sync;
prove:
	 at t_end: executeALU_1;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = CtlToRegs_data_req_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end-1]: ALUtoCtl_port_notify = false;
	 at t_end: ALUtoCtl_port_notify = true;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property executeALU_1_read_1 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_req_at_t = CtlToRegs_data_req@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: not(br_en);
	 at t: not((decodedInstr_instrType = jal));
	 at t: not((decodedInstr_instrType = jalr));
	 at t: not(mem_en);
	 at t: (wb_sel = WB_ALU);
	 at t: not((wb_en and not((decodedInstr_rd_addr = 0))));
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: fetchAndDecode_2;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = CtlToRegs_data_req_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (4 + pc_reg_at_t)(31 downto 0);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = MEM_RD_I;
	 at t_end: pc_next = (4 + pc_reg_at_t)(31 downto 0);
	 at t_end: pc_reg = (4 + pc_reg_at_t)(31 downto 0);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: toMemory_sig_addrIn = (4 + pc_reg_at_t)(31 downto 0);
	 at t_end: toMemory_sig_dataIn = 0;
	 at t_end: toMemory_sig_mask = MT_W;
	 at t_end: toMemory_sig_req = MEM_RD_I;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end-1]: toMemory_notify = false;
	 at t_end: toMemory_notify = true;
end property;

property executeALU_1_read_2 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_req_at_t = CtlToRegs_data_req@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: not(br_en);
	 at t: not((decodedInstr_instrType = jal));
	 at t: not((decodedInstr_instrType = jalr));
	 at t: not(mem_en);
	 at t: (wb_sel = WB_MEM);
	 at t: not((wb_en and not((decodedInstr_rd_addr = 0))));
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: fetchAndDecode_2;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = CtlToRegs_data_req_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (4 + pc_reg_at_t);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = MEM_RD_I;
	 at t_end: pc_next = (4 + pc_reg_at_t);
	 at t_end: pc_reg = (4 + pc_reg_at_t);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: toMemory_sig_addrIn = (4 + pc_reg_at_t);
	 at t_end: toMemory_sig_dataIn = 0;
	 at t_end: toMemory_sig_mask = MT_W;
	 at t_end: toMemory_sig_req = MEM_RD_I;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end-1]: toMemory_notify = false;
	 at t_end: toMemory_notify = true;
end property;

property executeALU_1_read_3 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_req_at_t = CtlToRegs_data_req@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: not(br_en);
	 at t: not((decodedInstr_instrType = jal));
	 at t: not((decodedInstr_instrType = jalr));
	 at t: not(mem_en);
	 at t: not((wb_sel = WB_ALU));
	 at t: not((wb_sel = WB_MEM));
	 at t: not((wb_sel = WB_PC4));
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: fetchAndDecode_2;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = CtlToRegs_data_req_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (4 + pc_reg_at_t);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = MEM_RD_I;
	 at t_end: pc_next = (4 + pc_reg_at_t);
	 at t_end: pc_reg = (4 + pc_reg_at_t);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: toMemory_sig_addrIn = (4 + pc_reg_at_t);
	 at t_end: toMemory_sig_dataIn = 0;
	 at t_end: toMemory_sig_mask = MT_W;
	 at t_end: toMemory_sig_req = MEM_RD_I;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end-1]: toMemory_notify = false;
	 at t_end: toMemory_notify = true;
end property;

property executeALU_1_read_4 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_req_at_t = CtlToRegs_data_req@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: not(br_en);
	 at t: (decodedInstr_instrType = jal);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_ALU);
	 at t: not((wb_en and not((decodedInstr_rd_addr = 0))));
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: fetchAndDecode_2;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = CtlToRegs_data_req_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = MEM_RD_I;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: toMemory_sig_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: toMemory_sig_dataIn = 0;
	 at t_end: toMemory_sig_mask = MT_W;
	 at t_end: toMemory_sig_req = MEM_RD_I;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end-1]: toMemory_notify = false;
	 at t_end: toMemory_notify = true;
end property;

property executeALU_1_read_5 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_req_at_t = CtlToRegs_data_req@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: not(br_en);
	 at t: not((decodedInstr_instrType = jal));
	 at t: not((decodedInstr_instrType = jalr));
	 at t: not(mem_en);
	 at t: (wb_sel = WB_PC4);
	 at t: not((wb_en and not((decodedInstr_rd_addr = 0))));
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: fetchAndDecode_2;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = CtlToRegs_data_req_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (4 + pc_reg_at_t)(31 downto 0);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = MEM_RD_I;
	 at t_end: pc_next = (4 + pc_reg_at_t)(31 downto 0);
	 at t_end: pc_reg = (4 + pc_reg_at_t)(31 downto 0);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: toMemory_sig_addrIn = (4 + pc_reg_at_t)(31 downto 0);
	 at t_end: toMemory_sig_dataIn = 0;
	 at t_end: toMemory_sig_mask = MT_W;
	 at t_end: toMemory_sig_req = MEM_RD_I;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end-1]: toMemory_notify = false;
	 at t_end: toMemory_notify = true;
end property;

property executeALU_1_read_6 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_req_at_t = CtlToRegs_data_req@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: br_en;
	 at t: (decodedInstr_instrType = beq);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_ALU);
	 at t: not((wb_en and not((decodedInstr_rd_addr = 0))));
	 at t: (ALUtoCtl_port_sig_ALU_result = 0);
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: fetchAndDecode_2;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = CtlToRegs_data_req_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = MEM_RD_I;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: pc_reg = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: toMemory_sig_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: toMemory_sig_dataIn = 0;
	 at t_end: toMemory_sig_mask = MT_W;
	 at t_end: toMemory_sig_req = MEM_RD_I;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end-1]: toMemory_notify = false;
	 at t_end: toMemory_notify = true;
end property;

property executeALU_1_read_7 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_req_at_t = CtlToRegs_data_req@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: not(br_en);
	 at t: (decodedInstr_instrType = jal);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_MEM);
	 at t: not((wb_en and not((decodedInstr_rd_addr = 0))));
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: fetchAndDecode_2;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = CtlToRegs_data_req_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = MEM_RD_I;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: pc_reg = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: toMemory_sig_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: toMemory_sig_dataIn = 0;
	 at t_end: toMemory_sig_mask = MT_W;
	 at t_end: toMemory_sig_req = MEM_RD_I;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end-1]: toMemory_notify = false;
	 at t_end: toMemory_notify = true;
end property;

property executeALU_1_read_8 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_req_at_t = CtlToRegs_data_req@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: not(br_en);
	 at t: (decodedInstr_instrType = jal);
	 at t: not(mem_en);
	 at t: not((wb_sel = WB_ALU));
	 at t: not((wb_sel = WB_MEM));
	 at t: not((wb_sel = WB_PC4));
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: fetchAndDecode_2;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = CtlToRegs_data_req_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = MEM_RD_I;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: pc_reg = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: toMemory_sig_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: toMemory_sig_dataIn = 0;
	 at t_end: toMemory_sig_mask = MT_W;
	 at t_end: toMemory_sig_req = MEM_RD_I;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end-1]: toMemory_notify = false;
	 at t_end: toMemory_notify = true;
end property;

property executeALU_1_read_9 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_req_at_t = CtlToRegs_data_req@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: br_en;
	 at t: (decodedInstr_instrType = beq);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_MEM);
	 at t: not((wb_en and not((decodedInstr_rd_addr = 0))));
	 at t: (ALUtoCtl_port_sig_ALU_result = 0);
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: fetchAndDecode_2;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = CtlToRegs_data_req_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = MEM_RD_I;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: pc_reg = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: toMemory_sig_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: toMemory_sig_dataIn = 0;
	 at t_end: toMemory_sig_mask = MT_W;
	 at t_end: toMemory_sig_req = MEM_RD_I;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end-1]: toMemory_notify = false;
	 at t_end: toMemory_notify = true;
end property;

property executeALU_1_read_10 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_req_at_t = CtlToRegs_data_req@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: br_en;
	 at t: (decodedInstr_instrType = beq);
	 at t: not(mem_en);
	 at t: not((wb_sel = WB_ALU));
	 at t: not((wb_sel = WB_MEM));
	 at t: not((wb_sel = WB_PC4));
	 at t: (ALUtoCtl_port_sig_ALU_result = 0);
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: fetchAndDecode_2;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = CtlToRegs_data_req_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = MEM_RD_I;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: toMemory_sig_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: toMemory_sig_dataIn = 0;
	 at t_end: toMemory_sig_mask = MT_W;
	 at t_end: toMemory_sig_req = MEM_RD_I;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end-1]: toMemory_notify = false;
	 at t_end: toMemory_notify = true;
end property;

property executeALU_1_read_11 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_req_at_t = CtlToRegs_data_req@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: br_en;
	 at t: (decodedInstr_instrType = bne);
	 at t: not((ALUtoCtl_port_sig_ALU_result = 0));
	 at t: not(mem_en);
	 at t: (wb_sel = WB_ALU);
	 at t: not((wb_en and not((decodedInstr_rd_addr = 0))));
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: fetchAndDecode_2;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = CtlToRegs_data_req_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = MEM_RD_I;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: pc_reg = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: toMemory_sig_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: toMemory_sig_dataIn = 0;
	 at t_end: toMemory_sig_mask = MT_W;
	 at t_end: toMemory_sig_req = MEM_RD_I;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end-1]: toMemory_notify = false;
	 at t_end: toMemory_notify = true;
end property;

property executeALU_1_read_12 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_req_at_t = CtlToRegs_data_req@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: not(br_en);
	 at t: (decodedInstr_instrType = jal);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_PC4);
	 at t: not((wb_en and not((decodedInstr_rd_addr = 0))));
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: fetchAndDecode_2;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = CtlToRegs_data_req_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = MEM_RD_I;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: toMemory_sig_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: toMemory_sig_dataIn = 0;
	 at t_end: toMemory_sig_mask = MT_W;
	 at t_end: toMemory_sig_req = MEM_RD_I;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end-1]: toMemory_notify = false;
	 at t_end: toMemory_notify = true;
end property;

property executeALU_1_read_13 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_req_at_t = CtlToRegs_data_req@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: not(br_en);
	 at t: (decodedInstr_instrType = jalr);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_ALU);
	 at t: not((wb_en and not((decodedInstr_rd_addr = 0))));
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: fetchAndDecode_2;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = CtlToRegs_data_req_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (RegsToCtl_data_contents1_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = MEM_RD_I;
	 at t_end: pc_next = (RegsToCtl_data_contents1_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = (RegsToCtl_data_contents1_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: toMemory_sig_addrIn = (RegsToCtl_data_contents1_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: toMemory_sig_dataIn = 0;
	 at t_end: toMemory_sig_mask = MT_W;
	 at t_end: toMemory_sig_req = MEM_RD_I;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end-1]: toMemory_notify = false;
	 at t_end: toMemory_notify = true;
end property;

property executeALU_1_read_14 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_req_at_t = CtlToRegs_data_req@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: br_en;
	 at t: (decodedInstr_instrType = beq);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_PC4);
	 at t: not((wb_en and not((decodedInstr_rd_addr = 0))));
	 at t: (ALUtoCtl_port_sig_ALU_result = 0);
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: fetchAndDecode_2;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = CtlToRegs_data_req_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = MEM_RD_I;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: pc_reg = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: toMemory_sig_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: toMemory_sig_dataIn = 0;
	 at t_end: toMemory_sig_mask = MT_W;
	 at t_end: toMemory_sig_req = MEM_RD_I;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end-1]: toMemory_notify = false;
	 at t_end: toMemory_notify = true;
end property;

property executeALU_1_read_15 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_req_at_t = CtlToRegs_data_req@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: br_en;
	 at t: (decodedInstr_instrType = bne);
	 at t: not((ALUtoCtl_port_sig_ALU_result = 0));
	 at t: not(mem_en);
	 at t: (wb_sel = WB_MEM);
	 at t: not((wb_en and not((decodedInstr_rd_addr = 0))));
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: fetchAndDecode_2;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = CtlToRegs_data_req_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = MEM_RD_I;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: pc_reg = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: toMemory_sig_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: toMemory_sig_dataIn = 0;
	 at t_end: toMemory_sig_mask = MT_W;
	 at t_end: toMemory_sig_req = MEM_RD_I;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end-1]: toMemory_notify = false;
	 at t_end: toMemory_notify = true;
end property;

property executeALU_1_read_16 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_req_at_t = CtlToRegs_data_req@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: br_en;
	 at t: (decodedInstr_instrType = bne);
	 at t: not((ALUtoCtl_port_sig_ALU_result = 0));
	 at t: not(mem_en);
	 at t: not((wb_sel = WB_ALU));
	 at t: not((wb_sel = WB_MEM));
	 at t: not((wb_sel = WB_PC4));
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: fetchAndDecode_2;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = CtlToRegs_data_req_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = MEM_RD_I;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: toMemory_sig_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: toMemory_sig_dataIn = 0;
	 at t_end: toMemory_sig_mask = MT_W;
	 at t_end: toMemory_sig_req = MEM_RD_I;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end-1]: toMemory_notify = false;
	 at t_end: toMemory_notify = true;
end property;

property executeALU_1_read_17 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_req_at_t = CtlToRegs_data_req@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: br_en;
	 at t: (decodedInstr_instrType = blt);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_ALU);
	 at t: not((wb_en and not((decodedInstr_rd_addr = 0))));
	 at t: (ALUtoCtl_port_sig_ALU_result = 1);
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: fetchAndDecode_2;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = CtlToRegs_data_req_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = MEM_RD_I;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: pc_reg = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: toMemory_sig_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: toMemory_sig_dataIn = 0;
	 at t_end: toMemory_sig_mask = MT_W;
	 at t_end: toMemory_sig_req = MEM_RD_I;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end-1]: toMemory_notify = false;
	 at t_end: toMemory_notify = true;
end property;

property executeALU_1_read_18 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_req_at_t = CtlToRegs_data_req@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: not(br_en);
	 at t: (decodedInstr_instrType = jalr);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_MEM);
	 at t: not((wb_en and not((decodedInstr_rd_addr = 0))));
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: fetchAndDecode_2;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = CtlToRegs_data_req_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (RegsToCtl_data_contents1_at_t + decodedInstr_imm_at_t);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = MEM_RD_I;
	 at t_end: pc_next = (RegsToCtl_data_contents1_at_t + decodedInstr_imm_at_t);
	 at t_end: pc_reg = (RegsToCtl_data_contents1_at_t + decodedInstr_imm_at_t);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: toMemory_sig_addrIn = (RegsToCtl_data_contents1_at_t + decodedInstr_imm_at_t);
	 at t_end: toMemory_sig_dataIn = 0;
	 at t_end: toMemory_sig_mask = MT_W;
	 at t_end: toMemory_sig_req = MEM_RD_I;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end-1]: toMemory_notify = false;
	 at t_end: toMemory_notify = true;
end property;

property executeALU_1_read_19 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_req_at_t = CtlToRegs_data_req@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: not(br_en);
	 at t: (decodedInstr_instrType = jalr);
	 at t: not(mem_en);
	 at t: not((wb_sel = WB_ALU));
	 at t: not((wb_sel = WB_MEM));
	 at t: not((wb_sel = WB_PC4));
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: fetchAndDecode_2;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = CtlToRegs_data_req_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (RegsToCtl_data_contents1_at_t + decodedInstr_imm_at_t);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = MEM_RD_I;
	 at t_end: pc_next = (RegsToCtl_data_contents1_at_t + decodedInstr_imm_at_t);
	 at t_end: pc_reg = (RegsToCtl_data_contents1_at_t + decodedInstr_imm_at_t);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: toMemory_sig_addrIn = (RegsToCtl_data_contents1_at_t + decodedInstr_imm_at_t);
	 at t_end: toMemory_sig_dataIn = 0;
	 at t_end: toMemory_sig_mask = MT_W;
	 at t_end: toMemory_sig_req = MEM_RD_I;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end-1]: toMemory_notify = false;
	 at t_end: toMemory_notify = true;
end property;

property executeALU_1_read_20 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_req_at_t = CtlToRegs_data_req@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: br_en;
	 at t: (decodedInstr_instrType = bne);
	 at t: not((ALUtoCtl_port_sig_ALU_result = 0));
	 at t: not(mem_en);
	 at t: (wb_sel = WB_PC4);
	 at t: not((wb_en and not((decodedInstr_rd_addr = 0))));
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: fetchAndDecode_2;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = CtlToRegs_data_req_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = MEM_RD_I;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: pc_reg = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: toMemory_sig_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: toMemory_sig_dataIn = 0;
	 at t_end: toMemory_sig_mask = MT_W;
	 at t_end: toMemory_sig_req = MEM_RD_I;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end-1]: toMemory_notify = false;
	 at t_end: toMemory_notify = true;
end property;

property executeALU_1_read_21 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_req_at_t = CtlToRegs_data_req@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: br_en;
	 at t: (decodedInstr_instrType = blt);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_MEM);
	 at t: not((wb_en and not((decodedInstr_rd_addr = 0))));
	 at t: (ALUtoCtl_port_sig_ALU_result = 1);
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: fetchAndDecode_2;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = CtlToRegs_data_req_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = MEM_RD_I;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: pc_reg = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: toMemory_sig_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: toMemory_sig_dataIn = 0;
	 at t_end: toMemory_sig_mask = MT_W;
	 at t_end: toMemory_sig_req = MEM_RD_I;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end-1]: toMemory_notify = false;
	 at t_end: toMemory_notify = true;
end property;

property executeALU_1_read_22 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_req_at_t = CtlToRegs_data_req@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: br_en;
	 at t: (decodedInstr_instrType = blt);
	 at t: not(mem_en);
	 at t: not((wb_sel = WB_ALU));
	 at t: not((wb_sel = WB_MEM));
	 at t: not((wb_sel = WB_PC4));
	 at t: (ALUtoCtl_port_sig_ALU_result = 1);
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: fetchAndDecode_2;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = CtlToRegs_data_req_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = MEM_RD_I;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: toMemory_sig_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: toMemory_sig_dataIn = 0;
	 at t_end: toMemory_sig_mask = MT_W;
	 at t_end: toMemory_sig_req = MEM_RD_I;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end-1]: toMemory_notify = false;
	 at t_end: toMemory_notify = true;
end property;

property executeALU_1_read_23 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_req_at_t = CtlToRegs_data_req@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: br_en;
	 at t: (decodedInstr_instrType = bge);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_ALU);
	 at t: not((wb_en and not((decodedInstr_rd_addr = 0))));
	 at t: (ALUtoCtl_port_sig_ALU_result = 0);
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: fetchAndDecode_2;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = CtlToRegs_data_req_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = MEM_RD_I;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: pc_reg = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: toMemory_sig_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: toMemory_sig_dataIn = 0;
	 at t_end: toMemory_sig_mask = MT_W;
	 at t_end: toMemory_sig_req = MEM_RD_I;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end-1]: toMemory_notify = false;
	 at t_end: toMemory_notify = true;
end property;

property executeALU_1_read_24 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_req_at_t = CtlToRegs_data_req@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: br_en;
	 at t: not(((decodedInstr_instrType = beq) and (ALUtoCtl_port_sig_ALU_result = 0)));
	 at t: not(((decodedInstr_instrType = bne) and not((ALUtoCtl_port_sig_ALU_result = 0))));
	 at t: not(((decodedInstr_instrType = blt) and (ALUtoCtl_port_sig_ALU_result = 1)));
	 at t: not(((decodedInstr_instrType = bge) and (ALUtoCtl_port_sig_ALU_result = 0)));
	 at t: not(((decodedInstr_instrType = bltu) and (ALUtoCtl_port_sig_ALU_result = 1)));
	 at t: not(((decodedInstr_instrType = bgeu) and (ALUtoCtl_port_sig_ALU_result = 0)));
	 at t: not((decodedInstr_instrType = jal));
	 at t: not((decodedInstr_instrType = jalr));
	 at t: not(mem_en);
	 at t: (wb_sel = WB_ALU);
	 at t: not((wb_en and not((decodedInstr_rd_addr = 0))));
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: fetchAndDecode_2;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = CtlToRegs_data_req_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (4 + pc_reg_at_t);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = MEM_RD_I;
	 at t_end: pc_next = (4 + pc_reg_at_t);
	 at t_end: pc_reg = (4 + pc_reg_at_t);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: toMemory_sig_addrIn = (4 + pc_reg_at_t);
	 at t_end: toMemory_sig_dataIn = 0;
	 at t_end: toMemory_sig_mask = MT_W;
	 at t_end: toMemory_sig_req = MEM_RD_I;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end-1]: toMemory_notify = false;
	 at t_end: toMemory_notify = true;
end property;

property executeALU_1_read_25 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_req_at_t = CtlToRegs_data_req@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: not(br_en);
	 at t: (decodedInstr_instrType = jalr);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_PC4);
	 at t: not((wb_en and not((decodedInstr_rd_addr = 0))));
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: fetchAndDecode_2;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = CtlToRegs_data_req_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (RegsToCtl_data_contents1_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = MEM_RD_I;
	 at t_end: pc_next = (RegsToCtl_data_contents1_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = (RegsToCtl_data_contents1_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: toMemory_sig_addrIn = (RegsToCtl_data_contents1_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: toMemory_sig_dataIn = 0;
	 at t_end: toMemory_sig_mask = MT_W;
	 at t_end: toMemory_sig_req = MEM_RD_I;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end-1]: toMemory_notify = false;
	 at t_end: toMemory_notify = true;
end property;

property executeALU_1_read_26 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_req_at_t = CtlToRegs_data_req@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: br_en;
	 at t: (decodedInstr_instrType = blt);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_PC4);
	 at t: not((wb_en and not((decodedInstr_rd_addr = 0))));
	 at t: (ALUtoCtl_port_sig_ALU_result = 1);
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: fetchAndDecode_2;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = CtlToRegs_data_req_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = MEM_RD_I;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: pc_reg = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: toMemory_sig_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: toMemory_sig_dataIn = 0;
	 at t_end: toMemory_sig_mask = MT_W;
	 at t_end: toMemory_sig_req = MEM_RD_I;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end-1]: toMemory_notify = false;
	 at t_end: toMemory_notify = true;
end property;

property executeALU_1_read_27 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_req_at_t = CtlToRegs_data_req@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: br_en;
	 at t: (decodedInstr_instrType = bge);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_MEM);
	 at t: not((wb_en and not((decodedInstr_rd_addr = 0))));
	 at t: (ALUtoCtl_port_sig_ALU_result = 0);
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: fetchAndDecode_2;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = CtlToRegs_data_req_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = MEM_RD_I;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: pc_reg = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: toMemory_sig_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: toMemory_sig_dataIn = 0;
	 at t_end: toMemory_sig_mask = MT_W;
	 at t_end: toMemory_sig_req = MEM_RD_I;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end-1]: toMemory_notify = false;
	 at t_end: toMemory_notify = true;
end property;

property executeALU_1_read_28 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_req_at_t = CtlToRegs_data_req@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: br_en;
	 at t: (decodedInstr_instrType = bge);
	 at t: not(mem_en);
	 at t: not((wb_sel = WB_ALU));
	 at t: not((wb_sel = WB_MEM));
	 at t: not((wb_sel = WB_PC4));
	 at t: (ALUtoCtl_port_sig_ALU_result = 0);
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: fetchAndDecode_2;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = CtlToRegs_data_req_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = MEM_RD_I;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: toMemory_sig_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: toMemory_sig_dataIn = 0;
	 at t_end: toMemory_sig_mask = MT_W;
	 at t_end: toMemory_sig_req = MEM_RD_I;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end-1]: toMemory_notify = false;
	 at t_end: toMemory_notify = true;
end property;

property executeALU_1_read_29 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_req_at_t = CtlToRegs_data_req@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: br_en;
	 at t: (decodedInstr_instrType = bltu);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_ALU);
	 at t: not((wb_en and not((decodedInstr_rd_addr = 0))));
	 at t: (ALUtoCtl_port_sig_ALU_result = 1);
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: fetchAndDecode_2;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = CtlToRegs_data_req_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = MEM_RD_I;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: pc_reg = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: toMemory_sig_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: toMemory_sig_dataIn = 0;
	 at t_end: toMemory_sig_mask = MT_W;
	 at t_end: toMemory_sig_req = MEM_RD_I;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end-1]: toMemory_notify = false;
	 at t_end: toMemory_notify = true;
end property;

property executeALU_1_read_30 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_req_at_t = CtlToRegs_data_req@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: br_en;
	 at t: not(((decodedInstr_instrType = beq) and (ALUtoCtl_port_sig_ALU_result = 0)));
	 at t: not(((decodedInstr_instrType = bne) and not((ALUtoCtl_port_sig_ALU_result = 0))));
	 at t: not(((decodedInstr_instrType = blt) and (ALUtoCtl_port_sig_ALU_result = 1)));
	 at t: not(((decodedInstr_instrType = bge) and (ALUtoCtl_port_sig_ALU_result = 0)));
	 at t: not(((decodedInstr_instrType = bltu) and (ALUtoCtl_port_sig_ALU_result = 1)));
	 at t: not(((decodedInstr_instrType = bgeu) and (ALUtoCtl_port_sig_ALU_result = 0)));
	 at t: not((decodedInstr_instrType = jal));
	 at t: not((decodedInstr_instrType = jalr));
	 at t: not(mem_en);
	 at t: (wb_sel = WB_MEM);
	 at t: not((wb_en and not((decodedInstr_rd_addr = 0))));
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: fetchAndDecode_2;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = CtlToRegs_data_req_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (4 + pc_reg_at_t);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = MEM_RD_I;
	 at t_end: pc_next = (4 + pc_reg_at_t);
	 at t_end: pc_reg = (4 + pc_reg_at_t);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: toMemory_sig_addrIn = (4 + pc_reg_at_t);
	 at t_end: toMemory_sig_dataIn = 0;
	 at t_end: toMemory_sig_mask = MT_W;
	 at t_end: toMemory_sig_req = MEM_RD_I;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end-1]: toMemory_notify = false;
	 at t_end: toMemory_notify = true;
end property;

property executeALU_1_read_31 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_req_at_t = CtlToRegs_data_req@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: br_en;
	 at t: not(((decodedInstr_instrType = beq) and (ALUtoCtl_port_sig_ALU_result = 0)));
	 at t: not(((decodedInstr_instrType = bne) and not((ALUtoCtl_port_sig_ALU_result = 0))));
	 at t: not(((decodedInstr_instrType = blt) and (ALUtoCtl_port_sig_ALU_result = 1)));
	 at t: not(((decodedInstr_instrType = bge) and (ALUtoCtl_port_sig_ALU_result = 0)));
	 at t: not(((decodedInstr_instrType = bltu) and (ALUtoCtl_port_sig_ALU_result = 1)));
	 at t: not(((decodedInstr_instrType = bgeu) and (ALUtoCtl_port_sig_ALU_result = 0)));
	 at t: not((decodedInstr_instrType = jal));
	 at t: not((decodedInstr_instrType = jalr));
	 at t: not(mem_en);
	 at t: not((wb_sel = WB_ALU));
	 at t: not((wb_sel = WB_MEM));
	 at t: not((wb_sel = WB_PC4));
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: fetchAndDecode_2;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = CtlToRegs_data_req_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (4 + pc_reg_at_t)(31 downto 0);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = MEM_RD_I;
	 at t_end: pc_next = (4 + pc_reg_at_t)(31 downto 0);
	 at t_end: pc_reg = (4 + pc_reg_at_t)(31 downto 0);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: toMemory_sig_addrIn = (4 + pc_reg_at_t)(31 downto 0);
	 at t_end: toMemory_sig_dataIn = 0;
	 at t_end: toMemory_sig_mask = MT_W;
	 at t_end: toMemory_sig_req = MEM_RD_I;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end-1]: toMemory_notify = false;
	 at t_end: toMemory_notify = true;
end property;

property executeALU_1_read_32 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_req_at_t = CtlToRegs_data_req@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: br_en;
	 at t: (decodedInstr_instrType = bge);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_PC4);
	 at t: not((wb_en and not((decodedInstr_rd_addr = 0))));
	 at t: (ALUtoCtl_port_sig_ALU_result = 0);
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: fetchAndDecode_2;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = CtlToRegs_data_req_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = MEM_RD_I;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: pc_reg = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: toMemory_sig_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: toMemory_sig_dataIn = 0;
	 at t_end: toMemory_sig_mask = MT_W;
	 at t_end: toMemory_sig_req = MEM_RD_I;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end-1]: toMemory_notify = false;
	 at t_end: toMemory_notify = true;
end property;

property executeALU_1_read_33 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_req_at_t = CtlToRegs_data_req@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: br_en;
	 at t: (decodedInstr_instrType = bltu);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_MEM);
	 at t: not((wb_en and not((decodedInstr_rd_addr = 0))));
	 at t: (ALUtoCtl_port_sig_ALU_result = 1);
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: fetchAndDecode_2;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = CtlToRegs_data_req_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = MEM_RD_I;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: pc_reg = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: toMemory_sig_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: toMemory_sig_dataIn = 0;
	 at t_end: toMemory_sig_mask = MT_W;
	 at t_end: toMemory_sig_req = MEM_RD_I;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end-1]: toMemory_notify = false;
	 at t_end: toMemory_notify = true;
end property;

property executeALU_1_read_34 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_req_at_t = CtlToRegs_data_req@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: br_en;
	 at t: (decodedInstr_instrType = bltu);
	 at t: not(mem_en);
	 at t: not((wb_sel = WB_ALU));
	 at t: not((wb_sel = WB_MEM));
	 at t: not((wb_sel = WB_PC4));
	 at t: (ALUtoCtl_port_sig_ALU_result = 1);
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: fetchAndDecode_2;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = CtlToRegs_data_req_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = MEM_RD_I;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: toMemory_sig_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: toMemory_sig_dataIn = 0;
	 at t_end: toMemory_sig_mask = MT_W;
	 at t_end: toMemory_sig_req = MEM_RD_I;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end-1]: toMemory_notify = false;
	 at t_end: toMemory_notify = true;
end property;

property executeALU_1_read_35 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_req_at_t = CtlToRegs_data_req@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: br_en;
	 at t: (decodedInstr_instrType = bgeu);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_ALU);
	 at t: not((wb_en and not((decodedInstr_rd_addr = 0))));
	 at t: (ALUtoCtl_port_sig_ALU_result = 0);
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: fetchAndDecode_2;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = CtlToRegs_data_req_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = MEM_RD_I;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: pc_reg = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: toMemory_sig_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: toMemory_sig_dataIn = 0;
	 at t_end: toMemory_sig_mask = MT_W;
	 at t_end: toMemory_sig_req = MEM_RD_I;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end-1]: toMemory_notify = false;
	 at t_end: toMemory_notify = true;
end property;

property executeALU_1_read_36 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_req_at_t = CtlToRegs_data_req@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: br_en;
	 at t: (decodedInstr_instrType = jal);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_ALU);
	 at t: not((wb_en and not((decodedInstr_rd_addr = 0))));
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: fetchAndDecode_2;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = CtlToRegs_data_req_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = MEM_RD_I;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: pc_reg = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: toMemory_sig_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: toMemory_sig_dataIn = 0;
	 at t_end: toMemory_sig_mask = MT_W;
	 at t_end: toMemory_sig_req = MEM_RD_I;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end-1]: toMemory_notify = false;
	 at t_end: toMemory_notify = true;
end property;

property executeALU_1_read_37 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_req_at_t = CtlToRegs_data_req@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: br_en;
	 at t: not(((decodedInstr_instrType = beq) and (ALUtoCtl_port_sig_ALU_result = 0)));
	 at t: not(((decodedInstr_instrType = bne) and not((ALUtoCtl_port_sig_ALU_result = 0))));
	 at t: not(((decodedInstr_instrType = blt) and (ALUtoCtl_port_sig_ALU_result = 1)));
	 at t: not(((decodedInstr_instrType = bge) and (ALUtoCtl_port_sig_ALU_result = 0)));
	 at t: not(((decodedInstr_instrType = bltu) and (ALUtoCtl_port_sig_ALU_result = 1)));
	 at t: not(((decodedInstr_instrType = bgeu) and (ALUtoCtl_port_sig_ALU_result = 0)));
	 at t: not((decodedInstr_instrType = jal));
	 at t: not((decodedInstr_instrType = jalr));
	 at t: not(mem_en);
	 at t: (wb_sel = WB_PC4);
	 at t: not((wb_en and not((decodedInstr_rd_addr = 0))));
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: fetchAndDecode_2;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = CtlToRegs_data_req_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (4 + pc_reg_at_t);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = MEM_RD_I;
	 at t_end: pc_next = (4 + pc_reg_at_t);
	 at t_end: pc_reg = (4 + pc_reg_at_t);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: toMemory_sig_addrIn = (4 + pc_reg_at_t);
	 at t_end: toMemory_sig_dataIn = 0;
	 at t_end: toMemory_sig_mask = MT_W;
	 at t_end: toMemory_sig_req = MEM_RD_I;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end-1]: toMemory_notify = false;
	 at t_end: toMemory_notify = true;
end property;

property executeALU_1_read_38 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_req_at_t = CtlToRegs_data_req@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: br_en;
	 at t: (decodedInstr_instrType = bltu);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_PC4);
	 at t: not((wb_en and not((decodedInstr_rd_addr = 0))));
	 at t: (ALUtoCtl_port_sig_ALU_result = 1);
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: fetchAndDecode_2;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = CtlToRegs_data_req_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = MEM_RD_I;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: pc_reg = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: toMemory_sig_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: toMemory_sig_dataIn = 0;
	 at t_end: toMemory_sig_mask = MT_W;
	 at t_end: toMemory_sig_req = MEM_RD_I;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end-1]: toMemory_notify = false;
	 at t_end: toMemory_notify = true;
end property;

property executeALU_1_read_39 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_req_at_t = CtlToRegs_data_req@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: br_en;
	 at t: (decodedInstr_instrType = bgeu);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_MEM);
	 at t: not((wb_en and not((decodedInstr_rd_addr = 0))));
	 at t: (ALUtoCtl_port_sig_ALU_result = 0);
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: fetchAndDecode_2;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = CtlToRegs_data_req_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = MEM_RD_I;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: pc_reg = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: toMemory_sig_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: toMemory_sig_dataIn = 0;
	 at t_end: toMemory_sig_mask = MT_W;
	 at t_end: toMemory_sig_req = MEM_RD_I;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end-1]: toMemory_notify = false;
	 at t_end: toMemory_notify = true;
end property;

property executeALU_1_read_40 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_req_at_t = CtlToRegs_data_req@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: br_en;
	 at t: (decodedInstr_instrType = bgeu);
	 at t: not(mem_en);
	 at t: not((wb_sel = WB_ALU));
	 at t: not((wb_sel = WB_MEM));
	 at t: not((wb_sel = WB_PC4));
	 at t: (ALUtoCtl_port_sig_ALU_result = 0);
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: fetchAndDecode_2;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = CtlToRegs_data_req_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = MEM_RD_I;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: toMemory_sig_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: toMemory_sig_dataIn = 0;
	 at t_end: toMemory_sig_mask = MT_W;
	 at t_end: toMemory_sig_req = MEM_RD_I;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end-1]: toMemory_notify = false;
	 at t_end: toMemory_notify = true;
end property;

property executeALU_1_read_41 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_req_at_t = CtlToRegs_data_req@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: br_en;
	 at t: (decodedInstr_instrType = jal);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_MEM);
	 at t: not((wb_en and not((decodedInstr_rd_addr = 0))));
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: fetchAndDecode_2;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = CtlToRegs_data_req_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = MEM_RD_I;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: pc_reg = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: toMemory_sig_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: toMemory_sig_dataIn = 0;
	 at t_end: toMemory_sig_mask = MT_W;
	 at t_end: toMemory_sig_req = MEM_RD_I;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end-1]: toMemory_notify = false;
	 at t_end: toMemory_notify = true;
end property;

property executeALU_1_read_42 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_req_at_t = CtlToRegs_data_req@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: br_en;
	 at t: (decodedInstr_instrType = jal);
	 at t: not(mem_en);
	 at t: not((wb_sel = WB_ALU));
	 at t: not((wb_sel = WB_MEM));
	 at t: not((wb_sel = WB_PC4));
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: fetchAndDecode_2;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = CtlToRegs_data_req_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = MEM_RD_I;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: toMemory_sig_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: toMemory_sig_dataIn = 0;
	 at t_end: toMemory_sig_mask = MT_W;
	 at t_end: toMemory_sig_req = MEM_RD_I;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end-1]: toMemory_notify = false;
	 at t_end: toMemory_notify = true;
end property;

property executeALU_1_read_43 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_req_at_t = CtlToRegs_data_req@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: br_en;
	 at t: (decodedInstr_instrType = bgeu);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_PC4);
	 at t: not((wb_en and not((decodedInstr_rd_addr = 0))));
	 at t: (ALUtoCtl_port_sig_ALU_result = 0);
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: fetchAndDecode_2;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = CtlToRegs_data_req_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = MEM_RD_I;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: pc_reg = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: toMemory_sig_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: toMemory_sig_dataIn = 0;
	 at t_end: toMemory_sig_mask = MT_W;
	 at t_end: toMemory_sig_req = MEM_RD_I;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end-1]: toMemory_notify = false;
	 at t_end: toMemory_notify = true;
end property;

property executeALU_1_read_44 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_req_at_t = CtlToRegs_data_req@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: br_en;
	 at t: (decodedInstr_instrType = jal);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_PC4);
	 at t: not((wb_en and not((decodedInstr_rd_addr = 0))));
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: fetchAndDecode_2;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = CtlToRegs_data_req_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = MEM_RD_I;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: pc_reg = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: toMemory_sig_addrIn = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: toMemory_sig_dataIn = 0;
	 at t_end: toMemory_sig_mask = MT_W;
	 at t_end: toMemory_sig_req = MEM_RD_I;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end-1]: toMemory_notify = false;
	 at t_end: toMemory_notify = true;
end property;

property executeALU_1_read_45 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_req_at_t = CtlToRegs_data_req@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: br_en;
	 at t: (decodedInstr_instrType = jalr);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_ALU);
	 at t: not((wb_en and not((decodedInstr_rd_addr = 0))));
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: fetchAndDecode_2;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = CtlToRegs_data_req_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (RegsToCtl_data_contents1_at_t + decodedInstr_imm_at_t);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = MEM_RD_I;
	 at t_end: pc_next = (RegsToCtl_data_contents1_at_t + decodedInstr_imm_at_t);
	 at t_end: pc_reg = (RegsToCtl_data_contents1_at_t + decodedInstr_imm_at_t);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: toMemory_sig_addrIn = (RegsToCtl_data_contents1_at_t + decodedInstr_imm_at_t);
	 at t_end: toMemory_sig_dataIn = 0;
	 at t_end: toMemory_sig_mask = MT_W;
	 at t_end: toMemory_sig_req = MEM_RD_I;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end-1]: toMemory_notify = false;
	 at t_end: toMemory_notify = true;
end property;

property executeALU_1_read_46 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_req_at_t = CtlToRegs_data_req@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: br_en;
	 at t: (decodedInstr_instrType = jalr);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_MEM);
	 at t: not((wb_en and not((decodedInstr_rd_addr = 0))));
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: fetchAndDecode_2;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = CtlToRegs_data_req_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (RegsToCtl_data_contents1_at_t + decodedInstr_imm_at_t);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = MEM_RD_I;
	 at t_end: pc_next = (RegsToCtl_data_contents1_at_t + decodedInstr_imm_at_t);
	 at t_end: pc_reg = (RegsToCtl_data_contents1_at_t + decodedInstr_imm_at_t);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: toMemory_sig_addrIn = (RegsToCtl_data_contents1_at_t + decodedInstr_imm_at_t);
	 at t_end: toMemory_sig_dataIn = 0;
	 at t_end: toMemory_sig_mask = MT_W;
	 at t_end: toMemory_sig_req = MEM_RD_I;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end-1]: toMemory_notify = false;
	 at t_end: toMemory_notify = true;
end property;

property executeALU_1_read_47 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_req_at_t = CtlToRegs_data_req@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: br_en;
	 at t: (decodedInstr_instrType = jalr);
	 at t: not(mem_en);
	 at t: not((wb_sel = WB_ALU));
	 at t: not((wb_sel = WB_MEM));
	 at t: not((wb_sel = WB_PC4));
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: fetchAndDecode_2;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = CtlToRegs_data_req_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (RegsToCtl_data_contents1_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = MEM_RD_I;
	 at t_end: pc_next = (RegsToCtl_data_contents1_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = (RegsToCtl_data_contents1_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: toMemory_sig_addrIn = (RegsToCtl_data_contents1_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: toMemory_sig_dataIn = 0;
	 at t_end: toMemory_sig_mask = MT_W;
	 at t_end: toMemory_sig_req = MEM_RD_I;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end-1]: toMemory_notify = false;
	 at t_end: toMemory_notify = true;
end property;

property executeALU_1_read_48 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_req_at_t = CtlToRegs_data_req@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: br_en;
	 at t: (decodedInstr_instrType = jalr);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_PC4);
	 at t: not((wb_en and not((decodedInstr_rd_addr = 0))));
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: fetchAndDecode_2;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = CtlToRegs_data_req_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = (RegsToCtl_data_contents1_at_t + decodedInstr_imm_at_t);
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = MEM_RD_I;
	 at t_end: pc_next = (RegsToCtl_data_contents1_at_t + decodedInstr_imm_at_t);
	 at t_end: pc_reg = (RegsToCtl_data_contents1_at_t + decodedInstr_imm_at_t);
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: toMemory_sig_addrIn = (RegsToCtl_data_contents1_at_t + decodedInstr_imm_at_t);
	 at t_end: toMemory_sig_dataIn = 0;
	 at t_end: toMemory_sig_mask = MT_W;
	 at t_end: toMemory_sig_req = MEM_RD_I;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end-1]: toMemory_notify = false;
	 at t_end: toMemory_notify = true;
end property;

property executeALU_1_read_49 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_req_at_t = CtlToRegs_data_req@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: not(br_en);
	 at t: not((decodedInstr_instrType = jal));
	 at t: not((decodedInstr_instrType = jalr));
	 at t: mem_en;
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: memoryOperation_4;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = CtlToRegs_data_req_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: memoryAccess_dataIn = RegsToCtl_data_contents2_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (4 + pc_reg_at_t)(31 downto 0);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: toMemory_sig_addrIn = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: toMemory_sig_dataIn = RegsToCtl_data_contents2_at_t;
	 at t_end: toMemory_sig_mask = memoryAccess_mask_at_t;
	 at t_end: toMemory_sig_req = memoryAccess_req_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end-1]: toMemory_notify = false;
	 at t_end: toMemory_notify = true;
end property;

property executeALU_1_read_50 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_req_at_t = CtlToRegs_data_req@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: not(br_en);
	 at t: (decodedInstr_instrType = jal);
	 at t: mem_en;
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: memoryOperation_4;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = CtlToRegs_data_req_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: memoryAccess_dataIn = RegsToCtl_data_contents2_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: toMemory_sig_addrIn = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: toMemory_sig_dataIn = RegsToCtl_data_contents2_at_t;
	 at t_end: toMemory_sig_mask = memoryAccess_mask_at_t;
	 at t_end: toMemory_sig_req = memoryAccess_req_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end-1]: toMemory_notify = false;
	 at t_end: toMemory_notify = true;
end property;

property executeALU_1_read_51 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_req_at_t = CtlToRegs_data_req@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: br_en;
	 at t: (decodedInstr_instrType = beq);
	 at t: mem_en;
	 at t: (ALUtoCtl_port_sig_ALU_result = 0);
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: memoryOperation_4;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = CtlToRegs_data_req_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: memoryAccess_dataIn = RegsToCtl_data_contents2_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: toMemory_sig_addrIn = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: toMemory_sig_dataIn = RegsToCtl_data_contents2_at_t;
	 at t_end: toMemory_sig_mask = memoryAccess_mask_at_t;
	 at t_end: toMemory_sig_req = memoryAccess_req_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end-1]: toMemory_notify = false;
	 at t_end: toMemory_notify = true;
end property;

property executeALU_1_read_52 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_req_at_t = CtlToRegs_data_req@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: br_en;
	 at t: (decodedInstr_instrType = bne);
	 at t: not((ALUtoCtl_port_sig_ALU_result = 0));
	 at t: mem_en;
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: memoryOperation_4;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = CtlToRegs_data_req_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: memoryAccess_dataIn = RegsToCtl_data_contents2_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: toMemory_sig_addrIn = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: toMemory_sig_dataIn = RegsToCtl_data_contents2_at_t;
	 at t_end: toMemory_sig_mask = memoryAccess_mask_at_t;
	 at t_end: toMemory_sig_req = memoryAccess_req_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end-1]: toMemory_notify = false;
	 at t_end: toMemory_notify = true;
end property;

property executeALU_1_read_53 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_req_at_t = CtlToRegs_data_req@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: not(br_en);
	 at t: (decodedInstr_instrType = jalr);
	 at t: mem_en;
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: memoryOperation_4;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = CtlToRegs_data_req_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: memoryAccess_dataIn = RegsToCtl_data_contents2_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (RegsToCtl_data_contents1_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: toMemory_sig_addrIn = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: toMemory_sig_dataIn = RegsToCtl_data_contents2_at_t;
	 at t_end: toMemory_sig_mask = memoryAccess_mask_at_t;
	 at t_end: toMemory_sig_req = memoryAccess_req_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end-1]: toMemory_notify = false;
	 at t_end: toMemory_notify = true;
end property;

property executeALU_1_read_54 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_req_at_t = CtlToRegs_data_req@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: br_en;
	 at t: (decodedInstr_instrType = blt);
	 at t: mem_en;
	 at t: (ALUtoCtl_port_sig_ALU_result = 1);
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: memoryOperation_4;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = CtlToRegs_data_req_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: memoryAccess_dataIn = RegsToCtl_data_contents2_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: toMemory_sig_addrIn = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: toMemory_sig_dataIn = RegsToCtl_data_contents2_at_t;
	 at t_end: toMemory_sig_mask = memoryAccess_mask_at_t;
	 at t_end: toMemory_sig_req = memoryAccess_req_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end-1]: toMemory_notify = false;
	 at t_end: toMemory_notify = true;
end property;

property executeALU_1_read_55 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_req_at_t = CtlToRegs_data_req@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: br_en;
	 at t: (decodedInstr_instrType = bge);
	 at t: mem_en;
	 at t: (ALUtoCtl_port_sig_ALU_result = 0);
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: memoryOperation_4;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = CtlToRegs_data_req_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: memoryAccess_dataIn = RegsToCtl_data_contents2_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: toMemory_sig_addrIn = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: toMemory_sig_dataIn = RegsToCtl_data_contents2_at_t;
	 at t_end: toMemory_sig_mask = memoryAccess_mask_at_t;
	 at t_end: toMemory_sig_req = memoryAccess_req_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end-1]: toMemory_notify = false;
	 at t_end: toMemory_notify = true;
end property;

property executeALU_1_read_56 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_req_at_t = CtlToRegs_data_req@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: br_en;
	 at t: not(((decodedInstr_instrType = beq) and (ALUtoCtl_port_sig_ALU_result = 0)));
	 at t: not(((decodedInstr_instrType = bne) and not((ALUtoCtl_port_sig_ALU_result = 0))));
	 at t: not(((decodedInstr_instrType = blt) and (ALUtoCtl_port_sig_ALU_result = 1)));
	 at t: not(((decodedInstr_instrType = bge) and (ALUtoCtl_port_sig_ALU_result = 0)));
	 at t: not(((decodedInstr_instrType = bltu) and (ALUtoCtl_port_sig_ALU_result = 1)));
	 at t: not(((decodedInstr_instrType = bgeu) and (ALUtoCtl_port_sig_ALU_result = 0)));
	 at t: not((decodedInstr_instrType = jal));
	 at t: not((decodedInstr_instrType = jalr));
	 at t: mem_en;
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: memoryOperation_4;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = CtlToRegs_data_req_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: memoryAccess_dataIn = RegsToCtl_data_contents2_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (4 + pc_reg_at_t);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: toMemory_sig_addrIn = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: toMemory_sig_dataIn = RegsToCtl_data_contents2_at_t;
	 at t_end: toMemory_sig_mask = memoryAccess_mask_at_t;
	 at t_end: toMemory_sig_req = memoryAccess_req_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end-1]: toMemory_notify = false;
	 at t_end: toMemory_notify = true;
end property;

property executeALU_1_read_57 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_req_at_t = CtlToRegs_data_req@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: br_en;
	 at t: (decodedInstr_instrType = bltu);
	 at t: mem_en;
	 at t: (ALUtoCtl_port_sig_ALU_result = 1);
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: memoryOperation_4;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = CtlToRegs_data_req_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: memoryAccess_dataIn = RegsToCtl_data_contents2_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: toMemory_sig_addrIn = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: toMemory_sig_dataIn = RegsToCtl_data_contents2_at_t;
	 at t_end: toMemory_sig_mask = memoryAccess_mask_at_t;
	 at t_end: toMemory_sig_req = memoryAccess_req_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end-1]: toMemory_notify = false;
	 at t_end: toMemory_notify = true;
end property;

property executeALU_1_read_58 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_req_at_t = CtlToRegs_data_req@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: br_en;
	 at t: (decodedInstr_instrType = bgeu);
	 at t: mem_en;
	 at t: (ALUtoCtl_port_sig_ALU_result = 0);
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: memoryOperation_4;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = CtlToRegs_data_req_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: memoryAccess_dataIn = RegsToCtl_data_contents2_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: toMemory_sig_addrIn = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: toMemory_sig_dataIn = RegsToCtl_data_contents2_at_t;
	 at t_end: toMemory_sig_mask = memoryAccess_mask_at_t;
	 at t_end: toMemory_sig_req = memoryAccess_req_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end-1]: toMemory_notify = false;
	 at t_end: toMemory_notify = true;
end property;

property executeALU_1_read_59 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_req_at_t = CtlToRegs_data_req@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: br_en;
	 at t: (decodedInstr_instrType = jal);
	 at t: mem_en;
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: memoryOperation_4;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = CtlToRegs_data_req_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: memoryAccess_dataIn = RegsToCtl_data_contents2_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: toMemory_sig_addrIn = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: toMemory_sig_dataIn = RegsToCtl_data_contents2_at_t;
	 at t_end: toMemory_sig_mask = memoryAccess_mask_at_t;
	 at t_end: toMemory_sig_req = memoryAccess_req_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end-1]: toMemory_notify = false;
	 at t_end: toMemory_notify = true;
end property;

property executeALU_1_read_60 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_req_at_t = CtlToRegs_data_req@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: br_en;
	 at t: (decodedInstr_instrType = jalr);
	 at t: mem_en;
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: memoryOperation_4;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = CtlToRegs_data_req_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: memoryAccess_dataIn = RegsToCtl_data_contents2_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (RegsToCtl_data_contents1_at_t + decodedInstr_imm_at_t);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: toMemory_sig_addrIn = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: toMemory_sig_dataIn = RegsToCtl_data_contents2_at_t;
	 at t_end: toMemory_sig_mask = memoryAccess_mask_at_t;
	 at t_end: toMemory_sig_req = memoryAccess_req_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end-1]: toMemory_notify = false;
	 at t_end: toMemory_notify = true;
end property;

property executeALU_1_read_61 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: not(br_en);
	 at t: not((decodedInstr_instrType = jal));
	 at t: not((decodedInstr_instrType = jalr));
	 at t: not(mem_en);
	 at t: (wb_sel = WB_ALU);
	 at t: wb_en;
	 at t: not((decodedInstr_rd_addr = 0));
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: writeBack_8;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_data_dst_data = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToRegs_data_req = REG_WR;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: CtlToRegs_port_sig_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_WR;
	 at t_end: CtlToRegs_port_sig_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (4 + pc_reg_at_t)(31 downto 0);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property executeALU_1_read_62 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: not(br_en);
	 at t: not((decodedInstr_instrType = jal));
	 at t: not((decodedInstr_instrType = jalr));
	 at t: not(mem_en);
	 at t: (wb_sel = WB_MEM);
	 at t: wb_en;
	 at t: not((decodedInstr_rd_addr = 0));
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: writeBack_8;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_data_dst_data = fromMemoryData_at_t;
	 at t_end: CtlToRegs_data_req = REG_WR;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: CtlToRegs_port_sig_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = fromMemoryData_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_WR;
	 at t_end: CtlToRegs_port_sig_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (4 + pc_reg_at_t);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property executeALU_1_read_63 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: not(br_en);
	 at t: (decodedInstr_instrType = jal);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_ALU);
	 at t: wb_en;
	 at t: not((decodedInstr_rd_addr = 0));
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: writeBack_8;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_data_dst_data = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToRegs_data_req = REG_WR;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: CtlToRegs_port_sig_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_WR;
	 at t_end: CtlToRegs_port_sig_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property executeALU_1_read_64 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: not(br_en);
	 at t: not((decodedInstr_instrType = jal));
	 at t: not((decodedInstr_instrType = jalr));
	 at t: not(mem_en);
	 at t: (wb_sel = WB_PC4);
	 at t: wb_en;
	 at t: not((decodedInstr_rd_addr = 0));
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: writeBack_8;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_data_dst_data = (4 + pc_reg_at_t)(31 downto 0);
	 at t_end: CtlToRegs_data_req = REG_WR;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: CtlToRegs_port_sig_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = (4 + pc_reg_at_t)(31 downto 0);
	 at t_end: CtlToRegs_port_sig_req = REG_WR;
	 at t_end: CtlToRegs_port_sig_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (4 + pc_reg_at_t)(31 downto 0);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property executeALU_1_read_65 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: br_en;
	 at t: (decodedInstr_instrType = beq);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_ALU);
	 at t: wb_en;
	 at t: not((decodedInstr_rd_addr = 0));
	 at t: (ALUtoCtl_port_sig_ALU_result = 0);
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: writeBack_8;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_data_dst_data = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToRegs_data_req = REG_WR;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: CtlToRegs_port_sig_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_WR;
	 at t_end: CtlToRegs_port_sig_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property executeALU_1_read_66 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: not(br_en);
	 at t: (decodedInstr_instrType = jal);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_MEM);
	 at t: wb_en;
	 at t: not((decodedInstr_rd_addr = 0));
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: writeBack_8;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_data_dst_data = fromMemoryData_at_t;
	 at t_end: CtlToRegs_data_req = REG_WR;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: CtlToRegs_port_sig_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = fromMemoryData_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_WR;
	 at t_end: CtlToRegs_port_sig_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property executeALU_1_read_67 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: br_en;
	 at t: (decodedInstr_instrType = beq);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_MEM);
	 at t: wb_en;
	 at t: not((decodedInstr_rd_addr = 0));
	 at t: (ALUtoCtl_port_sig_ALU_result = 0);
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: writeBack_8;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_data_dst_data = fromMemoryData_at_t;
	 at t_end: CtlToRegs_data_req = REG_WR;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: CtlToRegs_port_sig_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = fromMemoryData_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_WR;
	 at t_end: CtlToRegs_port_sig_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property executeALU_1_read_68 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: br_en;
	 at t: (decodedInstr_instrType = bne);
	 at t: not((ALUtoCtl_port_sig_ALU_result = 0));
	 at t: not(mem_en);
	 at t: (wb_sel = WB_ALU);
	 at t: wb_en;
	 at t: not((decodedInstr_rd_addr = 0));
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: writeBack_8;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_data_dst_data = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToRegs_data_req = REG_WR;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: CtlToRegs_port_sig_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_WR;
	 at t_end: CtlToRegs_port_sig_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property executeALU_1_read_69 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: not(br_en);
	 at t: (decodedInstr_instrType = jal);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_PC4);
	 at t: wb_en;
	 at t: not((decodedInstr_rd_addr = 0));
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: writeBack_8;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_data_dst_data = (4 + pc_reg_at_t)(31 downto 0);
	 at t_end: CtlToRegs_data_req = REG_WR;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: CtlToRegs_port_sig_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = (4 + pc_reg_at_t)(31 downto 0);
	 at t_end: CtlToRegs_port_sig_req = REG_WR;
	 at t_end: CtlToRegs_port_sig_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property executeALU_1_read_70 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: not(br_en);
	 at t: (decodedInstr_instrType = jalr);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_ALU);
	 at t: wb_en;
	 at t: not((decodedInstr_rd_addr = 0));
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: writeBack_8;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_data_dst_data = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToRegs_data_req = REG_WR;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: CtlToRegs_port_sig_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_WR;
	 at t_end: CtlToRegs_port_sig_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (RegsToCtl_data_contents1_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property executeALU_1_read_71 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: br_en;
	 at t: (decodedInstr_instrType = beq);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_PC4);
	 at t: wb_en;
	 at t: not((decodedInstr_rd_addr = 0));
	 at t: (ALUtoCtl_port_sig_ALU_result = 0);
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: writeBack_8;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_data_dst_data = (4 + pc_reg_at_t);
	 at t_end: CtlToRegs_data_req = REG_WR;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: CtlToRegs_port_sig_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = (4 + pc_reg_at_t);
	 at t_end: CtlToRegs_port_sig_req = REG_WR;
	 at t_end: CtlToRegs_port_sig_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property executeALU_1_read_72 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: br_en;
	 at t: (decodedInstr_instrType = bne);
	 at t: not((ALUtoCtl_port_sig_ALU_result = 0));
	 at t: not(mem_en);
	 at t: (wb_sel = WB_MEM);
	 at t: wb_en;
	 at t: not((decodedInstr_rd_addr = 0));
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: writeBack_8;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_data_dst_data = fromMemoryData_at_t;
	 at t_end: CtlToRegs_data_req = REG_WR;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: CtlToRegs_port_sig_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = fromMemoryData_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_WR;
	 at t_end: CtlToRegs_port_sig_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property executeALU_1_read_73 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: br_en;
	 at t: (decodedInstr_instrType = blt);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_ALU);
	 at t: wb_en;
	 at t: not((decodedInstr_rd_addr = 0));
	 at t: (ALUtoCtl_port_sig_ALU_result = 1);
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: writeBack_8;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_data_dst_data = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToRegs_data_req = REG_WR;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: CtlToRegs_port_sig_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_WR;
	 at t_end: CtlToRegs_port_sig_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property executeALU_1_read_74 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: not(br_en);
	 at t: (decodedInstr_instrType = jalr);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_MEM);
	 at t: wb_en;
	 at t: not((decodedInstr_rd_addr = 0));
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: writeBack_8;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_data_dst_data = fromMemoryData_at_t;
	 at t_end: CtlToRegs_data_req = REG_WR;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: CtlToRegs_port_sig_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = fromMemoryData_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_WR;
	 at t_end: CtlToRegs_port_sig_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (RegsToCtl_data_contents1_at_t + decodedInstr_imm_at_t);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property executeALU_1_read_75 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: br_en;
	 at t: (decodedInstr_instrType = bne);
	 at t: not((ALUtoCtl_port_sig_ALU_result = 0));
	 at t: not(mem_en);
	 at t: (wb_sel = WB_PC4);
	 at t: wb_en;
	 at t: not((decodedInstr_rd_addr = 0));
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: writeBack_8;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_data_dst_data = (4 + pc_reg_at_t);
	 at t_end: CtlToRegs_data_req = REG_WR;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: CtlToRegs_port_sig_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = (4 + pc_reg_at_t);
	 at t_end: CtlToRegs_port_sig_req = REG_WR;
	 at t_end: CtlToRegs_port_sig_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property executeALU_1_read_76 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: br_en;
	 at t: (decodedInstr_instrType = blt);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_MEM);
	 at t: wb_en;
	 at t: not((decodedInstr_rd_addr = 0));
	 at t: (ALUtoCtl_port_sig_ALU_result = 1);
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: writeBack_8;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_data_dst_data = fromMemoryData_at_t;
	 at t_end: CtlToRegs_data_req = REG_WR;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: CtlToRegs_port_sig_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = fromMemoryData_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_WR;
	 at t_end: CtlToRegs_port_sig_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property executeALU_1_read_77 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: br_en;
	 at t: (decodedInstr_instrType = bge);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_ALU);
	 at t: wb_en;
	 at t: not((decodedInstr_rd_addr = 0));
	 at t: (ALUtoCtl_port_sig_ALU_result = 0);
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: writeBack_8;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_data_dst_data = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToRegs_data_req = REG_WR;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: CtlToRegs_port_sig_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_WR;
	 at t_end: CtlToRegs_port_sig_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property executeALU_1_read_78 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: br_en;
	 at t: not(((decodedInstr_instrType = beq) and (ALUtoCtl_port_sig_ALU_result = 0)));
	 at t: not(((decodedInstr_instrType = bne) and not((ALUtoCtl_port_sig_ALU_result = 0))));
	 at t: not(((decodedInstr_instrType = blt) and (ALUtoCtl_port_sig_ALU_result = 1)));
	 at t: not(((decodedInstr_instrType = bge) and (ALUtoCtl_port_sig_ALU_result = 0)));
	 at t: not(((decodedInstr_instrType = bltu) and (ALUtoCtl_port_sig_ALU_result = 1)));
	 at t: not(((decodedInstr_instrType = bgeu) and (ALUtoCtl_port_sig_ALU_result = 0)));
	 at t: not((decodedInstr_instrType = jal));
	 at t: not((decodedInstr_instrType = jalr));
	 at t: not(mem_en);
	 at t: (wb_sel = WB_ALU);
	 at t: wb_en;
	 at t: not((decodedInstr_rd_addr = 0));
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: writeBack_8;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_data_dst_data = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToRegs_data_req = REG_WR;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: CtlToRegs_port_sig_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_WR;
	 at t_end: CtlToRegs_port_sig_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (4 + pc_reg_at_t);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property executeALU_1_read_79 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: not(br_en);
	 at t: (decodedInstr_instrType = jalr);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_PC4);
	 at t: wb_en;
	 at t: not((decodedInstr_rd_addr = 0));
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: writeBack_8;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_data_dst_data = (4 + pc_reg_at_t)(31 downto 0);
	 at t_end: CtlToRegs_data_req = REG_WR;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: CtlToRegs_port_sig_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = (4 + pc_reg_at_t)(31 downto 0);
	 at t_end: CtlToRegs_port_sig_req = REG_WR;
	 at t_end: CtlToRegs_port_sig_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (RegsToCtl_data_contents1_at_t + decodedInstr_imm_at_t)(31 downto 0);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property executeALU_1_read_80 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: br_en;
	 at t: (decodedInstr_instrType = blt);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_PC4);
	 at t: wb_en;
	 at t: not((decodedInstr_rd_addr = 0));
	 at t: (ALUtoCtl_port_sig_ALU_result = 1);
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: writeBack_8;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_data_dst_data = (4 + pc_reg_at_t);
	 at t_end: CtlToRegs_data_req = REG_WR;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: CtlToRegs_port_sig_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = (4 + pc_reg_at_t);
	 at t_end: CtlToRegs_port_sig_req = REG_WR;
	 at t_end: CtlToRegs_port_sig_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property executeALU_1_read_81 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: br_en;
	 at t: (decodedInstr_instrType = bge);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_MEM);
	 at t: wb_en;
	 at t: not((decodedInstr_rd_addr = 0));
	 at t: (ALUtoCtl_port_sig_ALU_result = 0);
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: writeBack_8;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_data_dst_data = fromMemoryData_at_t;
	 at t_end: CtlToRegs_data_req = REG_WR;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: CtlToRegs_port_sig_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = fromMemoryData_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_WR;
	 at t_end: CtlToRegs_port_sig_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property executeALU_1_read_82 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: br_en;
	 at t: (decodedInstr_instrType = bltu);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_ALU);
	 at t: wb_en;
	 at t: not((decodedInstr_rd_addr = 0));
	 at t: (ALUtoCtl_port_sig_ALU_result = 1);
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: writeBack_8;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_data_dst_data = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToRegs_data_req = REG_WR;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: CtlToRegs_port_sig_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_WR;
	 at t_end: CtlToRegs_port_sig_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property executeALU_1_read_83 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: br_en;
	 at t: not(((decodedInstr_instrType = beq) and (ALUtoCtl_port_sig_ALU_result = 0)));
	 at t: not(((decodedInstr_instrType = bne) and not((ALUtoCtl_port_sig_ALU_result = 0))));
	 at t: not(((decodedInstr_instrType = blt) and (ALUtoCtl_port_sig_ALU_result = 1)));
	 at t: not(((decodedInstr_instrType = bge) and (ALUtoCtl_port_sig_ALU_result = 0)));
	 at t: not(((decodedInstr_instrType = bltu) and (ALUtoCtl_port_sig_ALU_result = 1)));
	 at t: not(((decodedInstr_instrType = bgeu) and (ALUtoCtl_port_sig_ALU_result = 0)));
	 at t: not((decodedInstr_instrType = jal));
	 at t: not((decodedInstr_instrType = jalr));
	 at t: not(mem_en);
	 at t: (wb_sel = WB_MEM);
	 at t: wb_en;
	 at t: not((decodedInstr_rd_addr = 0));
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: writeBack_8;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_data_dst_data = fromMemoryData_at_t;
	 at t_end: CtlToRegs_data_req = REG_WR;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: CtlToRegs_port_sig_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = fromMemoryData_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_WR;
	 at t_end: CtlToRegs_port_sig_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (4 + pc_reg_at_t);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property executeALU_1_read_84 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: br_en;
	 at t: (decodedInstr_instrType = bge);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_PC4);
	 at t: wb_en;
	 at t: not((decodedInstr_rd_addr = 0));
	 at t: (ALUtoCtl_port_sig_ALU_result = 0);
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: writeBack_8;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_data_dst_data = (4 + pc_reg_at_t);
	 at t_end: CtlToRegs_data_req = REG_WR;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: CtlToRegs_port_sig_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = (4 + pc_reg_at_t);
	 at t_end: CtlToRegs_port_sig_req = REG_WR;
	 at t_end: CtlToRegs_port_sig_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property executeALU_1_read_85 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: br_en;
	 at t: (decodedInstr_instrType = bltu);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_MEM);
	 at t: wb_en;
	 at t: not((decodedInstr_rd_addr = 0));
	 at t: (ALUtoCtl_port_sig_ALU_result = 1);
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: writeBack_8;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_data_dst_data = fromMemoryData_at_t;
	 at t_end: CtlToRegs_data_req = REG_WR;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: CtlToRegs_port_sig_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = fromMemoryData_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_WR;
	 at t_end: CtlToRegs_port_sig_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property executeALU_1_read_86 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: br_en;
	 at t: (decodedInstr_instrType = bgeu);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_ALU);
	 at t: wb_en;
	 at t: not((decodedInstr_rd_addr = 0));
	 at t: (ALUtoCtl_port_sig_ALU_result = 0);
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: writeBack_8;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_data_dst_data = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToRegs_data_req = REG_WR;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: CtlToRegs_port_sig_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_WR;
	 at t_end: CtlToRegs_port_sig_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property executeALU_1_read_87 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: br_en;
	 at t: (decodedInstr_instrType = jal);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_ALU);
	 at t: wb_en;
	 at t: not((decodedInstr_rd_addr = 0));
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: writeBack_8;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_data_dst_data = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToRegs_data_req = REG_WR;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: CtlToRegs_port_sig_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_WR;
	 at t_end: CtlToRegs_port_sig_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property executeALU_1_read_88 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: br_en;
	 at t: not(((decodedInstr_instrType = beq) and (ALUtoCtl_port_sig_ALU_result = 0)));
	 at t: not(((decodedInstr_instrType = bne) and not((ALUtoCtl_port_sig_ALU_result = 0))));
	 at t: not(((decodedInstr_instrType = blt) and (ALUtoCtl_port_sig_ALU_result = 1)));
	 at t: not(((decodedInstr_instrType = bge) and (ALUtoCtl_port_sig_ALU_result = 0)));
	 at t: not(((decodedInstr_instrType = bltu) and (ALUtoCtl_port_sig_ALU_result = 1)));
	 at t: not(((decodedInstr_instrType = bgeu) and (ALUtoCtl_port_sig_ALU_result = 0)));
	 at t: not((decodedInstr_instrType = jal));
	 at t: not((decodedInstr_instrType = jalr));
	 at t: not(mem_en);
	 at t: (wb_sel = WB_PC4);
	 at t: wb_en;
	 at t: not((decodedInstr_rd_addr = 0));
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: writeBack_8;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_data_dst_data = (4 + pc_reg_at_t);
	 at t_end: CtlToRegs_data_req = REG_WR;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: CtlToRegs_port_sig_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = (4 + pc_reg_at_t);
	 at t_end: CtlToRegs_port_sig_req = REG_WR;
	 at t_end: CtlToRegs_port_sig_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (4 + pc_reg_at_t);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property executeALU_1_read_89 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: br_en;
	 at t: (decodedInstr_instrType = bltu);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_PC4);
	 at t: wb_en;
	 at t: not((decodedInstr_rd_addr = 0));
	 at t: (ALUtoCtl_port_sig_ALU_result = 1);
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: writeBack_8;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_data_dst_data = (4 + pc_reg_at_t);
	 at t_end: CtlToRegs_data_req = REG_WR;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: CtlToRegs_port_sig_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = (4 + pc_reg_at_t);
	 at t_end: CtlToRegs_port_sig_req = REG_WR;
	 at t_end: CtlToRegs_port_sig_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property executeALU_1_read_90 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: br_en;
	 at t: (decodedInstr_instrType = bgeu);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_MEM);
	 at t: wb_en;
	 at t: not((decodedInstr_rd_addr = 0));
	 at t: (ALUtoCtl_port_sig_ALU_result = 0);
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: writeBack_8;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_data_dst_data = fromMemoryData_at_t;
	 at t_end: CtlToRegs_data_req = REG_WR;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: CtlToRegs_port_sig_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = fromMemoryData_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_WR;
	 at t_end: CtlToRegs_port_sig_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property executeALU_1_read_91 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: br_en;
	 at t: (decodedInstr_instrType = jal);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_MEM);
	 at t: wb_en;
	 at t: not((decodedInstr_rd_addr = 0));
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: writeBack_8;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_data_dst_data = fromMemoryData_at_t;
	 at t_end: CtlToRegs_data_req = REG_WR;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: CtlToRegs_port_sig_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = fromMemoryData_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_WR;
	 at t_end: CtlToRegs_port_sig_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property executeALU_1_read_92 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: br_en;
	 at t: (decodedInstr_instrType = bgeu);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_PC4);
	 at t: wb_en;
	 at t: not((decodedInstr_rd_addr = 0));
	 at t: (ALUtoCtl_port_sig_ALU_result = 0);
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: writeBack_8;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_data_dst_data = (4 + pc_reg_at_t);
	 at t_end: CtlToRegs_data_req = REG_WR;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: CtlToRegs_port_sig_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = (4 + pc_reg_at_t);
	 at t_end: CtlToRegs_port_sig_req = REG_WR;
	 at t_end: CtlToRegs_port_sig_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property executeALU_1_read_93 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: br_en;
	 at t: (decodedInstr_instrType = jal);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_PC4);
	 at t: wb_en;
	 at t: not((decodedInstr_rd_addr = 0));
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: writeBack_8;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_data_dst_data = (4 + pc_reg_at_t);
	 at t_end: CtlToRegs_data_req = REG_WR;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: CtlToRegs_port_sig_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = (4 + pc_reg_at_t);
	 at t_end: CtlToRegs_port_sig_req = REG_WR;
	 at t_end: CtlToRegs_port_sig_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (pc_reg_at_t + decodedInstr_imm_at_t);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property executeALU_1_read_94 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: br_en;
	 at t: (decodedInstr_instrType = jalr);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_ALU);
	 at t: wb_en;
	 at t: not((decodedInstr_rd_addr = 0));
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: writeBack_8;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_data_dst_data = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToRegs_data_req = REG_WR;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: CtlToRegs_port_sig_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_WR;
	 at t_end: CtlToRegs_port_sig_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (RegsToCtl_data_contents1_at_t + decodedInstr_imm_at_t);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property executeALU_1_read_95 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: br_en;
	 at t: (decodedInstr_instrType = jalr);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_MEM);
	 at t: wb_en;
	 at t: not((decodedInstr_rd_addr = 0));
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: writeBack_8;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_data_dst_data = fromMemoryData_at_t;
	 at t_end: CtlToRegs_data_req = REG_WR;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: CtlToRegs_port_sig_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = fromMemoryData_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_WR;
	 at t_end: CtlToRegs_port_sig_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (RegsToCtl_data_contents1_at_t + decodedInstr_imm_at_t);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property executeALU_1_read_96 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_port_sig_ALU_result_at_t = ALUtoCtl_port_sig_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: br_en;
	 at t: (decodedInstr_instrType = jalr);
	 at t: not(mem_en);
	 at t: (wb_sel = WB_PC4);
	 at t: wb_en;
	 at t: not((decodedInstr_rd_addr = 0));
	 at t: ALUtoCtl_port_sync;
prove:
	 at t_end: writeBack_8;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_port_sig_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_data_dst_data = (4 + pc_reg_at_t);
	 at t_end: CtlToRegs_data_req = REG_WR;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: CtlToRegs_port_sig_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = (4 + pc_reg_at_t);
	 at t_end: CtlToRegs_port_sig_req = REG_WR;
	 at t_end: CtlToRegs_port_sig_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = (RegsToCtl_data_contents1_at_t + decodedInstr_imm_at_t);
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property fetchAndDecode_2_write_97 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_req_at_t = CtlToRegs_data_req@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetchAndDecode_2;
	 at t: toMemory_sync;
prove:
	 at t_end: fetchAndDecode_3;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = CtlToRegs_data_req_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end-1]: fromDecoder_notify = false;
	 at t_end: fromDecoder_notify = true;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property fetchAndDecode_3_read_98 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_req_at_t = CtlToRegs_data_req@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	fromDecoder_sig_imm_at_t = fromDecoder_sig_imm@t,
	fromDecoder_sig_instrType_at_t = fromDecoder_sig_instrType@t,
	fromDecoder_sig_rd_addr_at_t = fromDecoder_sig_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetchAndDecode_3;
	 at t: (fromDecoder_sig_encType = I);
	 at t: not((fromDecoder_sig_instrType = addI));
	 at t: not((fromDecoder_sig_instrType = sltI));
	 at t: not((fromDecoder_sig_instrType = sltIu));
	 at t: not((fromDecoder_sig_instrType = xorI));
	 at t: not((fromDecoder_sig_instrType = orI));
	 at t: not((fromDecoder_sig_instrType = andI));
	 at t: not((fromDecoder_sig_instrType = sllI));
	 at t: not((fromDecoder_sig_instrType = srlI));
	 at t: not((fromDecoder_sig_instrType = sraI));
	 at t: not((fromDecoder_sig_instrType = lb));
	 at t: not((fromDecoder_sig_instrType = lh));
	 at t: not((fromDecoder_sig_instrType = lw));
	 at t: not((fromDecoder_sig_instrType = lbu));
	 at t: not((fromDecoder_sig_instrType = lhu));
	 at t: not((fromDecoder_sig_instrType = jalr));
	 at t: not(reg_rd_en);
	 at t: fromDecoder_sync;
prove:
	 at t_end: executeALU_0;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = fromDecoder_sig_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = RegsToCtl_data_contents1_at_t;
	 at t_end: CtlToALU_data_reg2_contents = RegsToCtl_data_contents2_at_t;
	 at t_end: CtlToALU_port_sig_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_port_sig_imm = fromDecoder_sig_imm_at_t;
	 at t_end: CtlToALU_port_sig_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_port_sig_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_port_sig_pc_reg = pc_reg_at_t;
	 at t_end: CtlToALU_port_sig_reg1_contents = RegsToCtl_data_contents1_at_t;
	 at t_end: CtlToALU_port_sig_reg2_contents = RegsToCtl_data_contents2_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = CtlToRegs_data_req_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = fromDecoder_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = fromDecoder_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = fromDecoder_sig_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end-1]: CtlToALU_port_notify = false;
	 at t_end: CtlToALU_port_notify = true;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property fetchAndDecode_3_read_99 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_req_at_t = CtlToRegs_data_req@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	fromDecoder_sig_imm_at_t = fromDecoder_sig_imm@t,
	fromDecoder_sig_instrType_at_t = fromDecoder_sig_instrType@t,
	fromDecoder_sig_rd_addr_at_t = fromDecoder_sig_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetchAndDecode_3;
	 at t: (fromDecoder_sig_encType = J);
	 at t: not((fromDecoder_sig_instrType = jal));
	 at t: not(reg_rd_en);
	 at t: fromDecoder_sync;
prove:
	 at t_end: executeALU_0;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = fromDecoder_sig_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = RegsToCtl_data_contents1_at_t;
	 at t_end: CtlToALU_data_reg2_contents = RegsToCtl_data_contents2_at_t;
	 at t_end: CtlToALU_port_sig_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_port_sig_imm = fromDecoder_sig_imm_at_t;
	 at t_end: CtlToALU_port_sig_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_port_sig_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_port_sig_pc_reg = pc_reg_at_t;
	 at t_end: CtlToALU_port_sig_reg1_contents = RegsToCtl_data_contents1_at_t;
	 at t_end: CtlToALU_port_sig_reg2_contents = RegsToCtl_data_contents2_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = CtlToRegs_data_req_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = fromDecoder_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = fromDecoder_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = fromDecoder_sig_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end-1]: CtlToALU_port_notify = false;
	 at t_end: CtlToALU_port_notify = true;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property fetchAndDecode_3_read_100 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_req_at_t = CtlToRegs_data_req@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	fromDecoder_sig_imm_at_t = fromDecoder_sig_imm@t,
	fromDecoder_sig_instrType_at_t = fromDecoder_sig_instrType@t,
	fromDecoder_sig_rd_addr_at_t = fromDecoder_sig_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetchAndDecode_3;
	 at t: not((fromDecoder_sig_encType = I));
	 at t: not((fromDecoder_sig_encType = R));
	 at t: not((fromDecoder_sig_encType = B));
	 at t: not((fromDecoder_sig_encType = J));
	 at t: not((fromDecoder_sig_encType = S));
	 at t: not((fromDecoder_sig_encType = U));
	 at t: not(reg_rd_en);
	 at t: fromDecoder_sync;
prove:
	 at t_end: executeALU_0;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = fromDecoder_sig_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = RegsToCtl_data_contents1_at_t;
	 at t_end: CtlToALU_data_reg2_contents = RegsToCtl_data_contents2_at_t;
	 at t_end: CtlToALU_port_sig_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_port_sig_imm = fromDecoder_sig_imm_at_t;
	 at t_end: CtlToALU_port_sig_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_port_sig_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_port_sig_pc_reg = pc_reg_at_t;
	 at t_end: CtlToALU_port_sig_reg1_contents = RegsToCtl_data_contents1_at_t;
	 at t_end: CtlToALU_port_sig_reg2_contents = RegsToCtl_data_contents2_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = CtlToRegs_data_req_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = fromDecoder_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = fromDecoder_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = fromDecoder_sig_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end-1]: CtlToALU_port_notify = false;
	 at t_end: CtlToALU_port_notify = true;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property fetchAndDecode_3_read_101 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_req_at_t = CtlToRegs_data_req@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	fromDecoder_sig_imm_at_t = fromDecoder_sig_imm@t,
	fromDecoder_sig_instrType_at_t = fromDecoder_sig_instrType@t,
	fromDecoder_sig_rd_addr_at_t = fromDecoder_sig_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetchAndDecode_3;
	 at t: (fromDecoder_sig_encType = J);
	 at t: (fromDecoder_sig_instrType = jal);
	 at t: fromDecoder_sync;
prove:
	 at t_end: executeALU_0;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = ALU_X;
	 at t_end: CtlToALU_data_imm = fromDecoder_sig_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = OP_X;
	 at t_end: CtlToALU_data_op2_sel = OP_X;
	 at t_end: CtlToALU_data_pc_reg = pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = RegsToCtl_data_contents1_at_t;
	 at t_end: CtlToALU_data_reg2_contents = RegsToCtl_data_contents2_at_t;
	 at t_end: CtlToALU_port_sig_alu_fun = ALU_X;
	 at t_end: CtlToALU_port_sig_imm = fromDecoder_sig_imm_at_t;
	 at t_end: CtlToALU_port_sig_op1_sel = OP_X;
	 at t_end: CtlToALU_port_sig_op2_sel = OP_X;
	 at t_end: CtlToALU_port_sig_pc_reg = pc_reg_at_t;
	 at t_end: CtlToALU_port_sig_reg1_contents = RegsToCtl_data_contents1_at_t;
	 at t_end: CtlToALU_port_sig_reg2_contents = RegsToCtl_data_contents2_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = CtlToRegs_data_req_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = fromDecoder_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = fromDecoder_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = fromDecoder_sig_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_PC4;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end-1]: CtlToALU_port_notify = false;
	 at t_end: CtlToALU_port_notify = true;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property fetchAndDecode_3_read_102 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_req_at_t = CtlToRegs_data_req@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	fromDecoder_sig_imm_at_t = fromDecoder_sig_imm@t,
	fromDecoder_sig_instrType_at_t = fromDecoder_sig_instrType@t,
	fromDecoder_sig_rd_addr_at_t = fromDecoder_sig_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetchAndDecode_3;
	 at t: (fromDecoder_sig_encType = U);
	 at t: not((fromDecoder_sig_instrType = lui));
	 at t: not((fromDecoder_sig_instrType = auipc));
	 at t: fromDecoder_sync;
prove:
	 at t_end: executeALU_0;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = fromDecoder_sig_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = RegsToCtl_data_contents1_at_t;
	 at t_end: CtlToALU_data_reg2_contents = RegsToCtl_data_contents2_at_t;
	 at t_end: CtlToALU_port_sig_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_port_sig_imm = fromDecoder_sig_imm_at_t;
	 at t_end: CtlToALU_port_sig_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_port_sig_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_port_sig_pc_reg = pc_reg_at_t;
	 at t_end: CtlToALU_port_sig_reg1_contents = RegsToCtl_data_contents1_at_t;
	 at t_end: CtlToALU_port_sig_reg2_contents = RegsToCtl_data_contents2_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = CtlToRegs_data_req_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = fromDecoder_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = fromDecoder_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = fromDecoder_sig_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end-1]: CtlToALU_port_notify = false;
	 at t_end: CtlToALU_port_notify = true;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property fetchAndDecode_3_read_103 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_req_at_t = CtlToRegs_data_req@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	fromDecoder_sig_imm_at_t = fromDecoder_sig_imm@t,
	fromDecoder_sig_instrType_at_t = fromDecoder_sig_instrType@t,
	fromDecoder_sig_rd_addr_at_t = fromDecoder_sig_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetchAndDecode_3;
	 at t: (fromDecoder_sig_encType = U);
	 at t: (fromDecoder_sig_instrType = lui);
	 at t: fromDecoder_sync;
prove:
	 at t_end: executeALU_0;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = ALU_COPY1;
	 at t_end: CtlToALU_data_imm = fromDecoder_sig_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = OP_IMM;
	 at t_end: CtlToALU_data_op2_sel = OP_X;
	 at t_end: CtlToALU_data_pc_reg = pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = RegsToCtl_data_contents1_at_t;
	 at t_end: CtlToALU_data_reg2_contents = RegsToCtl_data_contents2_at_t;
	 at t_end: CtlToALU_port_sig_alu_fun = ALU_COPY1;
	 at t_end: CtlToALU_port_sig_imm = fromDecoder_sig_imm_at_t;
	 at t_end: CtlToALU_port_sig_op1_sel = OP_IMM;
	 at t_end: CtlToALU_port_sig_op2_sel = OP_X;
	 at t_end: CtlToALU_port_sig_pc_reg = pc_reg_at_t;
	 at t_end: CtlToALU_port_sig_reg1_contents = RegsToCtl_data_contents1_at_t;
	 at t_end: CtlToALU_port_sig_reg2_contents = RegsToCtl_data_contents2_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = CtlToRegs_data_req_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = fromDecoder_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = fromDecoder_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = fromDecoder_sig_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end-1]: CtlToALU_port_notify = false;
	 at t_end: CtlToALU_port_notify = true;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property fetchAndDecode_3_read_104 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_req_at_t = CtlToRegs_data_req@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	fromDecoder_sig_imm_at_t = fromDecoder_sig_imm@t,
	fromDecoder_sig_instrType_at_t = fromDecoder_sig_instrType@t,
	fromDecoder_sig_rd_addr_at_t = fromDecoder_sig_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetchAndDecode_3;
	 at t: (fromDecoder_sig_encType = U);
	 at t: (fromDecoder_sig_instrType = auipc);
	 at t: fromDecoder_sync;
prove:
	 at t_end: executeALU_0;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = ALU_ADD;
	 at t_end: CtlToALU_data_imm = fromDecoder_sig_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = OP_PC;
	 at t_end: CtlToALU_data_op2_sel = OP_IMM;
	 at t_end: CtlToALU_data_pc_reg = pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = RegsToCtl_data_contents1_at_t;
	 at t_end: CtlToALU_data_reg2_contents = RegsToCtl_data_contents2_at_t;
	 at t_end: CtlToALU_port_sig_alu_fun = ALU_ADD;
	 at t_end: CtlToALU_port_sig_imm = fromDecoder_sig_imm_at_t;
	 at t_end: CtlToALU_port_sig_op1_sel = OP_PC;
	 at t_end: CtlToALU_port_sig_op2_sel = OP_IMM;
	 at t_end: CtlToALU_port_sig_pc_reg = pc_reg_at_t;
	 at t_end: CtlToALU_port_sig_reg1_contents = RegsToCtl_data_contents1_at_t;
	 at t_end: CtlToALU_port_sig_reg2_contents = RegsToCtl_data_contents2_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = CtlToRegs_data_req_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = fromDecoder_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = fromDecoder_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = fromDecoder_sig_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = false;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end-1]: CtlToALU_port_notify = false;
	 at t_end: CtlToALU_port_notify = true;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property fetchAndDecode_3_read_105 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	fromDecoder_sig_imm_at_t = fromDecoder_sig_imm@t,
	fromDecoder_sig_instrType_at_t = fromDecoder_sig_instrType@t,
	fromDecoder_sig_rd_addr_at_t = fromDecoder_sig_rd_addr@t,
	fromDecoder_sig_rs1_addr_at_t = fromDecoder_sig_rs1_addr@t,
	fromDecoder_sig_rs2_addr_at_t = fromDecoder_sig_rs2_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetchAndDecode_3;
	 at t: (fromDecoder_sig_encType = I);
	 at t: not((fromDecoder_sig_instrType = addI));
	 at t: not((fromDecoder_sig_instrType = sltI));
	 at t: not((fromDecoder_sig_instrType = sltIu));
	 at t: not((fromDecoder_sig_instrType = xorI));
	 at t: not((fromDecoder_sig_instrType = orI));
	 at t: not((fromDecoder_sig_instrType = andI));
	 at t: not((fromDecoder_sig_instrType = sllI));
	 at t: not((fromDecoder_sig_instrType = srlI));
	 at t: not((fromDecoder_sig_instrType = sraI));
	 at t: not((fromDecoder_sig_instrType = lb));
	 at t: not((fromDecoder_sig_instrType = lh));
	 at t: not((fromDecoder_sig_instrType = lw));
	 at t: not((fromDecoder_sig_instrType = lbu));
	 at t: not((fromDecoder_sig_instrType = lhu));
	 at t: not((fromDecoder_sig_instrType = jalr));
	 at t: reg_rd_en;
	 at t: fromDecoder_sync;
prove:
	 at t_end: readRegisterFile_6;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = REG_RD;
	 at t_end: CtlToRegs_data_src1 = fromDecoder_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_data_src2 = fromDecoder_sig_rs2_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_RD;
	 at t_end: CtlToRegs_port_sig_src1 = fromDecoder_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = fromDecoder_sig_rs2_addr_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = fromDecoder_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = fromDecoder_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = fromDecoder_sig_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property fetchAndDecode_3_read_106 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	fromDecoder_sig_imm_at_t = fromDecoder_sig_imm@t,
	fromDecoder_sig_instrType_at_t = fromDecoder_sig_instrType@t,
	fromDecoder_sig_rd_addr_at_t = fromDecoder_sig_rd_addr@t,
	fromDecoder_sig_rs1_addr_at_t = fromDecoder_sig_rs1_addr@t,
	fromDecoder_sig_rs2_addr_at_t = fromDecoder_sig_rs2_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetchAndDecode_3;
	 at t: (fromDecoder_sig_encType = J);
	 at t: not((fromDecoder_sig_instrType = jal));
	 at t: reg_rd_en;
	 at t: fromDecoder_sync;
prove:
	 at t_end: readRegisterFile_6;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = REG_RD;
	 at t_end: CtlToRegs_data_src1 = fromDecoder_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_data_src2 = fromDecoder_sig_rs2_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_RD;
	 at t_end: CtlToRegs_port_sig_src1 = fromDecoder_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = fromDecoder_sig_rs2_addr_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = fromDecoder_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = fromDecoder_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = fromDecoder_sig_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property fetchAndDecode_3_read_107 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	fromDecoder_sig_imm_at_t = fromDecoder_sig_imm@t,
	fromDecoder_sig_instrType_at_t = fromDecoder_sig_instrType@t,
	fromDecoder_sig_rd_addr_at_t = fromDecoder_sig_rd_addr@t,
	fromDecoder_sig_rs1_addr_at_t = fromDecoder_sig_rs1_addr@t,
	fromDecoder_sig_rs2_addr_at_t = fromDecoder_sig_rs2_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetchAndDecode_3;
	 at t: not((fromDecoder_sig_encType = I));
	 at t: not((fromDecoder_sig_encType = R));
	 at t: not((fromDecoder_sig_encType = B));
	 at t: not((fromDecoder_sig_encType = J));
	 at t: not((fromDecoder_sig_encType = S));
	 at t: not((fromDecoder_sig_encType = U));
	 at t: reg_rd_en;
	 at t: fromDecoder_sync;
prove:
	 at t_end: readRegisterFile_6;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = REG_RD;
	 at t_end: CtlToRegs_data_src1 = fromDecoder_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_data_src2 = fromDecoder_sig_rs2_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_RD;
	 at t_end: CtlToRegs_port_sig_src1 = fromDecoder_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = fromDecoder_sig_rs2_addr_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = fromDecoder_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = fromDecoder_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = fromDecoder_sig_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property fetchAndDecode_3_read_108 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	fromDecoder_sig_imm_at_t = fromDecoder_sig_imm@t,
	fromDecoder_sig_instrType_at_t = fromDecoder_sig_instrType@t,
	fromDecoder_sig_rd_addr_at_t = fromDecoder_sig_rd_addr@t,
	fromDecoder_sig_rs1_addr_at_t = fromDecoder_sig_rs1_addr@t,
	fromDecoder_sig_rs2_addr_at_t = fromDecoder_sig_rs2_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetchAndDecode_3;
	 at t: (fromDecoder_sig_encType = I);
	 at t: (fromDecoder_sig_instrType = addI);
	 at t: fromDecoder_sync;
prove:
	 at t_end: readRegisterFile_6;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = ALU_ADD;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = OP_REG;
	 at t_end: CtlToALU_data_op2_sel = OP_IMM;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = REG_RD;
	 at t_end: CtlToRegs_data_src1 = fromDecoder_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_data_src2 = fromDecoder_sig_rs2_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_RD;
	 at t_end: CtlToRegs_port_sig_src1 = fromDecoder_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = fromDecoder_sig_rs2_addr_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = fromDecoder_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = fromDecoder_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = fromDecoder_sig_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = true;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property fetchAndDecode_3_read_109 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	fromDecoder_sig_imm_at_t = fromDecoder_sig_imm@t,
	fromDecoder_sig_instrType_at_t = fromDecoder_sig_instrType@t,
	fromDecoder_sig_rd_addr_at_t = fromDecoder_sig_rd_addr@t,
	fromDecoder_sig_rs1_addr_at_t = fromDecoder_sig_rs1_addr@t,
	fromDecoder_sig_rs2_addr_at_t = fromDecoder_sig_rs2_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetchAndDecode_3;
	 at t: (fromDecoder_sig_encType = R);
	 at t: (fromDecoder_sig_instrType = add);
	 at t: fromDecoder_sync;
prove:
	 at t_end: readRegisterFile_6;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = ALU_ADD;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = OP_REG;
	 at t_end: CtlToALU_data_op2_sel = OP_REG;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = REG_RD;
	 at t_end: CtlToRegs_data_src1 = fromDecoder_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_data_src2 = fromDecoder_sig_rs2_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_RD;
	 at t_end: CtlToRegs_port_sig_src1 = fromDecoder_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = fromDecoder_sig_rs2_addr_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = fromDecoder_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = fromDecoder_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = fromDecoder_sig_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = true;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property fetchAndDecode_3_read_110 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	fromDecoder_sig_imm_at_t = fromDecoder_sig_imm@t,
	fromDecoder_sig_instrType_at_t = fromDecoder_sig_instrType@t,
	fromDecoder_sig_rd_addr_at_t = fromDecoder_sig_rd_addr@t,
	fromDecoder_sig_rs1_addr_at_t = fromDecoder_sig_rs1_addr@t,
	fromDecoder_sig_rs2_addr_at_t = fromDecoder_sig_rs2_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetchAndDecode_3;
	 at t: (fromDecoder_sig_encType = I);
	 at t: (fromDecoder_sig_instrType = sltI);
	 at t: fromDecoder_sync;
prove:
	 at t_end: readRegisterFile_6;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = ALU_SLT;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = OP_REG;
	 at t_end: CtlToALU_data_op2_sel = OP_IMM;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = REG_RD;
	 at t_end: CtlToRegs_data_src1 = fromDecoder_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_data_src2 = fromDecoder_sig_rs2_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_RD;
	 at t_end: CtlToRegs_port_sig_src1 = fromDecoder_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = fromDecoder_sig_rs2_addr_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = fromDecoder_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = fromDecoder_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = fromDecoder_sig_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = true;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property fetchAndDecode_3_read_111 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	fromDecoder_sig_imm_at_t = fromDecoder_sig_imm@t,
	fromDecoder_sig_instrType_at_t = fromDecoder_sig_instrType@t,
	fromDecoder_sig_rd_addr_at_t = fromDecoder_sig_rd_addr@t,
	fromDecoder_sig_rs1_addr_at_t = fromDecoder_sig_rs1_addr@t,
	fromDecoder_sig_rs2_addr_at_t = fromDecoder_sig_rs2_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetchAndDecode_3;
	 at t: (fromDecoder_sig_encType = I);
	 at t: (fromDecoder_sig_instrType = jalr);
	 at t: fromDecoder_sync;
prove:
	 at t_end: readRegisterFile_6;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = ALU_X;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = OP_X;
	 at t_end: CtlToALU_data_op2_sel = OP_X;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = REG_RD;
	 at t_end: CtlToRegs_data_src1 = fromDecoder_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_data_src2 = fromDecoder_sig_rs2_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_RD;
	 at t_end: CtlToRegs_port_sig_src1 = fromDecoder_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = fromDecoder_sig_rs2_addr_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = fromDecoder_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = fromDecoder_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = fromDecoder_sig_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = true;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_PC4;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property fetchAndDecode_3_read_112 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	fromDecoder_sig_imm_at_t = fromDecoder_sig_imm@t,
	fromDecoder_sig_instrType_at_t = fromDecoder_sig_instrType@t,
	fromDecoder_sig_rd_addr_at_t = fromDecoder_sig_rd_addr@t,
	fromDecoder_sig_rs1_addr_at_t = fromDecoder_sig_rs1_addr@t,
	fromDecoder_sig_rs2_addr_at_t = fromDecoder_sig_rs2_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetchAndDecode_3;
	 at t: (fromDecoder_sig_encType = R);
	 at t: (fromDecoder_sig_instrType = sub);
	 at t: fromDecoder_sync;
prove:
	 at t_end: readRegisterFile_6;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = ALU_SUB;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = OP_REG;
	 at t_end: CtlToALU_data_op2_sel = OP_REG;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = REG_RD;
	 at t_end: CtlToRegs_data_src1 = fromDecoder_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_data_src2 = fromDecoder_sig_rs2_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_RD;
	 at t_end: CtlToRegs_port_sig_src1 = fromDecoder_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = fromDecoder_sig_rs2_addr_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = fromDecoder_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = fromDecoder_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = fromDecoder_sig_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = true;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property fetchAndDecode_3_read_113 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	fromDecoder_sig_imm_at_t = fromDecoder_sig_imm@t,
	fromDecoder_sig_instrType_at_t = fromDecoder_sig_instrType@t,
	fromDecoder_sig_rd_addr_at_t = fromDecoder_sig_rd_addr@t,
	fromDecoder_sig_rs1_addr_at_t = fromDecoder_sig_rs1_addr@t,
	fromDecoder_sig_rs2_addr_at_t = fromDecoder_sig_rs2_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetchAndDecode_3;
	 at t: (fromDecoder_sig_encType = B);
	 at t: (fromDecoder_sig_instrType = beq);
	 at t: fromDecoder_sync;
prove:
	 at t_end: readRegisterFile_6;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = ALU_SUB;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = OP_REG;
	 at t_end: CtlToALU_data_op2_sel = OP_REG;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = REG_RD;
	 at t_end: CtlToRegs_data_src1 = fromDecoder_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_data_src2 = fromDecoder_sig_rs2_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_RD;
	 at t_end: CtlToRegs_port_sig_src1 = fromDecoder_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = fromDecoder_sig_rs2_addr_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = true;
	 at t_end: decodedInstr_imm = fromDecoder_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = fromDecoder_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = fromDecoder_sig_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = true;
	 at t_end: wb_en = false;
	 at t_end: wb_sel = WB_X;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property fetchAndDecode_3_read_114 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	fromDecoder_sig_imm_at_t = fromDecoder_sig_imm@t,
	fromDecoder_sig_instrType_at_t = fromDecoder_sig_instrType@t,
	fromDecoder_sig_rd_addr_at_t = fromDecoder_sig_rd_addr@t,
	fromDecoder_sig_rs1_addr_at_t = fromDecoder_sig_rs1_addr@t,
	fromDecoder_sig_rs2_addr_at_t = fromDecoder_sig_rs2_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetchAndDecode_3;
	 at t: (fromDecoder_sig_encType = I);
	 at t: (fromDecoder_sig_instrType = sltIu);
	 at t: fromDecoder_sync;
prove:
	 at t_end: readRegisterFile_6;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = ALU_SLTU;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = OP_REG;
	 at t_end: CtlToALU_data_op2_sel = OP_IMM;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = REG_RD;
	 at t_end: CtlToRegs_data_src1 = fromDecoder_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_data_src2 = fromDecoder_sig_rs2_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_RD;
	 at t_end: CtlToRegs_port_sig_src1 = fromDecoder_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = fromDecoder_sig_rs2_addr_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = fromDecoder_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = fromDecoder_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = fromDecoder_sig_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = true;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property fetchAndDecode_3_read_115 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	fromDecoder_sig_imm_at_t = fromDecoder_sig_imm@t,
	fromDecoder_sig_instrType_at_t = fromDecoder_sig_instrType@t,
	fromDecoder_sig_rd_addr_at_t = fromDecoder_sig_rd_addr@t,
	fromDecoder_sig_rs1_addr_at_t = fromDecoder_sig_rs1_addr@t,
	fromDecoder_sig_rs2_addr_at_t = fromDecoder_sig_rs2_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetchAndDecode_3;
	 at t: (fromDecoder_sig_encType = R);
	 at t: (fromDecoder_sig_instrType = sll_Instr);
	 at t: fromDecoder_sync;
prove:
	 at t_end: readRegisterFile_6;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = ALU_SLL;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = OP_REG;
	 at t_end: CtlToALU_data_op2_sel = OP_REG;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = REG_RD;
	 at t_end: CtlToRegs_data_src1 = fromDecoder_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_data_src2 = fromDecoder_sig_rs2_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_RD;
	 at t_end: CtlToRegs_port_sig_src1 = fromDecoder_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = fromDecoder_sig_rs2_addr_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = fromDecoder_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = fromDecoder_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = fromDecoder_sig_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = true;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property fetchAndDecode_3_read_116 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	fromDecoder_sig_imm_at_t = fromDecoder_sig_imm@t,
	fromDecoder_sig_instrType_at_t = fromDecoder_sig_instrType@t,
	fromDecoder_sig_rd_addr_at_t = fromDecoder_sig_rd_addr@t,
	fromDecoder_sig_rs1_addr_at_t = fromDecoder_sig_rs1_addr@t,
	fromDecoder_sig_rs2_addr_at_t = fromDecoder_sig_rs2_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetchAndDecode_3;
	 at t: (fromDecoder_sig_encType = B);
	 at t: (fromDecoder_sig_instrType = bne);
	 at t: fromDecoder_sync;
prove:
	 at t_end: readRegisterFile_6;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = ALU_SUB;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = OP_REG;
	 at t_end: CtlToALU_data_op2_sel = OP_REG;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = REG_RD;
	 at t_end: CtlToRegs_data_src1 = fromDecoder_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_data_src2 = fromDecoder_sig_rs2_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_RD;
	 at t_end: CtlToRegs_port_sig_src1 = fromDecoder_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = fromDecoder_sig_rs2_addr_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = true;
	 at t_end: decodedInstr_imm = fromDecoder_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = fromDecoder_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = fromDecoder_sig_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = true;
	 at t_end: wb_en = false;
	 at t_end: wb_sel = WB_X;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property fetchAndDecode_3_read_117 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	fromDecoder_sig_imm_at_t = fromDecoder_sig_imm@t,
	fromDecoder_sig_instrType_at_t = fromDecoder_sig_instrType@t,
	fromDecoder_sig_rd_addr_at_t = fromDecoder_sig_rd_addr@t,
	fromDecoder_sig_rs1_addr_at_t = fromDecoder_sig_rs1_addr@t,
	fromDecoder_sig_rs2_addr_at_t = fromDecoder_sig_rs2_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetchAndDecode_3;
	 at t: (fromDecoder_sig_encType = I);
	 at t: (fromDecoder_sig_instrType = xorI);
	 at t: fromDecoder_sync;
prove:
	 at t_end: readRegisterFile_6;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = ALU_XOR;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = OP_REG;
	 at t_end: CtlToALU_data_op2_sel = OP_IMM;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = REG_RD;
	 at t_end: CtlToRegs_data_src1 = fromDecoder_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_data_src2 = fromDecoder_sig_rs2_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_RD;
	 at t_end: CtlToRegs_port_sig_src1 = fromDecoder_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = fromDecoder_sig_rs2_addr_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = fromDecoder_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = fromDecoder_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = fromDecoder_sig_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = true;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property fetchAndDecode_3_read_118 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	fromDecoder_sig_imm_at_t = fromDecoder_sig_imm@t,
	fromDecoder_sig_instrType_at_t = fromDecoder_sig_instrType@t,
	fromDecoder_sig_rd_addr_at_t = fromDecoder_sig_rd_addr@t,
	fromDecoder_sig_rs1_addr_at_t = fromDecoder_sig_rs1_addr@t,
	fromDecoder_sig_rs2_addr_at_t = fromDecoder_sig_rs2_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetchAndDecode_3;
	 at t: (fromDecoder_sig_encType = I);
	 at t: (fromDecoder_sig_instrType = lb);
	 at t: fromDecoder_sync;
prove:
	 at t_end: readRegisterFile_6;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = ALU_ADD;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = OP_REG;
	 at t_end: CtlToALU_data_op2_sel = OP_IMM;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = REG_RD;
	 at t_end: CtlToRegs_data_src1 = fromDecoder_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_data_src2 = fromDecoder_sig_rs2_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_RD;
	 at t_end: CtlToRegs_port_sig_src1 = fromDecoder_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = fromDecoder_sig_rs2_addr_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = fromDecoder_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = fromDecoder_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = fromDecoder_sig_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = true;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = MT_B;
	 at t_end: memoryAccess_req = MEM_LOAD;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = true;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_MEM;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property fetchAndDecode_3_read_119 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	fromDecoder_sig_imm_at_t = fromDecoder_sig_imm@t,
	fromDecoder_sig_instrType_at_t = fromDecoder_sig_instrType@t,
	fromDecoder_sig_rd_addr_at_t = fromDecoder_sig_rd_addr@t,
	fromDecoder_sig_rs1_addr_at_t = fromDecoder_sig_rs1_addr@t,
	fromDecoder_sig_rs2_addr_at_t = fromDecoder_sig_rs2_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetchAndDecode_3;
	 at t: (fromDecoder_sig_encType = R);
	 at t: (fromDecoder_sig_instrType = slt);
	 at t: fromDecoder_sync;
prove:
	 at t_end: readRegisterFile_6;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = ALU_SLT;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = OP_REG;
	 at t_end: CtlToALU_data_op2_sel = OP_REG;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = REG_RD;
	 at t_end: CtlToRegs_data_src1 = fromDecoder_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_data_src2 = fromDecoder_sig_rs2_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_RD;
	 at t_end: CtlToRegs_port_sig_src1 = fromDecoder_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = fromDecoder_sig_rs2_addr_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = fromDecoder_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = fromDecoder_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = fromDecoder_sig_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = true;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property fetchAndDecode_3_read_120 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	fromDecoder_sig_imm_at_t = fromDecoder_sig_imm@t,
	fromDecoder_sig_instrType_at_t = fromDecoder_sig_instrType@t,
	fromDecoder_sig_rd_addr_at_t = fromDecoder_sig_rd_addr@t,
	fromDecoder_sig_rs1_addr_at_t = fromDecoder_sig_rs1_addr@t,
	fromDecoder_sig_rs2_addr_at_t = fromDecoder_sig_rs2_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetchAndDecode_3;
	 at t: (fromDecoder_sig_encType = B);
	 at t: (fromDecoder_sig_instrType = blt);
	 at t: fromDecoder_sync;
prove:
	 at t_end: readRegisterFile_6;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = ALU_SLT;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = OP_REG;
	 at t_end: CtlToALU_data_op2_sel = OP_REG;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = REG_RD;
	 at t_end: CtlToRegs_data_src1 = fromDecoder_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_data_src2 = fromDecoder_sig_rs2_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_RD;
	 at t_end: CtlToRegs_port_sig_src1 = fromDecoder_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = fromDecoder_sig_rs2_addr_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = true;
	 at t_end: decodedInstr_imm = fromDecoder_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = fromDecoder_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = fromDecoder_sig_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = true;
	 at t_end: wb_en = false;
	 at t_end: wb_sel = WB_X;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property fetchAndDecode_3_read_121 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	fromDecoder_sig_imm_at_t = fromDecoder_sig_imm@t,
	fromDecoder_sig_instrType_at_t = fromDecoder_sig_instrType@t,
	fromDecoder_sig_rd_addr_at_t = fromDecoder_sig_rd_addr@t,
	fromDecoder_sig_rs1_addr_at_t = fromDecoder_sig_rs1_addr@t,
	fromDecoder_sig_rs2_addr_at_t = fromDecoder_sig_rs2_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetchAndDecode_3;
	 at t: (fromDecoder_sig_encType = I);
	 at t: (fromDecoder_sig_instrType = orI);
	 at t: fromDecoder_sync;
prove:
	 at t_end: readRegisterFile_6;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = ALU_OR;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = OP_REG;
	 at t_end: CtlToALU_data_op2_sel = OP_IMM;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = REG_RD;
	 at t_end: CtlToRegs_data_src1 = fromDecoder_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_data_src2 = fromDecoder_sig_rs2_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_RD;
	 at t_end: CtlToRegs_port_sig_src1 = fromDecoder_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = fromDecoder_sig_rs2_addr_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = fromDecoder_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = fromDecoder_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = fromDecoder_sig_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = true;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property fetchAndDecode_3_read_122 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	fromDecoder_sig_imm_at_t = fromDecoder_sig_imm@t,
	fromDecoder_sig_instrType_at_t = fromDecoder_sig_instrType@t,
	fromDecoder_sig_rd_addr_at_t = fromDecoder_sig_rd_addr@t,
	fromDecoder_sig_rs1_addr_at_t = fromDecoder_sig_rs1_addr@t,
	fromDecoder_sig_rs2_addr_at_t = fromDecoder_sig_rs2_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetchAndDecode_3;
	 at t: (fromDecoder_sig_encType = I);
	 at t: (fromDecoder_sig_instrType = lh);
	 at t: fromDecoder_sync;
prove:
	 at t_end: readRegisterFile_6;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = ALU_ADD;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = OP_REG;
	 at t_end: CtlToALU_data_op2_sel = OP_IMM;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = REG_RD;
	 at t_end: CtlToRegs_data_src1 = fromDecoder_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_data_src2 = fromDecoder_sig_rs2_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_RD;
	 at t_end: CtlToRegs_port_sig_src1 = fromDecoder_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = fromDecoder_sig_rs2_addr_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = fromDecoder_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = fromDecoder_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = fromDecoder_sig_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = true;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = MT_H;
	 at t_end: memoryAccess_req = MEM_LOAD;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = true;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_MEM;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property fetchAndDecode_3_read_123 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	fromDecoder_sig_imm_at_t = fromDecoder_sig_imm@t,
	fromDecoder_sig_instrType_at_t = fromDecoder_sig_instrType@t,
	fromDecoder_sig_rd_addr_at_t = fromDecoder_sig_rd_addr@t,
	fromDecoder_sig_rs1_addr_at_t = fromDecoder_sig_rs1_addr@t,
	fromDecoder_sig_rs2_addr_at_t = fromDecoder_sig_rs2_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetchAndDecode_3;
	 at t: (fromDecoder_sig_encType = R);
	 at t: (fromDecoder_sig_instrType = sltu);
	 at t: fromDecoder_sync;
prove:
	 at t_end: readRegisterFile_6;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = ALU_SLTU;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = OP_REG;
	 at t_end: CtlToALU_data_op2_sel = OP_REG;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = REG_RD;
	 at t_end: CtlToRegs_data_src1 = fromDecoder_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_data_src2 = fromDecoder_sig_rs2_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_RD;
	 at t_end: CtlToRegs_port_sig_src1 = fromDecoder_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = fromDecoder_sig_rs2_addr_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = fromDecoder_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = fromDecoder_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = fromDecoder_sig_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = true;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property fetchAndDecode_3_read_124 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	fromDecoder_sig_imm_at_t = fromDecoder_sig_imm@t,
	fromDecoder_sig_instrType_at_t = fromDecoder_sig_instrType@t,
	fromDecoder_sig_rd_addr_at_t = fromDecoder_sig_rd_addr@t,
	fromDecoder_sig_rs1_addr_at_t = fromDecoder_sig_rs1_addr@t,
	fromDecoder_sig_rs2_addr_at_t = fromDecoder_sig_rs2_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetchAndDecode_3;
	 at t: (fromDecoder_sig_encType = B);
	 at t: (fromDecoder_sig_instrType = bge);
	 at t: fromDecoder_sync;
prove:
	 at t_end: readRegisterFile_6;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = ALU_SLT;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = OP_REG;
	 at t_end: CtlToALU_data_op2_sel = OP_REG;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = REG_RD;
	 at t_end: CtlToRegs_data_src1 = fromDecoder_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_data_src2 = fromDecoder_sig_rs2_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_RD;
	 at t_end: CtlToRegs_port_sig_src1 = fromDecoder_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = fromDecoder_sig_rs2_addr_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = true;
	 at t_end: decodedInstr_imm = fromDecoder_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = fromDecoder_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = fromDecoder_sig_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = true;
	 at t_end: wb_en = false;
	 at t_end: wb_sel = WB_X;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property fetchAndDecode_3_read_125 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	fromDecoder_sig_imm_at_t = fromDecoder_sig_imm@t,
	fromDecoder_sig_instrType_at_t = fromDecoder_sig_instrType@t,
	fromDecoder_sig_rd_addr_at_t = fromDecoder_sig_rd_addr@t,
	fromDecoder_sig_rs1_addr_at_t = fromDecoder_sig_rs1_addr@t,
	fromDecoder_sig_rs2_addr_at_t = fromDecoder_sig_rs2_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetchAndDecode_3;
	 at t: (fromDecoder_sig_encType = I);
	 at t: (fromDecoder_sig_instrType = andI);
	 at t: fromDecoder_sync;
prove:
	 at t_end: readRegisterFile_6;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = ALU_AND;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = OP_REG;
	 at t_end: CtlToALU_data_op2_sel = OP_IMM;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = REG_RD;
	 at t_end: CtlToRegs_data_src1 = fromDecoder_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_data_src2 = fromDecoder_sig_rs2_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_RD;
	 at t_end: CtlToRegs_port_sig_src1 = fromDecoder_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = fromDecoder_sig_rs2_addr_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = fromDecoder_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = fromDecoder_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = fromDecoder_sig_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = true;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property fetchAndDecode_3_read_126 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	fromDecoder_sig_imm_at_t = fromDecoder_sig_imm@t,
	fromDecoder_sig_instrType_at_t = fromDecoder_sig_instrType@t,
	fromDecoder_sig_rd_addr_at_t = fromDecoder_sig_rd_addr@t,
	fromDecoder_sig_rs1_addr_at_t = fromDecoder_sig_rs1_addr@t,
	fromDecoder_sig_rs2_addr_at_t = fromDecoder_sig_rs2_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetchAndDecode_3;
	 at t: (fromDecoder_sig_encType = I);
	 at t: (fromDecoder_sig_instrType = lw);
	 at t: fromDecoder_sync;
prove:
	 at t_end: readRegisterFile_6;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = ALU_ADD;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = OP_REG;
	 at t_end: CtlToALU_data_op2_sel = OP_IMM;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = REG_RD;
	 at t_end: CtlToRegs_data_src1 = fromDecoder_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_data_src2 = fromDecoder_sig_rs2_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_RD;
	 at t_end: CtlToRegs_port_sig_src1 = fromDecoder_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = fromDecoder_sig_rs2_addr_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = fromDecoder_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = fromDecoder_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = fromDecoder_sig_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = true;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = MEM_LOAD;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = true;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_MEM;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property fetchAndDecode_3_read_127 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	fromDecoder_sig_imm_at_t = fromDecoder_sig_imm@t,
	fromDecoder_sig_instrType_at_t = fromDecoder_sig_instrType@t,
	fromDecoder_sig_rd_addr_at_t = fromDecoder_sig_rd_addr@t,
	fromDecoder_sig_rs1_addr_at_t = fromDecoder_sig_rs1_addr@t,
	fromDecoder_sig_rs2_addr_at_t = fromDecoder_sig_rs2_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetchAndDecode_3;
	 at t: (fromDecoder_sig_encType = R);
	 at t: (fromDecoder_sig_instrType = Xor_Instr);
	 at t: fromDecoder_sync;
prove:
	 at t_end: readRegisterFile_6;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = ALU_XOR;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = OP_REG;
	 at t_end: CtlToALU_data_op2_sel = OP_REG;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = REG_RD;
	 at t_end: CtlToRegs_data_src1 = fromDecoder_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_data_src2 = fromDecoder_sig_rs2_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_RD;
	 at t_end: CtlToRegs_port_sig_src1 = fromDecoder_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = fromDecoder_sig_rs2_addr_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = fromDecoder_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = fromDecoder_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = fromDecoder_sig_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = true;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property fetchAndDecode_3_read_128 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	fromDecoder_sig_imm_at_t = fromDecoder_sig_imm@t,
	fromDecoder_sig_instrType_at_t = fromDecoder_sig_instrType@t,
	fromDecoder_sig_rd_addr_at_t = fromDecoder_sig_rd_addr@t,
	fromDecoder_sig_rs1_addr_at_t = fromDecoder_sig_rs1_addr@t,
	fromDecoder_sig_rs2_addr_at_t = fromDecoder_sig_rs2_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetchAndDecode_3;
	 at t: (fromDecoder_sig_encType = B);
	 at t: (fromDecoder_sig_instrType = bltu);
	 at t: fromDecoder_sync;
prove:
	 at t_end: readRegisterFile_6;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = ALU_SLTU;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = OP_REG;
	 at t_end: CtlToALU_data_op2_sel = OP_REG;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = REG_RD;
	 at t_end: CtlToRegs_data_src1 = fromDecoder_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_data_src2 = fromDecoder_sig_rs2_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_RD;
	 at t_end: CtlToRegs_port_sig_src1 = fromDecoder_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = fromDecoder_sig_rs2_addr_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = true;
	 at t_end: decodedInstr_imm = fromDecoder_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = fromDecoder_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = fromDecoder_sig_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = true;
	 at t_end: wb_en = false;
	 at t_end: wb_sel = WB_X;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property fetchAndDecode_3_read_129 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	fromDecoder_sig_imm_at_t = fromDecoder_sig_imm@t,
	fromDecoder_sig_instrType_at_t = fromDecoder_sig_instrType@t,
	fromDecoder_sig_rd_addr_at_t = fromDecoder_sig_rd_addr@t,
	fromDecoder_sig_rs1_addr_at_t = fromDecoder_sig_rs1_addr@t,
	fromDecoder_sig_rs2_addr_at_t = fromDecoder_sig_rs2_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetchAndDecode_3;
	 at t: (fromDecoder_sig_encType = B);
	 at t: not((fromDecoder_sig_instrType = beq));
	 at t: not((fromDecoder_sig_instrType = bne));
	 at t: not((fromDecoder_sig_instrType = blt));
	 at t: not((fromDecoder_sig_instrType = bge));
	 at t: not((fromDecoder_sig_instrType = bltu));
	 at t: not((fromDecoder_sig_instrType = bgeu));
	 at t: fromDecoder_sync;
prove:
	 at t_end: readRegisterFile_6;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = OP_REG;
	 at t_end: CtlToALU_data_op2_sel = OP_REG;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = REG_RD;
	 at t_end: CtlToRegs_data_src1 = fromDecoder_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_data_src2 = fromDecoder_sig_rs2_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_RD;
	 at t_end: CtlToRegs_port_sig_src1 = fromDecoder_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = fromDecoder_sig_rs2_addr_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = true;
	 at t_end: decodedInstr_imm = fromDecoder_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = fromDecoder_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = fromDecoder_sig_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = true;
	 at t_end: wb_en = false;
	 at t_end: wb_sel = WB_X;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property fetchAndDecode_3_read_130 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	fromDecoder_sig_imm_at_t = fromDecoder_sig_imm@t,
	fromDecoder_sig_instrType_at_t = fromDecoder_sig_instrType@t,
	fromDecoder_sig_rd_addr_at_t = fromDecoder_sig_rd_addr@t,
	fromDecoder_sig_rs1_addr_at_t = fromDecoder_sig_rs1_addr@t,
	fromDecoder_sig_rs2_addr_at_t = fromDecoder_sig_rs2_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetchAndDecode_3;
	 at t: (fromDecoder_sig_encType = S);
	 at t: (fromDecoder_sig_instrType = sb);
	 at t: fromDecoder_sync;
prove:
	 at t_end: readRegisterFile_6;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = ALU_ADD;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = OP_REG;
	 at t_end: CtlToALU_data_op2_sel = OP_IMM;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = REG_RD;
	 at t_end: CtlToRegs_data_src1 = fromDecoder_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_data_src2 = fromDecoder_sig_rs2_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_RD;
	 at t_end: CtlToRegs_port_sig_src1 = fromDecoder_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = fromDecoder_sig_rs2_addr_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = fromDecoder_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = fromDecoder_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = fromDecoder_sig_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = true;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = MT_B;
	 at t_end: memoryAccess_req = MEM_STORE;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = true;
	 at t_end: wb_en = false;
	 at t_end: wb_sel = WB_X;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property fetchAndDecode_3_read_131 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	fromDecoder_sig_imm_at_t = fromDecoder_sig_imm@t,
	fromDecoder_sig_instrType_at_t = fromDecoder_sig_instrType@t,
	fromDecoder_sig_rd_addr_at_t = fromDecoder_sig_rd_addr@t,
	fromDecoder_sig_rs1_addr_at_t = fromDecoder_sig_rs1_addr@t,
	fromDecoder_sig_rs2_addr_at_t = fromDecoder_sig_rs2_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetchAndDecode_3;
	 at t: (fromDecoder_sig_encType = I);
	 at t: (fromDecoder_sig_instrType = sllI);
	 at t: fromDecoder_sync;
prove:
	 at t_end: readRegisterFile_6;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = ALU_SLL;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = OP_REG;
	 at t_end: CtlToALU_data_op2_sel = OP_IMM;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = REG_RD;
	 at t_end: CtlToRegs_data_src1 = fromDecoder_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_data_src2 = fromDecoder_sig_rs2_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_RD;
	 at t_end: CtlToRegs_port_sig_src1 = fromDecoder_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = fromDecoder_sig_rs2_addr_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = fromDecoder_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = fromDecoder_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = fromDecoder_sig_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = true;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property fetchAndDecode_3_read_132 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	fromDecoder_sig_imm_at_t = fromDecoder_sig_imm@t,
	fromDecoder_sig_instrType_at_t = fromDecoder_sig_instrType@t,
	fromDecoder_sig_rd_addr_at_t = fromDecoder_sig_rd_addr@t,
	fromDecoder_sig_rs1_addr_at_t = fromDecoder_sig_rs1_addr@t,
	fromDecoder_sig_rs2_addr_at_t = fromDecoder_sig_rs2_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetchAndDecode_3;
	 at t: (fromDecoder_sig_encType = I);
	 at t: (fromDecoder_sig_instrType = lbu);
	 at t: fromDecoder_sync;
prove:
	 at t_end: readRegisterFile_6;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = ALU_ADD;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = OP_REG;
	 at t_end: CtlToALU_data_op2_sel = OP_IMM;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = REG_RD;
	 at t_end: CtlToRegs_data_src1 = fromDecoder_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_data_src2 = fromDecoder_sig_rs2_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_RD;
	 at t_end: CtlToRegs_port_sig_src1 = fromDecoder_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = fromDecoder_sig_rs2_addr_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = fromDecoder_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = fromDecoder_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = fromDecoder_sig_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = true;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = MT_BU;
	 at t_end: memoryAccess_req = MEM_LOAD;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = true;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_MEM;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property fetchAndDecode_3_read_133 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	fromDecoder_sig_imm_at_t = fromDecoder_sig_imm@t,
	fromDecoder_sig_instrType_at_t = fromDecoder_sig_instrType@t,
	fromDecoder_sig_rd_addr_at_t = fromDecoder_sig_rd_addr@t,
	fromDecoder_sig_rs1_addr_at_t = fromDecoder_sig_rs1_addr@t,
	fromDecoder_sig_rs2_addr_at_t = fromDecoder_sig_rs2_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetchAndDecode_3;
	 at t: (fromDecoder_sig_encType = R);
	 at t: (fromDecoder_sig_instrType = srl_Instr);
	 at t: fromDecoder_sync;
prove:
	 at t_end: readRegisterFile_6;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = ALU_SRL;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = OP_REG;
	 at t_end: CtlToALU_data_op2_sel = OP_REG;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = REG_RD;
	 at t_end: CtlToRegs_data_src1 = fromDecoder_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_data_src2 = fromDecoder_sig_rs2_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_RD;
	 at t_end: CtlToRegs_port_sig_src1 = fromDecoder_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = fromDecoder_sig_rs2_addr_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = fromDecoder_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = fromDecoder_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = fromDecoder_sig_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = true;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property fetchAndDecode_3_read_134 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	fromDecoder_sig_imm_at_t = fromDecoder_sig_imm@t,
	fromDecoder_sig_instrType_at_t = fromDecoder_sig_instrType@t,
	fromDecoder_sig_rd_addr_at_t = fromDecoder_sig_rd_addr@t,
	fromDecoder_sig_rs1_addr_at_t = fromDecoder_sig_rs1_addr@t,
	fromDecoder_sig_rs2_addr_at_t = fromDecoder_sig_rs2_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetchAndDecode_3;
	 at t: (fromDecoder_sig_encType = B);
	 at t: (fromDecoder_sig_instrType = bgeu);
	 at t: fromDecoder_sync;
prove:
	 at t_end: readRegisterFile_6;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = ALU_SLTU;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = OP_REG;
	 at t_end: CtlToALU_data_op2_sel = OP_REG;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = REG_RD;
	 at t_end: CtlToRegs_data_src1 = fromDecoder_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_data_src2 = fromDecoder_sig_rs2_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_RD;
	 at t_end: CtlToRegs_port_sig_src1 = fromDecoder_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = fromDecoder_sig_rs2_addr_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = true;
	 at t_end: decodedInstr_imm = fromDecoder_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = fromDecoder_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = fromDecoder_sig_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = true;
	 at t_end: wb_en = false;
	 at t_end: wb_sel = WB_X;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property fetchAndDecode_3_read_135 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	fromDecoder_sig_imm_at_t = fromDecoder_sig_imm@t,
	fromDecoder_sig_instrType_at_t = fromDecoder_sig_instrType@t,
	fromDecoder_sig_rd_addr_at_t = fromDecoder_sig_rd_addr@t,
	fromDecoder_sig_rs1_addr_at_t = fromDecoder_sig_rs1_addr@t,
	fromDecoder_sig_rs2_addr_at_t = fromDecoder_sig_rs2_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetchAndDecode_3;
	 at t: (fromDecoder_sig_encType = S);
	 at t: (fromDecoder_sig_instrType = sh);
	 at t: fromDecoder_sync;
prove:
	 at t_end: readRegisterFile_6;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = ALU_ADD;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = OP_REG;
	 at t_end: CtlToALU_data_op2_sel = OP_IMM;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = REG_RD;
	 at t_end: CtlToRegs_data_src1 = fromDecoder_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_data_src2 = fromDecoder_sig_rs2_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_RD;
	 at t_end: CtlToRegs_port_sig_src1 = fromDecoder_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = fromDecoder_sig_rs2_addr_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = fromDecoder_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = fromDecoder_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = fromDecoder_sig_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = true;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = MT_H;
	 at t_end: memoryAccess_req = MEM_STORE;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = true;
	 at t_end: wb_en = false;
	 at t_end: wb_sel = WB_X;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property fetchAndDecode_3_read_136 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	fromDecoder_sig_imm_at_t = fromDecoder_sig_imm@t,
	fromDecoder_sig_instrType_at_t = fromDecoder_sig_instrType@t,
	fromDecoder_sig_rd_addr_at_t = fromDecoder_sig_rd_addr@t,
	fromDecoder_sig_rs1_addr_at_t = fromDecoder_sig_rs1_addr@t,
	fromDecoder_sig_rs2_addr_at_t = fromDecoder_sig_rs2_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetchAndDecode_3;
	 at t: (fromDecoder_sig_encType = S);
	 at t: not((fromDecoder_sig_instrType = sb));
	 at t: not((fromDecoder_sig_instrType = sh));
	 at t: not((fromDecoder_sig_instrType = sw));
	 at t: fromDecoder_sync;
prove:
	 at t_end: readRegisterFile_6;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = ALU_ADD;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = OP_REG;
	 at t_end: CtlToALU_data_op2_sel = OP_IMM;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = REG_RD;
	 at t_end: CtlToRegs_data_src1 = fromDecoder_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_data_src2 = fromDecoder_sig_rs2_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_RD;
	 at t_end: CtlToRegs_port_sig_src1 = fromDecoder_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = fromDecoder_sig_rs2_addr_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = fromDecoder_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = fromDecoder_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = fromDecoder_sig_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = true;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = MEM_STORE;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = true;
	 at t_end: wb_en = false;
	 at t_end: wb_sel = WB_X;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property fetchAndDecode_3_read_137 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	fromDecoder_sig_imm_at_t = fromDecoder_sig_imm@t,
	fromDecoder_sig_instrType_at_t = fromDecoder_sig_instrType@t,
	fromDecoder_sig_rd_addr_at_t = fromDecoder_sig_rd_addr@t,
	fromDecoder_sig_rs1_addr_at_t = fromDecoder_sig_rs1_addr@t,
	fromDecoder_sig_rs2_addr_at_t = fromDecoder_sig_rs2_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetchAndDecode_3;
	 at t: (fromDecoder_sig_encType = I);
	 at t: (fromDecoder_sig_instrType = srlI);
	 at t: fromDecoder_sync;
prove:
	 at t_end: readRegisterFile_6;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = ALU_SRL;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = OP_REG;
	 at t_end: CtlToALU_data_op2_sel = OP_IMM;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = REG_RD;
	 at t_end: CtlToRegs_data_src1 = fromDecoder_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_data_src2 = fromDecoder_sig_rs2_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_RD;
	 at t_end: CtlToRegs_port_sig_src1 = fromDecoder_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = fromDecoder_sig_rs2_addr_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = fromDecoder_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = fromDecoder_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = fromDecoder_sig_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = true;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property fetchAndDecode_3_read_138 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	fromDecoder_sig_imm_at_t = fromDecoder_sig_imm@t,
	fromDecoder_sig_instrType_at_t = fromDecoder_sig_instrType@t,
	fromDecoder_sig_rd_addr_at_t = fromDecoder_sig_rd_addr@t,
	fromDecoder_sig_rs1_addr_at_t = fromDecoder_sig_rs1_addr@t,
	fromDecoder_sig_rs2_addr_at_t = fromDecoder_sig_rs2_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetchAndDecode_3;
	 at t: (fromDecoder_sig_encType = I);
	 at t: (fromDecoder_sig_instrType = lhu);
	 at t: fromDecoder_sync;
prove:
	 at t_end: readRegisterFile_6;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = ALU_ADD;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = OP_REG;
	 at t_end: CtlToALU_data_op2_sel = OP_IMM;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = REG_RD;
	 at t_end: CtlToRegs_data_src1 = fromDecoder_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_data_src2 = fromDecoder_sig_rs2_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_RD;
	 at t_end: CtlToRegs_port_sig_src1 = fromDecoder_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = fromDecoder_sig_rs2_addr_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = fromDecoder_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = fromDecoder_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = fromDecoder_sig_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = true;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = MT_HU;
	 at t_end: memoryAccess_req = MEM_LOAD;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = true;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_MEM;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property fetchAndDecode_3_read_139 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	fromDecoder_sig_imm_at_t = fromDecoder_sig_imm@t,
	fromDecoder_sig_instrType_at_t = fromDecoder_sig_instrType@t,
	fromDecoder_sig_rd_addr_at_t = fromDecoder_sig_rd_addr@t,
	fromDecoder_sig_rs1_addr_at_t = fromDecoder_sig_rs1_addr@t,
	fromDecoder_sig_rs2_addr_at_t = fromDecoder_sig_rs2_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetchAndDecode_3;
	 at t: (fromDecoder_sig_encType = R);
	 at t: (fromDecoder_sig_instrType = sra_Instr);
	 at t: fromDecoder_sync;
prove:
	 at t_end: readRegisterFile_6;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = ALU_SRA;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = OP_REG;
	 at t_end: CtlToALU_data_op2_sel = OP_REG;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = REG_RD;
	 at t_end: CtlToRegs_data_src1 = fromDecoder_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_data_src2 = fromDecoder_sig_rs2_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_RD;
	 at t_end: CtlToRegs_port_sig_src1 = fromDecoder_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = fromDecoder_sig_rs2_addr_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = fromDecoder_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = fromDecoder_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = fromDecoder_sig_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = true;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property fetchAndDecode_3_read_140 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	fromDecoder_sig_imm_at_t = fromDecoder_sig_imm@t,
	fromDecoder_sig_instrType_at_t = fromDecoder_sig_instrType@t,
	fromDecoder_sig_rd_addr_at_t = fromDecoder_sig_rd_addr@t,
	fromDecoder_sig_rs1_addr_at_t = fromDecoder_sig_rs1_addr@t,
	fromDecoder_sig_rs2_addr_at_t = fromDecoder_sig_rs2_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetchAndDecode_3;
	 at t: (fromDecoder_sig_encType = S);
	 at t: (fromDecoder_sig_instrType = sw);
	 at t: fromDecoder_sync;
prove:
	 at t_end: readRegisterFile_6;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = ALU_ADD;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = OP_REG;
	 at t_end: CtlToALU_data_op2_sel = OP_IMM;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = REG_RD;
	 at t_end: CtlToRegs_data_src1 = fromDecoder_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_data_src2 = fromDecoder_sig_rs2_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_RD;
	 at t_end: CtlToRegs_port_sig_src1 = fromDecoder_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = fromDecoder_sig_rs2_addr_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = fromDecoder_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = fromDecoder_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = fromDecoder_sig_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = true;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = MEM_STORE;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = true;
	 at t_end: wb_en = false;
	 at t_end: wb_sel = WB_X;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property fetchAndDecode_3_read_141 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	fromDecoder_sig_imm_at_t = fromDecoder_sig_imm@t,
	fromDecoder_sig_instrType_at_t = fromDecoder_sig_instrType@t,
	fromDecoder_sig_rd_addr_at_t = fromDecoder_sig_rd_addr@t,
	fromDecoder_sig_rs1_addr_at_t = fromDecoder_sig_rs1_addr@t,
	fromDecoder_sig_rs2_addr_at_t = fromDecoder_sig_rs2_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetchAndDecode_3;
	 at t: (fromDecoder_sig_encType = I);
	 at t: (fromDecoder_sig_instrType = sraI);
	 at t: fromDecoder_sync;
prove:
	 at t_end: readRegisterFile_6;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = ALU_SRA;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = OP_REG;
	 at t_end: CtlToALU_data_op2_sel = OP_IMM;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = REG_RD;
	 at t_end: CtlToRegs_data_src1 = fromDecoder_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_data_src2 = fromDecoder_sig_rs2_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_RD;
	 at t_end: CtlToRegs_port_sig_src1 = fromDecoder_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = fromDecoder_sig_rs2_addr_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = fromDecoder_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = fromDecoder_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = fromDecoder_sig_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = true;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property fetchAndDecode_3_read_142 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	fromDecoder_sig_imm_at_t = fromDecoder_sig_imm@t,
	fromDecoder_sig_instrType_at_t = fromDecoder_sig_instrType@t,
	fromDecoder_sig_rd_addr_at_t = fromDecoder_sig_rd_addr@t,
	fromDecoder_sig_rs1_addr_at_t = fromDecoder_sig_rs1_addr@t,
	fromDecoder_sig_rs2_addr_at_t = fromDecoder_sig_rs2_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetchAndDecode_3;
	 at t: (fromDecoder_sig_encType = R);
	 at t: (fromDecoder_sig_instrType = Or_Instr);
	 at t: fromDecoder_sync;
prove:
	 at t_end: readRegisterFile_6;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = ALU_OR;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = OP_REG;
	 at t_end: CtlToALU_data_op2_sel = OP_REG;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = REG_RD;
	 at t_end: CtlToRegs_data_src1 = fromDecoder_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_data_src2 = fromDecoder_sig_rs2_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_RD;
	 at t_end: CtlToRegs_port_sig_src1 = fromDecoder_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = fromDecoder_sig_rs2_addr_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = fromDecoder_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = fromDecoder_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = fromDecoder_sig_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = true;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property fetchAndDecode_3_read_143 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	fromDecoder_sig_imm_at_t = fromDecoder_sig_imm@t,
	fromDecoder_sig_instrType_at_t = fromDecoder_sig_instrType@t,
	fromDecoder_sig_rd_addr_at_t = fromDecoder_sig_rd_addr@t,
	fromDecoder_sig_rs1_addr_at_t = fromDecoder_sig_rs1_addr@t,
	fromDecoder_sig_rs2_addr_at_t = fromDecoder_sig_rs2_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetchAndDecode_3;
	 at t: (fromDecoder_sig_encType = R);
	 at t: not((fromDecoder_sig_instrType = add));
	 at t: not((fromDecoder_sig_instrType = sub));
	 at t: not((fromDecoder_sig_instrType = sll_Instr));
	 at t: not((fromDecoder_sig_instrType = slt));
	 at t: not((fromDecoder_sig_instrType = sltu));
	 at t: not((fromDecoder_sig_instrType = Xor_Instr));
	 at t: not((fromDecoder_sig_instrType = srl_Instr));
	 at t: not((fromDecoder_sig_instrType = sra_Instr));
	 at t: not((fromDecoder_sig_instrType = Or_Instr));
	 at t: not((fromDecoder_sig_instrType = And_Instr));
	 at t: fromDecoder_sync;
prove:
	 at t_end: readRegisterFile_6;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = OP_REG;
	 at t_end: CtlToALU_data_op2_sel = OP_REG;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = REG_RD;
	 at t_end: CtlToRegs_data_src1 = fromDecoder_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_data_src2 = fromDecoder_sig_rs2_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_RD;
	 at t_end: CtlToRegs_port_sig_src1 = fromDecoder_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = fromDecoder_sig_rs2_addr_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = fromDecoder_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = fromDecoder_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = fromDecoder_sig_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = true;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property fetchAndDecode_3_read_144 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	fromDecoder_sig_imm_at_t = fromDecoder_sig_imm@t,
	fromDecoder_sig_instrType_at_t = fromDecoder_sig_instrType@t,
	fromDecoder_sig_rd_addr_at_t = fromDecoder_sig_rd_addr@t,
	fromDecoder_sig_rs1_addr_at_t = fromDecoder_sig_rs1_addr@t,
	fromDecoder_sig_rs2_addr_at_t = fromDecoder_sig_rs2_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t;
assume: 
	 at t: fetchAndDecode_3;
	 at t: (fromDecoder_sig_encType = R);
	 at t: (fromDecoder_sig_instrType = And_Instr);
	 at t: fromDecoder_sync;
prove:
	 at t_end: readRegisterFile_6;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = ALU_AND;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = OP_REG;
	 at t_end: CtlToALU_data_op2_sel = OP_REG;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = REG_RD;
	 at t_end: CtlToRegs_data_src1 = fromDecoder_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_data_src2 = fromDecoder_sig_rs2_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_RD;
	 at t_end: CtlToRegs_port_sig_src1 = fromDecoder_sig_rs1_addr_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = fromDecoder_sig_rs2_addr_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = false;
	 at t_end: decodedInstr_imm = fromDecoder_sig_imm_at_t;
	 at t_end: decodedInstr_instrType = fromDecoder_sig_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = fromDecoder_sig_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = false;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = true;
	 at t_end: wb_en = true;
	 at t_end: wb_sel = WB_ALU;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property memoryOperation_4_write_145 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_req_at_t = CtlToRegs_data_req@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: memoryOperation_4;
	 at t: toMemory_sync;
prove:
	 at t_end: memoryOperation_5;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = CtlToRegs_data_req_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end-1]: fromMemory_notify = false;
	 at t_end: fromMemory_notify = true;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property memoryOperation_5_read_146 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_req_at_t = CtlToRegs_data_req@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemory_sig_at_t = fromMemory_sig@t,
	mem_en_at_t = mem_en@t,
	pc_next_at_t = pc_next@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: memoryOperation_5;
	 at t: (wb_sel = WB_ALU);
	 at t: not((wb_en and not((decodedInstr_rd_addr = 0))));
	 at t: fromMemory_sync;
prove:
	 at t_end: fetchAndDecode_2;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = CtlToRegs_data_req_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemory_sig_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = pc_next_at_t;
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = MEM_RD_I;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_next_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: toMemory_sig_addrIn = pc_next_at_t;
	 at t_end: toMemory_sig_dataIn = 0;
	 at t_end: toMemory_sig_mask = MT_W;
	 at t_end: toMemory_sig_req = MEM_RD_I;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end-1]: toMemory_notify = false;
	 at t_end: toMemory_notify = true;
end property;

property memoryOperation_5_read_147 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_req_at_t = CtlToRegs_data_req@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemory_sig_at_t = fromMemory_sig@t,
	mem_en_at_t = mem_en@t,
	pc_next_at_t = pc_next@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: memoryOperation_5;
	 at t: (wb_sel = WB_MEM);
	 at t: not((wb_en and not((decodedInstr_rd_addr = 0))));
	 at t: fromMemory_sync;
prove:
	 at t_end: fetchAndDecode_2;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = CtlToRegs_data_req_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemory_sig_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = pc_next_at_t;
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = MEM_RD_I;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_next_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: toMemory_sig_addrIn = pc_next_at_t;
	 at t_end: toMemory_sig_dataIn = 0;
	 at t_end: toMemory_sig_mask = MT_W;
	 at t_end: toMemory_sig_req = MEM_RD_I;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end-1]: toMemory_notify = false;
	 at t_end: toMemory_notify = true;
end property;

property memoryOperation_5_read_148 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_req_at_t = CtlToRegs_data_req@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemory_sig_at_t = fromMemory_sig@t,
	mem_en_at_t = mem_en@t,
	pc_next_at_t = pc_next@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: memoryOperation_5;
	 at t: not((wb_sel = WB_ALU));
	 at t: not((wb_sel = WB_MEM));
	 at t: not((wb_sel = WB_PC4));
	 at t: fromMemory_sync;
prove:
	 at t_end: fetchAndDecode_2;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = CtlToRegs_data_req_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemory_sig_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = pc_next_at_t;
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = MEM_RD_I;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_next_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: toMemory_sig_addrIn = pc_next_at_t;
	 at t_end: toMemory_sig_dataIn = 0;
	 at t_end: toMemory_sig_mask = MT_W;
	 at t_end: toMemory_sig_req = MEM_RD_I;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end-1]: toMemory_notify = false;
	 at t_end: toMemory_notify = true;
end property;

property memoryOperation_5_read_149 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_req_at_t = CtlToRegs_data_req@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemory_sig_at_t = fromMemory_sig@t,
	mem_en_at_t = mem_en@t,
	pc_next_at_t = pc_next@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: memoryOperation_5;
	 at t: (wb_sel = WB_PC4);
	 at t: not((wb_en and not((decodedInstr_rd_addr = 0))));
	 at t: fromMemory_sync;
prove:
	 at t_end: fetchAndDecode_2;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = CtlToRegs_data_req_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemory_sig_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = pc_next_at_t;
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = MEM_RD_I;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_next_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: toMemory_sig_addrIn = pc_next_at_t;
	 at t_end: toMemory_sig_dataIn = 0;
	 at t_end: toMemory_sig_mask = MT_W;
	 at t_end: toMemory_sig_req = MEM_RD_I;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end-1]: toMemory_notify = false;
	 at t_end: toMemory_notify = true;
end property;

property memoryOperation_5_read_150 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemory_sig_at_t = fromMemory_sig@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: memoryOperation_5;
	 at t: (wb_sel = WB_ALU);
	 at t: wb_en;
	 at t: not((decodedInstr_rd_addr = 0));
	 at t: fromMemory_sync;
prove:
	 at t_end: writeBack_8;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_data_dst_data = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToRegs_data_req = REG_WR;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: CtlToRegs_port_sig_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_WR;
	 at t_end: CtlToRegs_port_sig_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemory_sig_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property memoryOperation_5_read_151 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemory_sig_at_t = fromMemory_sig@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: memoryOperation_5;
	 at t: (wb_sel = WB_MEM);
	 at t: wb_en;
	 at t: not((decodedInstr_rd_addr = 0));
	 at t: fromMemory_sync;
prove:
	 at t_end: writeBack_8;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_data_dst_data = fromMemory_sig_at_t;
	 at t_end: CtlToRegs_data_req = REG_WR;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: CtlToRegs_port_sig_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = fromMemory_sig_at_t;
	 at t_end: CtlToRegs_port_sig_req = REG_WR;
	 at t_end: CtlToRegs_port_sig_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemory_sig_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property memoryOperation_5_read_152 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemory_sig_at_t = fromMemory_sig@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: memoryOperation_5;
	 at t: (wb_sel = WB_PC4);
	 at t: wb_en;
	 at t: not((decodedInstr_rd_addr = 0));
	 at t: fromMemory_sync;
prove:
	 at t_end: writeBack_8;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_data_dst_data = (4 + pc_reg_at_t);
	 at t_end: CtlToRegs_data_req = REG_WR;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: CtlToRegs_port_sig_dst = decodedInstr_rd_addr_at_t;
	 at t_end: CtlToRegs_port_sig_dst_data = (4 + pc_reg_at_t);
	 at t_end: CtlToRegs_port_sig_req = REG_WR;
	 at t_end: CtlToRegs_port_sig_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_port_sig_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemory_sig_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end-1]: CtlToRegs_port_notify = false;
	 at t_end: CtlToRegs_port_notify = true;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property readRegisterFile_6_write_153 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_req_at_t = CtlToRegs_data_req@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: readRegisterFile_6;
	 at t: CtlToRegs_port_sync;
prove:
	 at t_end: readRegisterFile_7;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = CtlToRegs_data_req_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end-1]: RegsToCtl_port_notify = false;
	 at t_end: RegsToCtl_port_notify = true;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property readRegisterFile_7_read_154 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_req_at_t = CtlToRegs_data_req@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_port_sig_contents1_at_t = RegsToCtl_port_sig_contents1@t,
	RegsToCtl_port_sig_contents2_at_t = RegsToCtl_port_sig_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: readRegisterFile_7;
	 at t: RegsToCtl_port_sync;
prove:
	 at t_end: executeALU_0;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = decodedInstr_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = RegsToCtl_port_sig_contents1_at_t;
	 at t_end: CtlToALU_data_reg2_contents = RegsToCtl_port_sig_contents2_at_t;
	 at t_end: CtlToALU_port_sig_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_port_sig_imm = decodedInstr_imm_at_t;
	 at t_end: CtlToALU_port_sig_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_port_sig_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_port_sig_pc_reg = pc_reg_at_t;
	 at t_end: CtlToALU_port_sig_reg1_contents = RegsToCtl_port_sig_contents1_at_t;
	 at t_end: CtlToALU_port_sig_reg2_contents = RegsToCtl_port_sig_contents2_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = CtlToRegs_data_req_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_port_sig_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_port_sig_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t_end: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t_end: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t_end: memoryAccess_req = memoryAccess_req_at_t;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_reg_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end-1]: CtlToALU_port_notify = false;
	 at t_end: CtlToALU_port_notify = true;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end]: toMemory_notify = false;
end property;

property writeBack_8_write_155 is
dependencies: no_reset;
for timepoints:
	 t_end = t+1;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_req_at_t = CtlToRegs_data_req@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	pc_next_at_t = pc_next@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: writeBack_8;
	 at t: CtlToRegs_port_sync;
prove:
	 at t_end: fetchAndDecode_2;
	 at t_end: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t_end: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t_end: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t_end: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t_end: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t_end: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t_end: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t_end: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t_end: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t_end: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t_end: CtlToRegs_data_req = CtlToRegs_data_req_at_t;
	 at t_end: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t_end: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t_end: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t_end: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t_end: br_en = br_en_at_t;
	 at t_end: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t_end: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t_end: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t_end: fromMemoryData = fromMemoryData_at_t;
	 at t_end: mem_en = mem_en_at_t;
	 at t_end: memoryAccess_addrIn = pc_next_at_t;
	 at t_end: memoryAccess_dataIn = 0;
	 at t_end: memoryAccess_mask = MT_W;
	 at t_end: memoryAccess_req = MEM_RD_I;
	 at t_end: pc_next = pc_next_at_t;
	 at t_end: pc_reg = pc_next_at_t;
	 at t_end: reg_rd_en = reg_rd_en_at_t;
	 at t_end: toMemory_sig_addrIn = pc_next_at_t;
	 at t_end: toMemory_sig_dataIn = 0;
	 at t_end: toMemory_sig_mask = MT_W;
	 at t_end: toMemory_sig_req = MEM_RD_I;
	 at t_end: wb_en = wb_en_at_t;
	 at t_end: wb_sel = wb_sel_at_t;
	 during[t+1, t_end]: ALUtoCtl_port_notify = false;
	 during[t+1, t_end]: CtlToALU_port_notify = false;
	 during[t+1, t_end]: CtlToRegs_port_notify = false;
	 during[t+1, t_end]: RegsToCtl_port_notify = false;
	 during[t+1, t_end]: fromDecoder_notify = false;
	 during[t+1, t_end]: fromMemory_notify = false;
	 during[t+1, t_end-1]: toMemory_notify = false;
	 at t_end: toMemory_notify = true;
end property;

property wait_executeALU_0 is
dependencies: no_reset;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_req_at_t = CtlToRegs_data_req@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_0;
	 at t: not(CtlToALU_port_sync);
prove:
	 at t+1: executeALU_0;
	 at t+1: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t+1: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t+1: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t+1: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t+1: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t+1: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t+1: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t+1: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t+1: CtlToALU_port_sig_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t+1: CtlToALU_port_sig_imm = CtlToALU_data_imm_at_t;
	 at t+1: CtlToALU_port_sig_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t+1: CtlToALU_port_sig_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t+1: CtlToALU_port_sig_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t+1: CtlToALU_port_sig_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t+1: CtlToALU_port_sig_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t+1: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t+1: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t+1: CtlToRegs_data_req = CtlToRegs_data_req_at_t;
	 at t+1: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t+1: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t+1: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t+1: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t+1: br_en = br_en_at_t;
	 at t+1: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t+1: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t+1: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t+1: fromMemoryData = fromMemoryData_at_t;
	 at t+1: mem_en = mem_en_at_t;
	 at t+1: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t+1: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t+1: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t+1: memoryAccess_req = memoryAccess_req_at_t;
	 at t+1: pc_next = pc_next_at_t;
	 at t+1: pc_reg = pc_reg_at_t;
	 at t+1: reg_rd_en = reg_rd_en_at_t;
	 at t+1: wb_en = wb_en_at_t;
	 at t+1: wb_sel = wb_sel_at_t;
	 at t+1: ALUtoCtl_port_notify = false;
	 at t+1: CtlToALU_port_notify = true;
	 at t+1: CtlToRegs_port_notify = false;
	 at t+1: RegsToCtl_port_notify = false;
	 at t+1: fromDecoder_notify = false;
	 at t+1: fromMemory_notify = false;
	 at t+1: toMemory_notify = false;
end property;

property wait_executeALU_1 is
dependencies: no_reset;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_req_at_t = CtlToRegs_data_req@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: executeALU_1;
	 at t: not(ALUtoCtl_port_sync);
prove:
	 at t+1: executeALU_1;
	 at t+1: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t+1: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t+1: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t+1: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t+1: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t+1: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t+1: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t+1: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t+1: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t+1: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t+1: CtlToRegs_data_req = CtlToRegs_data_req_at_t;
	 at t+1: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t+1: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t+1: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t+1: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t+1: br_en = br_en_at_t;
	 at t+1: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t+1: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t+1: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t+1: fromMemoryData = fromMemoryData_at_t;
	 at t+1: mem_en = mem_en_at_t;
	 at t+1: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t+1: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t+1: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t+1: memoryAccess_req = memoryAccess_req_at_t;
	 at t+1: pc_next = pc_next_at_t;
	 at t+1: pc_reg = pc_reg_at_t;
	 at t+1: reg_rd_en = reg_rd_en_at_t;
	 at t+1: wb_en = wb_en_at_t;
	 at t+1: wb_sel = wb_sel_at_t;
	 at t+1: ALUtoCtl_port_notify = true;
	 at t+1: CtlToALU_port_notify = false;
	 at t+1: CtlToRegs_port_notify = false;
	 at t+1: RegsToCtl_port_notify = false;
	 at t+1: fromDecoder_notify = false;
	 at t+1: fromMemory_notify = false;
	 at t+1: toMemory_notify = false;
end property;

property wait_fetchAndDecode_2 is
dependencies: no_reset;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_req_at_t = CtlToRegs_data_req@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetchAndDecode_2;
	 at t: not(toMemory_sync);
prove:
	 at t+1: fetchAndDecode_2;
	 at t+1: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t+1: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t+1: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t+1: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t+1: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t+1: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t+1: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t+1: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t+1: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t+1: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t+1: CtlToRegs_data_req = CtlToRegs_data_req_at_t;
	 at t+1: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t+1: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t+1: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t+1: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t+1: br_en = br_en_at_t;
	 at t+1: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t+1: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t+1: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t+1: fromMemoryData = fromMemoryData_at_t;
	 at t+1: mem_en = mem_en_at_t;
	 at t+1: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t+1: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t+1: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t+1: memoryAccess_req = memoryAccess_req_at_t;
	 at t+1: pc_next = pc_next_at_t;
	 at t+1: pc_reg = pc_reg_at_t;
	 at t+1: reg_rd_en = reg_rd_en_at_t;
	 at t+1: toMemory_sig_addrIn = memoryAccess_addrIn_at_t;
	 at t+1: toMemory_sig_dataIn = memoryAccess_dataIn_at_t;
	 at t+1: toMemory_sig_mask = memoryAccess_mask_at_t;
	 at t+1: toMemory_sig_req = memoryAccess_req_at_t;
	 at t+1: wb_en = wb_en_at_t;
	 at t+1: wb_sel = wb_sel_at_t;
	 at t+1: ALUtoCtl_port_notify = false;
	 at t+1: CtlToALU_port_notify = false;
	 at t+1: CtlToRegs_port_notify = false;
	 at t+1: RegsToCtl_port_notify = false;
	 at t+1: fromDecoder_notify = false;
	 at t+1: fromMemory_notify = false;
	 at t+1: toMemory_notify = true;
end property;

property wait_fetchAndDecode_3 is
dependencies: no_reset;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_req_at_t = CtlToRegs_data_req@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: fetchAndDecode_3;
	 at t: not(fromDecoder_sync);
prove:
	 at t+1: fetchAndDecode_3;
	 at t+1: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t+1: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t+1: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t+1: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t+1: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t+1: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t+1: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t+1: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t+1: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t+1: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t+1: CtlToRegs_data_req = CtlToRegs_data_req_at_t;
	 at t+1: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t+1: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t+1: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t+1: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t+1: br_en = br_en_at_t;
	 at t+1: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t+1: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t+1: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t+1: fromMemoryData = fromMemoryData_at_t;
	 at t+1: mem_en = mem_en_at_t;
	 at t+1: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t+1: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t+1: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t+1: memoryAccess_req = memoryAccess_req_at_t;
	 at t+1: pc_next = pc_next_at_t;
	 at t+1: pc_reg = pc_reg_at_t;
	 at t+1: reg_rd_en = reg_rd_en_at_t;
	 at t+1: wb_en = wb_en_at_t;
	 at t+1: wb_sel = wb_sel_at_t;
	 at t+1: ALUtoCtl_port_notify = false;
	 at t+1: CtlToALU_port_notify = false;
	 at t+1: CtlToRegs_port_notify = false;
	 at t+1: RegsToCtl_port_notify = false;
	 at t+1: fromDecoder_notify = true;
	 at t+1: fromMemory_notify = false;
	 at t+1: toMemory_notify = false;
end property;

property wait_memoryOperation_4 is
dependencies: no_reset;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_req_at_t = CtlToRegs_data_req@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: memoryOperation_4;
	 at t: not(toMemory_sync);
prove:
	 at t+1: memoryOperation_4;
	 at t+1: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t+1: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t+1: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t+1: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t+1: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t+1: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t+1: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t+1: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t+1: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t+1: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t+1: CtlToRegs_data_req = CtlToRegs_data_req_at_t;
	 at t+1: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t+1: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t+1: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t+1: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t+1: br_en = br_en_at_t;
	 at t+1: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t+1: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t+1: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t+1: fromMemoryData = fromMemoryData_at_t;
	 at t+1: mem_en = mem_en_at_t;
	 at t+1: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t+1: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t+1: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t+1: memoryAccess_req = memoryAccess_req_at_t;
	 at t+1: pc_next = pc_next_at_t;
	 at t+1: pc_reg = pc_reg_at_t;
	 at t+1: reg_rd_en = reg_rd_en_at_t;
	 at t+1: toMemory_sig_addrIn = memoryAccess_addrIn_at_t;
	 at t+1: toMemory_sig_dataIn = memoryAccess_dataIn_at_t;
	 at t+1: toMemory_sig_mask = memoryAccess_mask_at_t;
	 at t+1: toMemory_sig_req = memoryAccess_req_at_t;
	 at t+1: wb_en = wb_en_at_t;
	 at t+1: wb_sel = wb_sel_at_t;
	 at t+1: ALUtoCtl_port_notify = false;
	 at t+1: CtlToALU_port_notify = false;
	 at t+1: CtlToRegs_port_notify = false;
	 at t+1: RegsToCtl_port_notify = false;
	 at t+1: fromDecoder_notify = false;
	 at t+1: fromMemory_notify = false;
	 at t+1: toMemory_notify = true;
end property;

property wait_memoryOperation_5 is
dependencies: no_reset;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_req_at_t = CtlToRegs_data_req@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: memoryOperation_5;
	 at t: not(fromMemory_sync);
prove:
	 at t+1: memoryOperation_5;
	 at t+1: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t+1: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t+1: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t+1: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t+1: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t+1: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t+1: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t+1: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t+1: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t+1: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t+1: CtlToRegs_data_req = CtlToRegs_data_req_at_t;
	 at t+1: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t+1: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t+1: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t+1: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t+1: br_en = br_en_at_t;
	 at t+1: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t+1: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t+1: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t+1: fromMemoryData = fromMemoryData_at_t;
	 at t+1: mem_en = mem_en_at_t;
	 at t+1: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t+1: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t+1: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t+1: memoryAccess_req = memoryAccess_req_at_t;
	 at t+1: pc_next = pc_next_at_t;
	 at t+1: pc_reg = pc_reg_at_t;
	 at t+1: reg_rd_en = reg_rd_en_at_t;
	 at t+1: wb_en = wb_en_at_t;
	 at t+1: wb_sel = wb_sel_at_t;
	 at t+1: ALUtoCtl_port_notify = false;
	 at t+1: CtlToALU_port_notify = false;
	 at t+1: CtlToRegs_port_notify = false;
	 at t+1: RegsToCtl_port_notify = false;
	 at t+1: fromDecoder_notify = false;
	 at t+1: fromMemory_notify = true;
	 at t+1: toMemory_notify = false;
end property;

property wait_readRegisterFile_6 is
dependencies: no_reset;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_req_at_t = CtlToRegs_data_req@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: readRegisterFile_6;
	 at t: not(CtlToRegs_port_sync);
prove:
	 at t+1: readRegisterFile_6;
	 at t+1: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t+1: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t+1: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t+1: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t+1: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t+1: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t+1: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t+1: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t+1: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t+1: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t+1: CtlToRegs_data_req = CtlToRegs_data_req_at_t;
	 at t+1: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t+1: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t+1: CtlToRegs_port_sig_dst = CtlToRegs_data_dst_at_t;
	 at t+1: CtlToRegs_port_sig_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t+1: CtlToRegs_port_sig_req = CtlToRegs_data_req_at_t;
	 at t+1: CtlToRegs_port_sig_src1 = CtlToRegs_data_src1_at_t;
	 at t+1: CtlToRegs_port_sig_src2 = CtlToRegs_data_src2_at_t;
	 at t+1: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t+1: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t+1: br_en = br_en_at_t;
	 at t+1: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t+1: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t+1: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t+1: fromMemoryData = fromMemoryData_at_t;
	 at t+1: mem_en = mem_en_at_t;
	 at t+1: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t+1: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t+1: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t+1: memoryAccess_req = memoryAccess_req_at_t;
	 at t+1: pc_next = pc_next_at_t;
	 at t+1: pc_reg = pc_reg_at_t;
	 at t+1: reg_rd_en = reg_rd_en_at_t;
	 at t+1: wb_en = wb_en_at_t;
	 at t+1: wb_sel = wb_sel_at_t;
	 at t+1: ALUtoCtl_port_notify = false;
	 at t+1: CtlToALU_port_notify = false;
	 at t+1: CtlToRegs_port_notify = true;
	 at t+1: RegsToCtl_port_notify = false;
	 at t+1: fromDecoder_notify = false;
	 at t+1: fromMemory_notify = false;
	 at t+1: toMemory_notify = false;
end property;

property wait_readRegisterFile_7 is
dependencies: no_reset;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_req_at_t = CtlToRegs_data_req@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: readRegisterFile_7;
	 at t: not(RegsToCtl_port_sync);
prove:
	 at t+1: readRegisterFile_7;
	 at t+1: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t+1: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t+1: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t+1: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t+1: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t+1: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t+1: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t+1: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t+1: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t+1: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t+1: CtlToRegs_data_req = CtlToRegs_data_req_at_t;
	 at t+1: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t+1: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t+1: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t+1: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t+1: br_en = br_en_at_t;
	 at t+1: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t+1: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t+1: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t+1: fromMemoryData = fromMemoryData_at_t;
	 at t+1: mem_en = mem_en_at_t;
	 at t+1: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t+1: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t+1: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t+1: memoryAccess_req = memoryAccess_req_at_t;
	 at t+1: pc_next = pc_next_at_t;
	 at t+1: pc_reg = pc_reg_at_t;
	 at t+1: reg_rd_en = reg_rd_en_at_t;
	 at t+1: wb_en = wb_en_at_t;
	 at t+1: wb_sel = wb_sel_at_t;
	 at t+1: ALUtoCtl_port_notify = false;
	 at t+1: CtlToALU_port_notify = false;
	 at t+1: CtlToRegs_port_notify = false;
	 at t+1: RegsToCtl_port_notify = true;
	 at t+1: fromDecoder_notify = false;
	 at t+1: fromMemory_notify = false;
	 at t+1: toMemory_notify = false;
end property;

property wait_writeBack_8 is
dependencies: no_reset;
freeze:
	ALUtoCtl_data_ALU_result_at_t = ALUtoCtl_data_ALU_result@t,
	CtlToALU_data_alu_fun_at_t = CtlToALU_data_alu_fun@t,
	CtlToALU_data_imm_at_t = CtlToALU_data_imm@t,
	CtlToALU_data_op1_sel_at_t = CtlToALU_data_op1_sel@t,
	CtlToALU_data_op2_sel_at_t = CtlToALU_data_op2_sel@t,
	CtlToALU_data_pc_reg_at_t = CtlToALU_data_pc_reg@t,
	CtlToALU_data_reg1_contents_at_t = CtlToALU_data_reg1_contents@t,
	CtlToALU_data_reg2_contents_at_t = CtlToALU_data_reg2_contents@t,
	CtlToRegs_data_dst_at_t = CtlToRegs_data_dst@t,
	CtlToRegs_data_dst_data_at_t = CtlToRegs_data_dst_data@t,
	CtlToRegs_data_req_at_t = CtlToRegs_data_req@t,
	CtlToRegs_data_src1_at_t = CtlToRegs_data_src1@t,
	CtlToRegs_data_src2_at_t = CtlToRegs_data_src2@t,
	RegsToCtl_data_contents1_at_t = RegsToCtl_data_contents1@t,
	RegsToCtl_data_contents2_at_t = RegsToCtl_data_contents2@t,
	br_en_at_t = br_en@t,
	decodedInstr_imm_at_t = decodedInstr_imm@t,
	decodedInstr_instrType_at_t = decodedInstr_instrType@t,
	decodedInstr_rd_addr_at_t = decodedInstr_rd_addr@t,
	fromMemoryData_at_t = fromMemoryData@t,
	mem_en_at_t = mem_en@t,
	memoryAccess_addrIn_at_t = memoryAccess_addrIn@t,
	memoryAccess_dataIn_at_t = memoryAccess_dataIn@t,
	memoryAccess_mask_at_t = memoryAccess_mask@t,
	memoryAccess_req_at_t = memoryAccess_req@t,
	pc_next_at_t = pc_next@t,
	pc_reg_at_t = pc_reg@t,
	reg_rd_en_at_t = reg_rd_en@t,
	wb_en_at_t = wb_en@t,
	wb_sel_at_t = wb_sel@t;
assume: 
	 at t: writeBack_8;
	 at t: not(CtlToRegs_port_sync);
prove:
	 at t+1: writeBack_8;
	 at t+1: ALUtoCtl_data_ALU_result = ALUtoCtl_data_ALU_result_at_t;
	 at t+1: CtlToALU_data_alu_fun = CtlToALU_data_alu_fun_at_t;
	 at t+1: CtlToALU_data_imm = CtlToALU_data_imm_at_t;
	 at t+1: CtlToALU_data_op1_sel = CtlToALU_data_op1_sel_at_t;
	 at t+1: CtlToALU_data_op2_sel = CtlToALU_data_op2_sel_at_t;
	 at t+1: CtlToALU_data_pc_reg = CtlToALU_data_pc_reg_at_t;
	 at t+1: CtlToALU_data_reg1_contents = CtlToALU_data_reg1_contents_at_t;
	 at t+1: CtlToALU_data_reg2_contents = CtlToALU_data_reg2_contents_at_t;
	 at t+1: CtlToRegs_data_dst = CtlToRegs_data_dst_at_t;
	 at t+1: CtlToRegs_data_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t+1: CtlToRegs_data_req = CtlToRegs_data_req_at_t;
	 at t+1: CtlToRegs_data_src1 = CtlToRegs_data_src1_at_t;
	 at t+1: CtlToRegs_data_src2 = CtlToRegs_data_src2_at_t;
	 at t+1: CtlToRegs_port_sig_dst = CtlToRegs_data_dst_at_t;
	 at t+1: CtlToRegs_port_sig_dst_data = CtlToRegs_data_dst_data_at_t;
	 at t+1: CtlToRegs_port_sig_req = CtlToRegs_data_req_at_t;
	 at t+1: CtlToRegs_port_sig_src1 = CtlToRegs_data_src1_at_t;
	 at t+1: CtlToRegs_port_sig_src2 = CtlToRegs_data_src2_at_t;
	 at t+1: RegsToCtl_data_contents1 = RegsToCtl_data_contents1_at_t;
	 at t+1: RegsToCtl_data_contents2 = RegsToCtl_data_contents2_at_t;
	 at t+1: br_en = br_en_at_t;
	 at t+1: decodedInstr_imm = decodedInstr_imm_at_t;
	 at t+1: decodedInstr_instrType = decodedInstr_instrType_at_t;
	 at t+1: decodedInstr_rd_addr = decodedInstr_rd_addr_at_t;
	 at t+1: fromMemoryData = fromMemoryData_at_t;
	 at t+1: mem_en = mem_en_at_t;
	 at t+1: memoryAccess_addrIn = memoryAccess_addrIn_at_t;
	 at t+1: memoryAccess_dataIn = memoryAccess_dataIn_at_t;
	 at t+1: memoryAccess_mask = memoryAccess_mask_at_t;
	 at t+1: memoryAccess_req = memoryAccess_req_at_t;
	 at t+1: pc_next = pc_next_at_t;
	 at t+1: pc_reg = pc_reg_at_t;
	 at t+1: reg_rd_en = reg_rd_en_at_t;
	 at t+1: wb_en = wb_en_at_t;
	 at t+1: wb_sel = wb_sel_at_t;
	 at t+1: ALUtoCtl_port_notify = false;
	 at t+1: CtlToALU_port_notify = false;
	 at t+1: CtlToRegs_port_notify = true;
	 at t+1: RegsToCtl_port_notify = false;
	 at t+1: fromDecoder_notify = false;
	 at t+1: fromMemory_notify = false;
	 at t+1: toMemory_notify = false;
end property;
