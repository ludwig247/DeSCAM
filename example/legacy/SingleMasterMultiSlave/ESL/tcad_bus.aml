/*
System Description:

1 Server (master)
2 temp detectors (slave)
2 PID actuators (slave)
are connected over a bus

Server is connected to uP, modeled simply as shared variables
Temp detectors are connected to ADC where it gets some value representing temp
PID actuators are connected to DAC where it outputs some value to a regulator

The Temp detector takes rapid samples, and calculates some average.
The average is stored in a buffer, this is a own module!
The buffer is a shared variable that can be overwritten, no wait fo handshake,
on the side to the detector, while it communicates with the blocking bus on
the other side. (Is done to model that the detector does not stop calculating
new average values while waiting for the read request from server)

The effect of communicating over a bus is modelled through the module bus.
The module forwards the transaction requests and responses from the Server to
the four slaves (and back again, and does a simple address decoding according
to the map above)
 
*/

enum err_id_t = {ERR_MIX, ERR_TEMP, ERR_UNKNOWN};
compound sensor_t = {int data, bool stable};
compound config_t = {int sample_time, int wanted_temp, int Kp_Heat, int Ki_Heat, int Kd_Heat, int Kp_Mix, int Ki_Mix, int Kd_Mix};

enum trans_t = {SINGLE_READ, SINGLE_WRITE};
enum ack_t = {OK, RTY, ERR};
compound bus_req_t = {int addr, trans_t type, int data};
compound bus_resp_t = {int data, ack_t ack};

/*
Decoder Map
 0 - 7  HEAT
 8 - 15 MIX
16 - 23 TEMP_TOP
24 - 31 TEMP_BOT

Translated by module bus, so the slaves see the range 0-7
PID_Actuator:
 0 = sample_value
 1 = sample_time
 2 = setpoint
 3 = Kp
 4 = Ki
 5 = Kd
 6,7 = UNUSED

Temp_detector:
  ignores all internal addresses, always replies with the new temprature
*/


system example
{
  //GLOBAL IO
  shared_in<config_t> uP_in;
  shared_out<err_id_t> uP_report;
  shared_in<int> adc_temp[2];
  shared_out<int> dac_mix;
  shared_out<int> dac_heat;
  out<bool> power_mix;
  out<bool> power_heat;

  //timer events
  in<> sample_PID;
  in<> sample_temp_detector;

  //Modules
  server s;
  temp_detector temp_top;
  temp_detector temp_bot;
  buffer temp_top_buffer;
  buffer temp_bot_buffer;
  PID_Actuator heat;
  PID_Actuator mix;
  bus b;

  connect {
    //globals
    uP_in -> s.uP_in;
    s.uP_report -> uP_report;
    s.heat_power -> power_heat;
    s.mix_power -> power_mix;
    adc_temp[0] -> temp_top.adc_in;
    adc_temp[1] -> temp_bot.adc_in;
    mix.dac -> dac_mix;
    heat.dac -> dac_heat;

    sample_PID -> s.sample_timer;
    sample_temp_detector -> temp_top.sample_event;
    sample_temp_detector -> temp_bot.sample_event;

    //buffer
    temp_top.temp_out -> temp_top_buffer.value_in;    
    temp_bot.temp_out -> temp_bot_buffer.value_in;    

    //bus
    s.bus_out -> b.master_in;
    b.slave_out[0] -> temp_top_buffer.bus_req;
    b.slave_out[1] -> temp_bot_buffer.bus_req;
    b.slave_out[2] -> heat.bus_req;
    b.slave_out[3] -> mix.bus_req;
    temp_top_buffer.bus_resp -> b.slave_in[0];
    temp_bot_buffer.bus_resp -> b.slave_in[1];
    heat.bus_resp -> b.slave_in[2];
    mix.bus_resp -> b.slave_in[3];
    b.master_out -> s.bus_in;
  }
};


module bus
{
  in<bus_req_t> master_in;
  in<bus_resp_t> slave_in[4];
  out<bus_resp_t> master_out;
  out<bus_req_t> slave_out[4];

  fsm {
    SECTIONS {RUN};
    bus_req_t req;
    bus_resp_t resp;

    @RUN:
     master_in.read(req);

     if      (req.addr >= 0 && req.addr < 8) {
       slave_out[0].write(req);
       slave_in[0].read(resp);
     }
     else if (req.addr >= 8 && req.addr < 16) {
       req.addr = req.addr - 8;
       slave_out[1].write(req);
       slave_in[1].read(resp);
     }
     else if (req.addr >= 16 && req.addr < 24) {
       req.addr = req.addr - 16;
       slave_out[2].write(req);
       slave_in[2].read(resp);
     }
     else if (req.addr >= 24 && req.addr < 32) {
       req.addr = req.addr - 24;
       slave_out[3].write(req);
       slave_in[3].read(resp);
     }

     master_out.write(resp);
  }
};



module server
{
  in <config_t> uP_in;
  out <err_id_t> uP_report;
  out <bus_req_t> bus_out;
  in <bus_resp_t> bus_in;
  out <bool> heat_power;
  out <bool> mix power;
  in <> sample_timer;

  fsm {

    SECTIONS {INIT, IDLE, CONFIG, GET_TEMP, SET_MIX, SET_HEAT, ERROR} = INIT;
    config_t uP;
    sensor_t temp_top = 0;
    sensor_t temp_bot = 0;
    act_t heat;
    act_t mix;
    err_id_t err_id;
    bus_req_t req;
    bus_resp_t resp_top;
    bus_resp_t resp_bot;

    @INIT:
     heat_power.write(true);
     mix_power.write(true);
     uP_in.read(uP);
     req.type = SINGLE_WRITE;
     req.addr = 1;
     req.data = uP.sample_time;
     nextsection = CONFIG;

    @IDLE:
      sample_timer.wait();
      bool_var = uP_in.nb_read(uP);
      if (bool_var) {
        req.type = SINGLE_WRITE;
        req.addr = 1;
        req.data = uP.sample_time;
        nextsection = CONFIG;
      } else {
        nextsection = GET_TEMP;
      }

    @GET_TEMP:
      req.type = SINGLE_READ;
      req.addr = 16;
      bus_out.write(req);
      bus_in.read(resp_top);
      req.addr = 24;
      bus_out.write(req);
      bus_in.read(resp_bot);
      
      if (resp_top.ack != OK || resp_bot.ack != OK) {
        err_id = ERR_TEMP;
        nextsection = ERROR;
      } else {
        if ( abs(resp_top.data - resp_bot.data) > uP.max_temp_diff ) {
	  err_id = ERR_MIX;
	  nextsection = ERROR;
	} else {
	  nextsection = SET_MIX;
	}
      }
      
    @SET_MIX:
      req.type = SINGLE_WRITE;
      req.addr = 8;
      req.data = abs(resp_top.data - resp_bot.data);
      bus_out.write(req);
      bus_in.read();
      nextsection = SET_HEAT;

    @SET_HEAT:
      req.type = SINGLE_WRITE;Imm
      req.addr = 0;
      req.data = (temp_top + temp_bot)/2;
      bus_out.write(req);
      bus_in.read();

    @ERROR:
      heat_power.write(false);
      mix_power.write(false);
      uP_report.set(err_id);


    @CONFIG:
        bus_out.write(req);
        bus_in.read();

        if      (req.addr == 1) {
          req.addr = 2;
	  req.data = uP.wanted_temp;
        }
        else if (req.addr == 2) {
          req.addr = 3;
          req.data = uP.Kp_Heat;
        }
        else if (req.addr == 3) {
          req.addr = 4;
          req.data = uP.Ki_Heat;
        }
        else if (req.addr == 4) {
          req.addr = 5;
          req.data = uP.Kd_Heat;
        }
        else if (req.addr == 5) {
          req.addr = 9;
          req.data = uP.sample_time;
        }
        else if (req.addr == 9) {
          req.addr = 10;
          req.data = 0;
        }
        else if (req.addr == 10) {
          req.addr = 11;
          req.data = uP.Kp_Mix;
        }
        else if (req.addr == 11) {
          req.addr = 12
          req.data = uP.Ki_Mix;
        }
        else if (req.addr == 12) {
          req.addr = 13;
          req.data = uP.Kd_Mix;
        }
        else {
          nextsection = GET_TEMP;
        } 

  }
};


module buffer
{
  shared_in <int> value_in
  in <bus_req_t> bus_req;
  out <bus_resp_t> bus_resp;

  fsm {
    SECTIONS {RUN};
    bus_resp_t resp;

    @RUN:
      value_in.get(resp.data);
      if (bus_req.nb_read()) {
        resp.ack = OK;
        bus_resp.write(resp);
      }
  }
};

module temp_detector
{
  shared_out <int> temp_out; 
  shared_in <int> adc_in;
  in <> sample_event;

  fsm {
    SECTIONS {MEASURE, UPDATE} = MEASURE;
    sensor_t avg_temp = {0,false};
    int adc_value;
    int sample_cnt = 0;
    int sample_cnt_ok = 0;
    int measured_sum = 0;
    int measured_sum_ok = 0;
    int average_last = 0;

    @MEASURE:
     sample_event.wait();
     adc_in.get(adc_value);
     measured_sum += adc_value;
     ++sample_cnt;
     if ( abs(average_last - adc_value) <= MAX_DIFF) {
       measured_sum_ok += adc_value;
      ++sample_cnt_ok;
     }
     if (sample_cnt == 16) {
       nextsection = UPDATE;
     }
   @UPDATE:
     average_last = measured_sum / 16;
     avg_temp.stable = (sample_cnt_ok >= 10);
     if (avg_temp.stable) {
       avg_temp.data = measured_sum_ok / sample_cnt_ok;
     }
     temp_out.set(avg_temp);

     sample_cnt = 0;
     measured_sum = 0;
     sample_cnt_ok = 0;
     measured_sum_ok = 0;
     nextsection = MEASURE;
  }
};


module PID_Actuator
{
  in <bus_req_t> bus_req;
  out <bus_resp_t> bus_resp;
  shared_out <int> dac;

  fsm {
    SECTIONS {READ, COMPUTE} = READ;
    bus_req_t req;
    bus_resp_t resp;
    int sample_time;  int setpoint; int Kp; int Ki; int Kd;
    int sample;
    int err = 0;  int prev_err = 0;
    int integral = 0;

    @READ:
      bus_req.read(req);
      if      (req.addr == ADDR_sample_value) {
        sample = req.data;
        resp.ack = OK;
      }
      else if (req.addr == ADDR_sample_time) {
        sample_time = req.data;
        resp.ack = OK;
      }
      else if (req.addr == ADDR_setpoint) {
        setpoint = req.data;
        resp.ack = OK;
      }
      else if (req.addr == ADDR_Kp) {
        Kp = req.data;
        resp.ack = OK;
      } 
      else if (req.addr == ADDR_Ki) {
        Ki = req.data;
        resp.ack = OK;
      }
      else if (req.addr == ADDR_Kd) {
        Kd = req.data;
        resp.ack = OK;
      }
      else {
        //should be unreachable in this system
        resp.ack = ERR;
      }
      bus_resp.write(resp);
      nextsection = COMPUTE;

    @COMPUTE:
      err = setpoint - sample;
      integral = integral + err * sample_time;
      derivative = (err - prev_err) / sample_time;
      prev_err = err;
      dac.set(Kp * err + Ki * integral + Kd * deriv);
      nextsection = READ;
  }
};

