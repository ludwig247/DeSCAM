// required terminology
`define next_shift_amount 0 //IN CASE OF REQUIRED SIGNALS VALUES IN THE FUTURE, SHIFT YOUR ENTIRE TIMING BY THIS FACTOR

sequence hold(l, e);
	(l===e, l=e);
endsequence

sequence t;
	##`next_shift_amount 1'b1;
endsequence

sequence t_end(offset);
	t ##offset 1'b1;
endsequence

sequence next(timepoint, offset);
	timepoint ##offset 1'b1;
endsequence

property during(t1, t2, se);
	(t1 ##0 se[*0:$] intersect t2) or
	(t1 intersect t2 ##[1:$] 1'b1);
endproperty

property during_limited(t1, t2, off, se);
	(t1 ##0 se[*0:$] ##off 1'b1 intersect t2) or
	(next(t1, off) intersect t2 ##[1:$] 1'b1);
endproperty

property during_o(t1, o1, t2, o2, se);
	if (o2 >= 0)
		during(next(t1, o1), next(t2, (o2<0) ? 0 : o2), se)
	else
		during_limited(next(t1, o1), t2, (o2>0) ? 0 : -o2, se);
endproperty
// end of ipc_sva

import scam_model_types::*;

module Server_verification(reset);

input reset;

//DESIGNER SHOULD PAY ATTENTION FOR USING THE MODEL CORRECT NAME TO REFER TO THE CLK SIGNAL USED IN IT
default clocking default_clk @(posedge Server.clk); endclocking

// SYNC AND NOTIFY SIGNALS (1-cycle macros) //
function bus_in_notify;
	bus_in_notify = ;
endfunction
function bus_in_sync;
	bus_in_sync = ;
endfunction
function bus_out_notify;
	bus_out_notify = ;
endfunction
function bus_out_sync;
	bus_out_sync = ;
endfunction
function sample_timer_notify;
	sample_timer_notify = ;
endfunction
function sample_timer_sync;
	sample_timer_sync = ;
endfunction
function uP_in_notify;
	uP_in_notify = ;
endfunction
function uP_in_sync;
	uP_in_sync = ;
endfunction
function uP_report_out_notify;
	uP_report_out_notify = ;
endfunction
function uP_report_out_sync;
	uP_report_out_sync = ;
endfunction

// DP SIGNALS //
function ack_t bus_in_sig_ack;
	bus_in_sig_ack = ;
endfunction
function int bus_in_sig_data;
	bus_in_sig_data = ;
endfunction
function int bus_out_sig_addr;
	bus_out_sig_addr = ;
endfunction
function int bus_out_sig_data;
	bus_out_sig_data = ;
endfunction
function trans_t bus_out_sig_trans_type;
	bus_out_sig_trans_type = ;
endfunction
function bool heat_power_sig;
	heat_power_sig = ;
endfunction
function bool mix_power_sig;
	mix_power_sig = ;
endfunction
function bool sample_timer_sig;
	sample_timer_sig = ;
endfunction
function int uP_in_sig_Kd_Heat;
	uP_in_sig_Kd_Heat = ;
endfunction
function int uP_in_sig_Kd_Mix;
	uP_in_sig_Kd_Mix = ;
endfunction
function int uP_in_sig_Ki_Heat;
	uP_in_sig_Ki_Heat = ;
endfunction
function int uP_in_sig_Ki_Mix;
	uP_in_sig_Ki_Mix = ;
endfunction
function int uP_in_sig_Kp_Heat;
	uP_in_sig_Kp_Heat = ;
endfunction
function int uP_in_sig_Kp_Mix;
	uP_in_sig_Kp_Mix = ;
endfunction
function int uP_in_sig_max_temp_diff;
	uP_in_sig_max_temp_diff = ;
endfunction
function int uP_in_sig_sample_time;
	uP_in_sig_sample_time = ;
endfunction
function int uP_in_sig_target_temp;
	uP_in_sig_target_temp = ;
endfunction
function err_id_t uP_report_out_sig;
	uP_report_out_sig = ;
endfunction

// VISIBLE REGISTERS //
function int req_addr;
	req_addr = ;
endfunction
function int req_data;
	req_data = ;
endfunction
function trans_t req_trans_type;
	req_trans_type = ;
endfunction
function int uP_sample_time;
	uP_sample_time = ;
endfunction

// STATES //
function CONFIG_0;
	CONFIG_0 = ;
endfunction
function CONFIG_1;
	CONFIG_1 = ;
endfunction
function ERROR_2;
	ERROR_2 = ;
endfunction
function GET_TEMP_3;
	GET_TEMP_3 = ;
endfunction
function GET_TEMP_4;
	GET_TEMP_4 = ;
endfunction
function GET_TEMP_5;
	GET_TEMP_5 = ;
endfunction
function GET_TEMP_6;
	GET_TEMP_6 = ;
endfunction
function IDLE_7;
	IDLE_7 = ;
endfunction
function IDLE_8;
	IDLE_8 = ;
endfunction
function INIT_9;
	INIT_9 = ;
endfunction
function SET_HEAT_10;
	SET_HEAT_10 = ;
endfunction
function SET_HEAT_11;
	SET_HEAT_11 = ;
endfunction
function SET_MIX_12;
	SET_MIX_12 = ;
endfunction
function SET_MIX_13;
	SET_MIX_13 = ;
endfunction


////////////////////////////////////
//////////// Operations ////////////
////////////////////////////////////
sequence reset_sequence;
//DISGNER REFER TO MODEL RESET SIGNAL HERE
endsequence
property reset_p;
	reset_sequence |=>
	t ##0 INIT_9() and
	t ##0 heat_power_sig() == 1 and
	t ##0 mix_power_sig() == 1 and
	t ##0 req_addr() == 0 and
	t ##0 req_data() == 0 and
	t ##0 req_trans_type() == single_read and
	t ##0 uP_sample_time() == 0 and
	t ##0 bus_in_notify() == 0 and
	t ##0 bus_out_notify() == 0 and
	t ##0 sample_timer_notify() == 0 and
	t ##0 uP_in_notify() == 1 and
	t ##0 uP_report_out_notify() == 0;
endproperty
reset_a: assert property (reset_p);

property CONFIG_0_write_0_p(o);
int req_addr_0;
int req_data_0;
trans_t req_trans_type_0;
int uP_sample_time_0;
bool heat_power_sig_0;
bool mix_power_sig_0;
// hold
	t ##0 hold(req_addr_0, req_addr()) and
	t ##0 hold(req_data_0, req_data()) and
	t ##0 hold(req_trans_type_0, req_trans_type()) and
	t ##0 hold(uP_sample_time_0, uP_sample_time()) and
	t ##0 hold(heat_power_sig_0, heat_power_sig()) and
	t ##0 hold(mix_power_sig_0, mix_power_sig()) and
// Conceptual State
	t ##0 CONFIG_0() and
// trigger
	t ##0 bus_out_sync()
implies
	t_end(o) ##0 CONFIG_1() and
	t_end(o) ##0 heat_power_sig() == heat_power_sig_0 and
	t_end(o) ##0 mix_power_sig() == mix_power_sig_0 and
	t_end(o) ##0 req_addr() == req_addr_0 and
	t_end(o) ##0 req_data() == req_data_0 and
	t_end(o) ##0 req_trans_type() == req_trans_type_0 and
	t_end(o) ##0 uP_sample_time() == uP_sample_time_0 and
	during_o (t, 1, t_end(o) , -1, bus_in_notify() == 0) and
	t_end(o) ##0 bus_in_notify() == 1 and
	during (next(t,1), t_end(o), bus_out_notify() == 0) and
	during (next(t,1), t_end(o), sample_timer_notify() == 0) and
	during (next(t,1), t_end(o), uP_in_notify() == 0) and
	during (next(t,1), t_end(o), uP_report_out_notify() == 0);
endproperty;
CONFIG_0_write_0_a: assert property (disable iff (reset) CONFIG_0_write_0_p(1));// ASSIGN t_end offset here

property CONFIG_1_read_1_p(o);
trans_t req_trans_type_0;
int uP_sample_time_0;
bool heat_power_sig_0;
bool mix_power_sig_0;
// hold
	t ##0 hold(req_trans_type_0, req_trans_type()) and
	t ##0 hold(uP_sample_time_0, uP_sample_time()) and
	t ##0 hold(heat_power_sig_0, heat_power_sig()) and
	t ##0 hold(mix_power_sig_0, mix_power_sig()) and
// Conceptual State
	t ##0 CONFIG_1() and
// trigger
	t ##0 (req_addr() == 1) and
	t ##0 bus_in_sync()
implies
	t_end(o) ##0 CONFIG_0() and
	t_end(o) ##0 bus_out_sig_addr() == 2 and
	t_end(o) ##0 bus_out_sig_data() == uP_sample_time_0 and
	t_end(o) ##0 bus_out_sig_trans_type() == req_trans_type_0 and
	t_end(o) ##0 heat_power_sig() == heat_power_sig_0 and
	t_end(o) ##0 mix_power_sig() == mix_power_sig_0 and
	t_end(o) ##0 req_addr() == 2 and
	t_end(o) ##0 req_data() == uP_sample_time_0 and
	t_end(o) ##0 req_trans_type() == req_trans_type_0 and
	t_end(o) ##0 uP_sample_time() == uP_sample_time_0 and
	during (next(t,1), t_end(o), bus_in_notify() == 0) and
	during_o (t, 1, t_end(o) , -1, bus_out_notify() == 0) and
	t_end(o) ##0 bus_out_notify() == 1 and
	during (next(t,1), t_end(o), sample_timer_notify() == 0) and
	during (next(t,1), t_end(o), uP_in_notify() == 0) and
	during (next(t,1), t_end(o), uP_report_out_notify() == 0);
endproperty;
CONFIG_1_read_1_a: assert property (disable iff (reset) CONFIG_1_read_1_p(1));// ASSIGN t_end offset here

property CONFIG_1_read_2_p(o);
trans_t req_trans_type_0;
int uP_sample_time_0;
bool heat_power_sig_0;
bool mix_power_sig_0;
// hold
	t ##0 hold(req_trans_type_0, req_trans_type()) and
	t ##0 hold(uP_sample_time_0, uP_sample_time()) and
	t ##0 hold(heat_power_sig_0, heat_power_sig()) and
	t ##0 hold(mix_power_sig_0, mix_power_sig()) and
// Conceptual State
	t ##0 CONFIG_1() and
// trigger
	t ##0 (req_addr() == 2) and
	t ##0 bus_in_sync()
implies
	t_end(o) ##0 CONFIG_0() and
	t_end(o) ##0 bus_out_sig_addr() == 3 and
	t_end(o) ##0 bus_out_sig_data() == uP_sample_time_0 and
	t_end(o) ##0 bus_out_sig_trans_type() == req_trans_type_0 and
	t_end(o) ##0 heat_power_sig() == heat_power_sig_0 and
	t_end(o) ##0 mix_power_sig() == mix_power_sig_0 and
	t_end(o) ##0 req_addr() == 3 and
	t_end(o) ##0 req_data() == uP_sample_time_0 and
	t_end(o) ##0 req_trans_type() == req_trans_type_0 and
	t_end(o) ##0 uP_sample_time() == uP_sample_time_0 and
	during (next(t,1), t_end(o), bus_in_notify() == 0) and
	during_o (t, 1, t_end(o) , -1, bus_out_notify() == 0) and
	t_end(o) ##0 bus_out_notify() == 1 and
	during (next(t,1), t_end(o), sample_timer_notify() == 0) and
	during (next(t,1), t_end(o), uP_in_notify() == 0) and
	during (next(t,1), t_end(o), uP_report_out_notify() == 0);
endproperty;
CONFIG_1_read_2_a: assert property (disable iff (reset) CONFIG_1_read_2_p(1));// ASSIGN t_end offset here

property CONFIG_1_read_3_p(o);
trans_t req_trans_type_0;
int uP_sample_time_0;
bool heat_power_sig_0;
bool mix_power_sig_0;
// hold
	t ##0 hold(req_trans_type_0, req_trans_type()) and
	t ##0 hold(uP_sample_time_0, uP_sample_time()) and
	t ##0 hold(heat_power_sig_0, heat_power_sig()) and
	t ##0 hold(mix_power_sig_0, mix_power_sig()) and
// Conceptual State
	t ##0 CONFIG_1() and
// trigger
	t ##0 (req_addr() == 3) and
	t ##0 bus_in_sync()
implies
	t_end(o) ##0 CONFIG_0() and
	t_end(o) ##0 bus_out_sig_addr() == 4 and
	t_end(o) ##0 bus_out_sig_data() == uP_sample_time_0 and
	t_end(o) ##0 bus_out_sig_trans_type() == req_trans_type_0 and
	t_end(o) ##0 heat_power_sig() == heat_power_sig_0 and
	t_end(o) ##0 mix_power_sig() == mix_power_sig_0 and
	t_end(o) ##0 req_addr() == 4 and
	t_end(o) ##0 req_data() == uP_sample_time_0 and
	t_end(o) ##0 req_trans_type() == req_trans_type_0 and
	t_end(o) ##0 uP_sample_time() == uP_sample_time_0 and
	during (next(t,1), t_end(o), bus_in_notify() == 0) and
	during_o (t, 1, t_end(o) , -1, bus_out_notify() == 0) and
	t_end(o) ##0 bus_out_notify() == 1 and
	during (next(t,1), t_end(o), sample_timer_notify() == 0) and
	during (next(t,1), t_end(o), uP_in_notify() == 0) and
	during (next(t,1), t_end(o), uP_report_out_notify() == 0);
endproperty;
CONFIG_1_read_3_a: assert property (disable iff (reset) CONFIG_1_read_3_p(1));// ASSIGN t_end offset here

property CONFIG_1_read_4_p(o);
int req_addr_0;
trans_t req_trans_type_0;
int uP_sample_time_0;
bool heat_power_sig_0;
bool mix_power_sig_0;
// hold
	t ##0 hold(req_addr_0, req_addr()) and
	t ##0 hold(req_trans_type_0, req_trans_type()) and
	t ##0 hold(uP_sample_time_0, uP_sample_time()) and
	t ##0 hold(heat_power_sig_0, heat_power_sig()) and
	t ##0 hold(mix_power_sig_0, mix_power_sig()) and
// Conceptual State
	t ##0 CONFIG_1() and
// trigger
	t ##0 !((req_addr() == 1)) and
	t ##0 !((req_addr() == 2)) and
	t ##0 !((req_addr() == 3)) and
	t ##0 !((req_addr() == 4)) and
	t ##0 !((req_addr() == 5)) and
	t ##0 bus_in_sync()
implies
	t_end(o) ##0 CONFIG_0() and
	t_end(o) ##0 bus_out_sig_addr() == req_addr_0 and
	t_end(o) ##0 bus_out_sig_data() == uP_sample_time_0 and
	t_end(o) ##0 bus_out_sig_trans_type() == req_trans_type_0 and
	t_end(o) ##0 heat_power_sig() == heat_power_sig_0 and
	t_end(o) ##0 mix_power_sig() == mix_power_sig_0 and
	t_end(o) ##0 req_addr() == req_addr_0 and
	t_end(o) ##0 req_data() == uP_sample_time_0 and
	t_end(o) ##0 req_trans_type() == req_trans_type_0 and
	t_end(o) ##0 uP_sample_time() == uP_sample_time_0 and
	during (next(t,1), t_end(o), bus_in_notify() == 0) and
	during_o (t, 1, t_end(o) , -1, bus_out_notify() == 0) and
	t_end(o) ##0 bus_out_notify() == 1 and
	during (next(t,1), t_end(o), sample_timer_notify() == 0) and
	during (next(t,1), t_end(o), uP_in_notify() == 0) and
	during (next(t,1), t_end(o), uP_report_out_notify() == 0);
endproperty;
CONFIG_1_read_4_a: assert property (disable iff (reset) CONFIG_1_read_4_p(1));// ASSIGN t_end offset here

property CONFIG_1_read_5_p(o);
trans_t req_trans_type_0;
int uP_sample_time_0;
bool heat_power_sig_0;
bool mix_power_sig_0;
// hold
	t ##0 hold(req_trans_type_0, req_trans_type()) and
	t ##0 hold(uP_sample_time_0, uP_sample_time()) and
	t ##0 hold(heat_power_sig_0, heat_power_sig()) and
	t ##0 hold(mix_power_sig_0, mix_power_sig()) and
// Conceptual State
	t ##0 CONFIG_1() and
// trigger
	t ##0 (req_addr() == 4) and
	t ##0 bus_in_sync()
implies
	t_end(o) ##0 CONFIG_0() and
	t_end(o) ##0 bus_out_sig_addr() == 5 and
	t_end(o) ##0 bus_out_sig_data() == uP_sample_time_0 and
	t_end(o) ##0 bus_out_sig_trans_type() == req_trans_type_0 and
	t_end(o) ##0 heat_power_sig() == heat_power_sig_0 and
	t_end(o) ##0 mix_power_sig() == mix_power_sig_0 and
	t_end(o) ##0 req_addr() == 5 and
	t_end(o) ##0 req_data() == uP_sample_time_0 and
	t_end(o) ##0 req_trans_type() == req_trans_type_0 and
	t_end(o) ##0 uP_sample_time() == uP_sample_time_0 and
	during (next(t,1), t_end(o), bus_in_notify() == 0) and
	during_o (t, 1, t_end(o) , -1, bus_out_notify() == 0) and
	t_end(o) ##0 bus_out_notify() == 1 and
	during (next(t,1), t_end(o), sample_timer_notify() == 0) and
	during (next(t,1), t_end(o), uP_in_notify() == 0) and
	during (next(t,1), t_end(o), uP_report_out_notify() == 0);
endproperty;
CONFIG_1_read_5_a: assert property (disable iff (reset) CONFIG_1_read_5_p(1));// ASSIGN t_end offset here

property CONFIG_1_read_6_p(o);
trans_t req_trans_type_0;
int uP_sample_time_0;
bool heat_power_sig_0;
bool mix_power_sig_0;
// hold
	t ##0 hold(req_trans_type_0, req_trans_type()) and
	t ##0 hold(uP_sample_time_0, uP_sample_time()) and
	t ##0 hold(heat_power_sig_0, heat_power_sig()) and
	t ##0 hold(mix_power_sig_0, mix_power_sig()) and
// Conceptual State
	t ##0 CONFIG_1() and
// trigger
	t ##0 (req_addr() == 5) and
	t ##0 bus_in_sync()
implies
	t_end(o) ##0 CONFIG_0() and
	t_end(o) ##0 bus_out_sig_addr() == 9 and
	t_end(o) ##0 bus_out_sig_data() == uP_sample_time_0 and
	t_end(o) ##0 bus_out_sig_trans_type() == req_trans_type_0 and
	t_end(o) ##0 heat_power_sig() == heat_power_sig_0 and
	t_end(o) ##0 mix_power_sig() == mix_power_sig_0 and
	t_end(o) ##0 req_addr() == 9 and
	t_end(o) ##0 req_data() == uP_sample_time_0 and
	t_end(o) ##0 req_trans_type() == req_trans_type_0 and
	t_end(o) ##0 uP_sample_time() == uP_sample_time_0 and
	during (next(t,1), t_end(o), bus_in_notify() == 0) and
	during_o (t, 1, t_end(o) , -1, bus_out_notify() == 0) and
	t_end(o) ##0 bus_out_notify() == 1 and
	during (next(t,1), t_end(o), sample_timer_notify() == 0) and
	during (next(t,1), t_end(o), uP_in_notify() == 0) and
	during (next(t,1), t_end(o), uP_report_out_notify() == 0);
endproperty;
CONFIG_1_read_6_a: assert property (disable iff (reset) CONFIG_1_read_6_p(1));// ASSIGN t_end offset here

property INIT_9_read_7_p(o);
int uP_in_sig_sample_time_0;
bool heat_power_sig_0;
bool mix_power_sig_0;
// hold
	t ##0 hold(uP_in_sig_sample_time_0, uP_in_sig_sample_time()) and
	t ##0 hold(heat_power_sig_0, heat_power_sig()) and
	t ##0 hold(mix_power_sig_0, mix_power_sig()) and
// Conceptual State
	t ##0 INIT_9() and
// trigger
	t ##0 uP_in_sync()
implies
	t_end(o) ##0 CONFIG_0() and
	t_end(o) ##0 bus_out_sig_addr() == 1 and
	t_end(o) ##0 bus_out_sig_data() == uP_in_sig_sample_time_0 and
	t_end(o) ##0 bus_out_sig_trans_type() == single_write and
	t_end(o) ##0 heat_power_sig() == heat_power_sig_0 and
	t_end(o) ##0 mix_power_sig() == mix_power_sig_0 and
	t_end(o) ##0 req_addr() == 1 and
	t_end(o) ##0 req_data() == uP_in_sig_sample_time_0 and
	t_end(o) ##0 req_trans_type() == single_write and
	t_end(o) ##0 uP_sample_time() == uP_in_sig_sample_time_0 and
	during (next(t,1), t_end(o), bus_in_notify() == 0) and
	during_o (t, 1, t_end(o) , -1, bus_out_notify() == 0) and
	t_end(o) ##0 bus_out_notify() == 1 and
	during (next(t,1), t_end(o), sample_timer_notify() == 0) and
	during (next(t,1), t_end(o), uP_in_notify() == 0) and
	during (next(t,1), t_end(o), uP_report_out_notify() == 0);
endproperty;
INIT_9_read_7_a: assert property (disable iff (reset) INIT_9_read_7_p(1));// ASSIGN t_end offset here


property wait_CONFIG_0_p;
int req_addr_0;
int req_data_0;
trans_t req_trans_type_0;
int uP_sample_time_0;
bool heat_power_sig_0;
bool mix_power_sig_0;
// hold
	t ##0 hold(req_addr_0, req_addr()) and
	t ##0 hold(req_data_0, req_data()) and
	t ##0 hold(req_trans_type_0, req_trans_type()) and
	t ##0 hold(uP_sample_time_0, uP_sample_time()) and
	t ##0 hold(heat_power_sig_0, heat_power_sig()) and
	t ##0 hold(mix_power_sig_0, mix_power_sig()) and
// Conceptual State
	t ##0 CONFIG_0() and
// trigger
	t ##0 !(bus_out_sync())
implies
	t ##1 CONFIG_0() and
	t ##1 bus_out_sig_addr() == req_addr_0 and
	t ##1 bus_out_sig_data() == req_data_0 and
	t ##1 bus_out_sig_trans_type() == req_trans_type_0 and
	t ##1 heat_power_sig() == heat_power_sig_0 and
	t ##1 mix_power_sig() == mix_power_sig_0 and
	t ##1 req_addr() == req_addr_0 and
	t ##1 req_data() == req_data_0 and
	t ##1 req_trans_type() == req_trans_type_0 and
	t ##1 uP_sample_time() == uP_sample_time_0 and
	t ##1 bus_in_notify() == 0 and
	t ##1 bus_out_notify() == 1 and
	t ##1 sample_timer_notify() == 0 and
	t ##1 uP_in_notify() == 0 and
	t ##1 uP_report_out_notify() == 0;
endproperty;
wait_CONFIG_0_a: assert property (disable iff (reset) wait_CONFIG_0_p);


property wait_CONFIG_1_p;
int req_addr_0;
int req_data_0;
trans_t req_trans_type_0;
int uP_sample_time_0;
bool heat_power_sig_0;
bool mix_power_sig_0;
// hold
	t ##0 hold(req_addr_0, req_addr()) and
	t ##0 hold(req_data_0, req_data()) and
	t ##0 hold(req_trans_type_0, req_trans_type()) and
	t ##0 hold(uP_sample_time_0, uP_sample_time()) and
	t ##0 hold(heat_power_sig_0, heat_power_sig()) and
	t ##0 hold(mix_power_sig_0, mix_power_sig()) and
// Conceptual State
	t ##0 CONFIG_1() and
// trigger
	t ##0 !(bus_in_sync())
implies
	t ##1 CONFIG_1() and
	t ##1 heat_power_sig() == heat_power_sig_0 and
	t ##1 mix_power_sig() == mix_power_sig_0 and
	t ##1 req_addr() == req_addr_0 and
	t ##1 req_data() == req_data_0 and
	t ##1 req_trans_type() == req_trans_type_0 and
	t ##1 uP_sample_time() == uP_sample_time_0 and
	t ##1 bus_in_notify() == 1 and
	t ##1 bus_out_notify() == 0 and
	t ##1 sample_timer_notify() == 0 and
	t ##1 uP_in_notify() == 0 and
	t ##1 uP_report_out_notify() == 0;
endproperty;
wait_CONFIG_1_a: assert property (disable iff (reset) wait_CONFIG_1_p);


property wait_INIT_9_p;
int req_addr_0;
int req_data_0;
trans_t req_trans_type_0;
int uP_sample_time_0;
bool heat_power_sig_0;
bool mix_power_sig_0;
// hold
	t ##0 hold(req_addr_0, req_addr()) and
	t ##0 hold(req_data_0, req_data()) and
	t ##0 hold(req_trans_type_0, req_trans_type()) and
	t ##0 hold(uP_sample_time_0, uP_sample_time()) and
	t ##0 hold(heat_power_sig_0, heat_power_sig()) and
	t ##0 hold(mix_power_sig_0, mix_power_sig()) and
// Conceptual State
	t ##0 INIT_9() and
// trigger
	t ##0 !(uP_in_sync())
implies
	t ##1 INIT_9() and
	t ##1 heat_power_sig() == heat_power_sig_0 and
	t ##1 mix_power_sig() == mix_power_sig_0 and
	t ##1 req_addr() == req_addr_0 and
	t ##1 req_data() == req_data_0 and
	t ##1 req_trans_type() == req_trans_type_0 and
	t ##1 uP_sample_time() == uP_sample_time_0 and
	t ##1 bus_in_notify() == 0 and
	t ##1 bus_out_notify() == 0 and
	t ##1 sample_timer_notify() == 0 and
	t ##1 uP_in_notify() == 1 and
	t ##1 uP_report_out_notify() == 0;
endproperty;
wait_INIT_9_a: assert property (disable iff (reset) wait_INIT_9_p);

endmodule

//DESIGNER SHOULD PAY ATTENTION FOR USING THE MODEL CORRECT NAME FOR BINDING AND TO REFER TO THE RESET SIGNAL USED IN IT
bind Server Server_verification inst (.*, .reset());
