// required terminology
`define next_shift_amount 0 //IN CASE OF REQUIRED SIGNALS VALUES IN THE FUTURE, SHIFT YOUR ENTIRE TIMING BY THIS FACTOR

sequence hold(l, e);
	(l===e, l=e);
endsequence

sequence t;
	##`next_shift_amount 1'b1;
endsequence

sequence t_end(offset);
	t ##offset 1'b1;
endsequence

sequence next(timepoint, offset);
	timepoint ##offset 1'b1;
endsequence

property during(t1, t2, se);
	(t1 ##0 se[*0:$] intersect t2) or
	(t1 intersect t2 ##[1:$] 1'b1);
endproperty

property during_limited(t1, t2, off, se);
	(t1 ##0 se[*0:$] ##off 1'b1 intersect t2) or
	(next(t1, off) intersect t2 ##[1:$] 1'b1);
endproperty

property during_o(t1, o1, t2, o2, se);
	if (o2 >= 0)
		during(next(t1, o1), next(t2, (o2<0) ? 0 : o2), se)
	else
		during_limited(next(t1, o1), t2, (o2>0) ? 0 : -o2, se);
endproperty
// end of ipc_sva

import scam_model_types::*;

module PID_Actuator_verification(reset);

input reset;

//DESIGNER SHOULD PAY ATTENTION FOR USING THE MODEL CORRECT NAME TO REFER TO THE CLK SIGNAL USED IN IT
default clocking default_clk @(posedge PID_Actuator.clk); endclocking

// SYNC AND NOTIFY SIGNALS (1-cycle macros) //
function bus_req_notify;
	bus_req_notify = ;
endfunction
function bus_req_sync;
	bus_req_sync = ;
endfunction
function bus_resp_notify;
	bus_resp_notify = ;
endfunction
function bus_resp_sync;
	bus_resp_sync = ;
endfunction

// DP SIGNALS //
function int bus_req_sig_addr;
	bus_req_sig_addr = ;
endfunction
function int bus_req_sig_data;
	bus_req_sig_data = ;
endfunction
function trans_t bus_req_sig_trans_type;
	bus_req_sig_trans_type = ;
endfunction
function ack_t bus_resp_sig_ack;
	bus_resp_sig_ack = ;
endfunction
function int bus_resp_sig_data;
	bus_resp_sig_data = ;
endfunction
function int dac_sig;
	dac_sig = ;
endfunction
function bool power_sig;
	power_sig = ;
endfunction

// VISIBLE REGISTERS //
function int Kd;
	Kd = ;
endfunction
function int Ki;
	Ki = ;
endfunction
function int Kp;
	Kp = ;
endfunction
function int deriv;
	deriv = ;
endfunction
function int error;
	error = ;
endfunction
function int integral;
	integral = ;
endfunction
function int prev_err;
	prev_err = ;
endfunction
function ack_t resp_ack;
	resp_ack = ;
endfunction
function int resp_data;
	resp_data = ;
endfunction
function int sample;
	sample = ;
endfunction
function int sample_time;
	sample_time = ;
endfunction
function int setpoint;
	setpoint = ;
endfunction
function bool setup_correct;
	setup_correct = ;
endfunction

// STATES //
function reading_0;
	reading_0 = ;
endfunction
function reading_1;
	reading_1 = ;
endfunction


////////////////////////////////////
//////////// Operations ////////////
////////////////////////////////////
sequence reset_sequence;
//DISGNER REFER TO MODEL RESET SIGNAL HERE
endsequence
property reset_p;
	reset_sequence |=>
	t ##0 reading_0() and
	t ##0 Kd() == 1 and
	t ##0 Ki() == 1 and
	t ##0 Kp() == 1 and
	t ##0 dac_sig() == 0 and
	t ##0 deriv() == 0 and
	t ##0 error() == 0 and
	t ##0 integral() == 0 and
	t ##0 prev_err() == 0 and
	t ##0 resp_ack() == err and
	t ##0 resp_data() == 0 and
	t ##0 sample() == 20 and
	t ##0 sample_time() == 10 and
	t ##0 setpoint() == 20 and
	t ##0 setup_correct() == 1 and
	t ##0 bus_req_notify() == 1 and
	t ##0 bus_resp_notify() == 0;
endproperty
reset_a: assert property (reset_p);

property reading_0_read_0_p(o);
int resp_data_0;
int sample_time_0;
int setpoint_0;
bool setup_correct_0;
int Kd_0;
int Ki_0;
int Kp_0;
int deriv_0;
int error_0;
int integral_0;
int prev_err_0;
int dac_sig_0;
int bus_req_sig_data_0;
// hold
	t ##0 hold(resp_data_0, resp_data()) and
	t ##0 hold(sample_time_0, sample_time()) and
	t ##0 hold(setpoint_0, setpoint()) and
	t ##0 hold(setup_correct_0, setup_correct()) and
	t ##0 hold(Kd_0, Kd()) and
	t ##0 hold(Ki_0, Ki()) and
	t ##0 hold(Kp_0, Kp()) and
	t ##0 hold(deriv_0, deriv()) and
	t ##0 hold(error_0, error()) and
	t ##0 hold(integral_0, integral()) and
	t ##0 hold(prev_err_0, prev_err()) and
	t ##0 hold(dac_sig_0, dac_sig()) and
	t ##0 hold(bus_req_sig_data_0, bus_req_sig_data()) and
// Conceptual State
	t ##0 reading_0() and
// trigger
	t ##0 (bus_req_sig_addr() == 0) and
	t ##0 bus_req_sync()
implies
	t_end(o) ##0 reading_1() and
	t_end(o) ##0 Kd() == Kd_0 and
	t_end(o) ##0 Ki() == Ki_0 and
	t_end(o) ##0 Kp() == Kp_0 and
	t_end(o) ##0 bus_resp_sig_ack() == ok and
	t_end(o) ##0 bus_resp_sig_data() == resp_data_0 and
	t_end(o) ##0 dac_sig() == dac_sig_0 and
	t_end(o) ##0 deriv() == deriv_0 and
	t_end(o) ##0 error() == error_0 and
	t_end(o) ##0 integral() == integral_0 and
	t_end(o) ##0 prev_err() == prev_err_0 and
	t_end(o) ##0 resp_ack() == ok and
	t_end(o) ##0 resp_data() == resp_data_0 and
	t_end(o) ##0 sample() == bus_req_sig_data_0 and
	t_end(o) ##0 sample_time() == sample_time_0 and
	t_end(o) ##0 setpoint() == setpoint_0 and
	t_end(o) ##0 setup_correct() == setup_correct_0 and
	during (next(t,1), t_end(o), bus_req_notify() == 0) and
	during_o (t, 1, t_end(o) , -1, bus_resp_notify() == 0) and
	t_end(o) ##0 bus_resp_notify() == 1;
endproperty;
reading_0_read_0_a: assert property (disable iff (reset) reading_0_read_0_p(1));// ASSIGN t_end offset here

property reading_0_read_1_p(o);
int resp_data_0;
int sample_0;
int setpoint_0;
bool setup_correct_0;
int Kd_0;
int Ki_0;
int Kp_0;
int deriv_0;
int error_0;
int integral_0;
int prev_err_0;
int dac_sig_0;
int bus_req_sig_data_0;
// hold
	t ##0 hold(resp_data_0, resp_data()) and
	t ##0 hold(sample_0, sample()) and
	t ##0 hold(setpoint_0, setpoint()) and
	t ##0 hold(setup_correct_0, setup_correct()) and
	t ##0 hold(Kd_0, Kd()) and
	t ##0 hold(Ki_0, Ki()) and
	t ##0 hold(Kp_0, Kp()) and
	t ##0 hold(deriv_0, deriv()) and
	t ##0 hold(error_0, error()) and
	t ##0 hold(integral_0, integral()) and
	t ##0 hold(prev_err_0, prev_err()) and
	t ##0 hold(dac_sig_0, dac_sig()) and
	t ##0 hold(bus_req_sig_data_0, bus_req_sig_data()) and
// Conceptual State
	t ##0 reading_0() and
// trigger
	t ##0 (bus_req_sig_addr() == 1) and
	t ##0 bus_req_sync()
implies
	t_end(o) ##0 reading_1() and
	t_end(o) ##0 Kd() == Kd_0 and
	t_end(o) ##0 Ki() == Ki_0 and
	t_end(o) ##0 Kp() == Kp_0 and
	t_end(o) ##0 bus_resp_sig_ack() == ok and
	t_end(o) ##0 bus_resp_sig_data() == resp_data_0 and
	t_end(o) ##0 dac_sig() == dac_sig_0 and
	t_end(o) ##0 deriv() == deriv_0 and
	t_end(o) ##0 error() == error_0 and
	t_end(o) ##0 integral() == integral_0 and
	t_end(o) ##0 prev_err() == prev_err_0 and
	t_end(o) ##0 resp_ack() == ok and
	t_end(o) ##0 resp_data() == resp_data_0 and
	t_end(o) ##0 sample() == sample_0 and
	t_end(o) ##0 sample_time() == bus_req_sig_data_0 and
	t_end(o) ##0 setpoint() == setpoint_0 and
	t_end(o) ##0 setup_correct() == setup_correct_0 and
	during (next(t,1), t_end(o), bus_req_notify() == 0) and
	during_o (t, 1, t_end(o) , -1, bus_resp_notify() == 0) and
	t_end(o) ##0 bus_resp_notify() == 1;
endproperty;
reading_0_read_1_a: assert property (disable iff (reset) reading_0_read_1_p(1));// ASSIGN t_end offset here

property reading_0_read_2_p(o);
int resp_data_0;
int sample_0;
int sample_time_0;
bool setup_correct_0;
int Kd_0;
int Ki_0;
int Kp_0;
int deriv_0;
int error_0;
int integral_0;
int prev_err_0;
int dac_sig_0;
int bus_req_sig_data_0;
// hold
	t ##0 hold(resp_data_0, resp_data()) and
	t ##0 hold(sample_0, sample()) and
	t ##0 hold(sample_time_0, sample_time()) and
	t ##0 hold(setup_correct_0, setup_correct()) and
	t ##0 hold(Kd_0, Kd()) and
	t ##0 hold(Ki_0, Ki()) and
	t ##0 hold(Kp_0, Kp()) and
	t ##0 hold(deriv_0, deriv()) and
	t ##0 hold(error_0, error()) and
	t ##0 hold(integral_0, integral()) and
	t ##0 hold(prev_err_0, prev_err()) and
	t ##0 hold(dac_sig_0, dac_sig()) and
	t ##0 hold(bus_req_sig_data_0, bus_req_sig_data()) and
// Conceptual State
	t ##0 reading_0() and
// trigger
	t ##0 (bus_req_sig_addr() == 2) and
	t ##0 bus_req_sync()
implies
	t_end(o) ##0 reading_1() and
	t_end(o) ##0 Kd() == Kd_0 and
	t_end(o) ##0 Ki() == Ki_0 and
	t_end(o) ##0 Kp() == Kp_0 and
	t_end(o) ##0 bus_resp_sig_ack() == ok and
	t_end(o) ##0 bus_resp_sig_data() == resp_data_0 and
	t_end(o) ##0 dac_sig() == dac_sig_0 and
	t_end(o) ##0 deriv() == deriv_0 and
	t_end(o) ##0 error() == error_0 and
	t_end(o) ##0 integral() == integral_0 and
	t_end(o) ##0 prev_err() == prev_err_0 and
	t_end(o) ##0 resp_ack() == ok and
	t_end(o) ##0 resp_data() == resp_data_0 and
	t_end(o) ##0 sample() == sample_0 and
	t_end(o) ##0 sample_time() == sample_time_0 and
	t_end(o) ##0 setpoint() == bus_req_sig_data_0 and
	t_end(o) ##0 setup_correct() == setup_correct_0 and
	during (next(t,1), t_end(o), bus_req_notify() == 0) and
	during_o (t, 1, t_end(o) , -1, bus_resp_notify() == 0) and
	t_end(o) ##0 bus_resp_notify() == 1;
endproperty;
reading_0_read_2_a: assert property (disable iff (reset) reading_0_read_2_p(1));// ASSIGN t_end offset here

property reading_0_read_3_p(o);
int resp_data_0;
int sample_0;
int sample_time_0;
int setpoint_0;
bool setup_correct_0;
int Kd_0;
int Ki_0;
int deriv_0;
int error_0;
int integral_0;
int prev_err_0;
int dac_sig_0;
int bus_req_sig_data_0;
// hold
	t ##0 hold(resp_data_0, resp_data()) and
	t ##0 hold(sample_0, sample()) and
	t ##0 hold(sample_time_0, sample_time()) and
	t ##0 hold(setpoint_0, setpoint()) and
	t ##0 hold(setup_correct_0, setup_correct()) and
	t ##0 hold(Kd_0, Kd()) and
	t ##0 hold(Ki_0, Ki()) and
	t ##0 hold(deriv_0, deriv()) and
	t ##0 hold(error_0, error()) and
	t ##0 hold(integral_0, integral()) and
	t ##0 hold(prev_err_0, prev_err()) and
	t ##0 hold(dac_sig_0, dac_sig()) and
	t ##0 hold(bus_req_sig_data_0, bus_req_sig_data()) and
// Conceptual State
	t ##0 reading_0() and
// trigger
	t ##0 (bus_req_sig_addr() == 3) and
	t ##0 bus_req_sync()
implies
	t_end(o) ##0 reading_1() and
	t_end(o) ##0 Kd() == Kd_0 and
	t_end(o) ##0 Ki() == Ki_0 and
	t_end(o) ##0 Kp() == bus_req_sig_data_0 and
	t_end(o) ##0 bus_resp_sig_ack() == ok and
	t_end(o) ##0 bus_resp_sig_data() == resp_data_0 and
	t_end(o) ##0 dac_sig() == dac_sig_0 and
	t_end(o) ##0 deriv() == deriv_0 and
	t_end(o) ##0 error() == error_0 and
	t_end(o) ##0 integral() == integral_0 and
	t_end(o) ##0 prev_err() == prev_err_0 and
	t_end(o) ##0 resp_ack() == ok and
	t_end(o) ##0 resp_data() == resp_data_0 and
	t_end(o) ##0 sample() == sample_0 and
	t_end(o) ##0 sample_time() == sample_time_0 and
	t_end(o) ##0 setpoint() == setpoint_0 and
	t_end(o) ##0 setup_correct() == setup_correct_0 and
	during (next(t,1), t_end(o), bus_req_notify() == 0) and
	during_o (t, 1, t_end(o) , -1, bus_resp_notify() == 0) and
	t_end(o) ##0 bus_resp_notify() == 1;
endproperty;
reading_0_read_3_a: assert property (disable iff (reset) reading_0_read_3_p(1));// ASSIGN t_end offset here

property reading_0_read_4_p(o);
int resp_data_0;
int sample_0;
int sample_time_0;
int setpoint_0;
bool setup_correct_0;
int Kd_0;
int Kp_0;
int deriv_0;
int error_0;
int integral_0;
int prev_err_0;
int dac_sig_0;
int bus_req_sig_data_0;
// hold
	t ##0 hold(resp_data_0, resp_data()) and
	t ##0 hold(sample_0, sample()) and
	t ##0 hold(sample_time_0, sample_time()) and
	t ##0 hold(setpoint_0, setpoint()) and
	t ##0 hold(setup_correct_0, setup_correct()) and
	t ##0 hold(Kd_0, Kd()) and
	t ##0 hold(Kp_0, Kp()) and
	t ##0 hold(deriv_0, deriv()) and
	t ##0 hold(error_0, error()) and
	t ##0 hold(integral_0, integral()) and
	t ##0 hold(prev_err_0, prev_err()) and
	t ##0 hold(dac_sig_0, dac_sig()) and
	t ##0 hold(bus_req_sig_data_0, bus_req_sig_data()) and
// Conceptual State
	t ##0 reading_0() and
// trigger
	t ##0 (bus_req_sig_addr() == 4) and
	t ##0 bus_req_sync()
implies
	t_end(o) ##0 reading_1() and
	t_end(o) ##0 Kd() == Kd_0 and
	t_end(o) ##0 Ki() == bus_req_sig_data_0 and
	t_end(o) ##0 Kp() == Kp_0 and
	t_end(o) ##0 bus_resp_sig_ack() == ok and
	t_end(o) ##0 bus_resp_sig_data() == resp_data_0 and
	t_end(o) ##0 dac_sig() == dac_sig_0 and
	t_end(o) ##0 deriv() == deriv_0 and
	t_end(o) ##0 error() == error_0 and
	t_end(o) ##0 integral() == integral_0 and
	t_end(o) ##0 prev_err() == prev_err_0 and
	t_end(o) ##0 resp_ack() == ok and
	t_end(o) ##0 resp_data() == resp_data_0 and
	t_end(o) ##0 sample() == sample_0 and
	t_end(o) ##0 sample_time() == sample_time_0 and
	t_end(o) ##0 setpoint() == setpoint_0 and
	t_end(o) ##0 setup_correct() == setup_correct_0 and
	during (next(t,1), t_end(o), bus_req_notify() == 0) and
	during_o (t, 1, t_end(o) , -1, bus_resp_notify() == 0) and
	t_end(o) ##0 bus_resp_notify() == 1;
endproperty;
reading_0_read_4_a: assert property (disable iff (reset) reading_0_read_4_p(1));// ASSIGN t_end offset here

property reading_0_read_5_p(o);
int resp_data_0;
int sample_0;
int sample_time_0;
int setpoint_0;
bool setup_correct_0;
int Ki_0;
int Kp_0;
int deriv_0;
int error_0;
int integral_0;
int prev_err_0;
int dac_sig_0;
int bus_req_sig_data_0;
// hold
	t ##0 hold(resp_data_0, resp_data()) and
	t ##0 hold(sample_0, sample()) and
	t ##0 hold(sample_time_0, sample_time()) and
	t ##0 hold(setpoint_0, setpoint()) and
	t ##0 hold(setup_correct_0, setup_correct()) and
	t ##0 hold(Ki_0, Ki()) and
	t ##0 hold(Kp_0, Kp()) and
	t ##0 hold(deriv_0, deriv()) and
	t ##0 hold(error_0, error()) and
	t ##0 hold(integral_0, integral()) and
	t ##0 hold(prev_err_0, prev_err()) and
	t ##0 hold(dac_sig_0, dac_sig()) and
	t ##0 hold(bus_req_sig_data_0, bus_req_sig_data()) and
// Conceptual State
	t ##0 reading_0() and
// trigger
	t ##0 (bus_req_sig_addr() == 5) and
	t ##0 bus_req_sync()
implies
	t_end(o) ##0 reading_1() and
	t_end(o) ##0 Kd() == bus_req_sig_data_0 and
	t_end(o) ##0 Ki() == Ki_0 and
	t_end(o) ##0 Kp() == Kp_0 and
	t_end(o) ##0 bus_resp_sig_ack() == ok and
	t_end(o) ##0 bus_resp_sig_data() == resp_data_0 and
	t_end(o) ##0 dac_sig() == dac_sig_0 and
	t_end(o) ##0 deriv() == deriv_0 and
	t_end(o) ##0 error() == error_0 and
	t_end(o) ##0 integral() == integral_0 and
	t_end(o) ##0 prev_err() == prev_err_0 and
	t_end(o) ##0 resp_ack() == ok and
	t_end(o) ##0 resp_data() == resp_data_0 and
	t_end(o) ##0 sample() == sample_0 and
	t_end(o) ##0 sample_time() == sample_time_0 and
	t_end(o) ##0 setpoint() == setpoint_0 and
	t_end(o) ##0 setup_correct() == setup_correct_0 and
	during (next(t,1), t_end(o), bus_req_notify() == 0) and
	during_o (t, 1, t_end(o) , -1, bus_resp_notify() == 0) and
	t_end(o) ##0 bus_resp_notify() == 1;
endproperty;
reading_0_read_5_a: assert property (disable iff (reset) reading_0_read_5_p(1));// ASSIGN t_end offset here

property reading_0_read_6_p(o);
int resp_data_0;
int sample_0;
int sample_time_0;
int setpoint_0;
bool setup_correct_0;
int Kd_0;
int Ki_0;
int Kp_0;
int deriv_0;
int error_0;
int integral_0;
int prev_err_0;
int dac_sig_0;
// hold
	t ##0 hold(resp_data_0, resp_data()) and
	t ##0 hold(sample_0, sample()) and
	t ##0 hold(sample_time_0, sample_time()) and
	t ##0 hold(setpoint_0, setpoint()) and
	t ##0 hold(setup_correct_0, setup_correct()) and
	t ##0 hold(Kd_0, Kd()) and
	t ##0 hold(Ki_0, Ki()) and
	t ##0 hold(Kp_0, Kp()) and
	t ##0 hold(deriv_0, deriv()) and
	t ##0 hold(error_0, error()) and
	t ##0 hold(integral_0, integral()) and
	t ##0 hold(prev_err_0, prev_err()) and
	t ##0 hold(dac_sig_0, dac_sig()) and
// Conceptual State
	t ##0 reading_0() and
// trigger
	t ##0 !((bus_req_sig_addr() == 0)) and
	t ##0 !((bus_req_sig_addr() == 1)) and
	t ##0 !((bus_req_sig_addr() == 2)) and
	t ##0 !((bus_req_sig_addr() == 3)) and
	t ##0 !((bus_req_sig_addr() == 4)) and
	t ##0 !((bus_req_sig_addr() == 5)) and
	t ##0 bus_req_sync()
implies
	t_end(o) ##0 reading_1() and
	t_end(o) ##0 Kd() == Kd_0 and
	t_end(o) ##0 Ki() == Ki_0 and
	t_end(o) ##0 Kp() == Kp_0 and
	t_end(o) ##0 bus_resp_sig_ack() == err and
	t_end(o) ##0 bus_resp_sig_data() == resp_data_0 and
	t_end(o) ##0 dac_sig() == dac_sig_0 and
	t_end(o) ##0 deriv() == deriv_0 and
	t_end(o) ##0 error() == error_0 and
	t_end(o) ##0 integral() == integral_0 and
	t_end(o) ##0 prev_err() == prev_err_0 and
	t_end(o) ##0 resp_ack() == err and
	t_end(o) ##0 resp_data() == resp_data_0 and
	t_end(o) ##0 sample() == sample_0 and
	t_end(o) ##0 sample_time() == sample_time_0 and
	t_end(o) ##0 setpoint() == setpoint_0 and
	t_end(o) ##0 setup_correct() == setup_correct_0 and
	during (next(t,1), t_end(o), bus_req_notify() == 0) and
	during_o (t, 1, t_end(o) , -1, bus_resp_notify() == 0) and
	t_end(o) ##0 bus_resp_notify() == 1;
endproperty;
reading_0_read_6_a: assert property (disable iff (reset) reading_0_read_6_p(1));// ASSIGN t_end offset here

property reading_1_write_7_p(o);
ack_t resp_ack_0;
int resp_data_0;
int sample_0;
int sample_time_0;
int setpoint_0;
bool setup_correct_0;
int Kd_0;
int Ki_0;
int Kp_0;
int deriv_0;
int error_0;
int integral_0;
int prev_err_0;
// hold
	t ##0 hold(resp_ack_0, resp_ack()) and
	t ##0 hold(resp_data_0, resp_data()) and
	t ##0 hold(sample_0, sample()) and
	t ##0 hold(sample_time_0, sample_time()) and
	t ##0 hold(setpoint_0, setpoint()) and
	t ##0 hold(setup_correct_0, setup_correct()) and
	t ##0 hold(Kd_0, Kd()) and
	t ##0 hold(Ki_0, Ki()) and
	t ##0 hold(Kp_0, Kp()) and
	t ##0 hold(deriv_0, deriv()) and
	t ##0 hold(error_0, error()) and
	t ##0 hold(integral_0, integral()) and
	t ##0 hold(prev_err_0, prev_err()) and
// Conceptual State
	t ##0 reading_1() and
// trigger
	t ##0 !((((((((((((((power_sig() && setup_correct()) && !((sample_time() <= 1))) && !((1000 <= sample_time()))) && (Kp() >= 0)) && (Kp() <= 10)) && (Ki() >= 0)) && (Ki() <= 10)) && (Kd() >= 0)) && (Kd() <= 10)) && !((setpoint() <= 0))) && !((100 <= setpoint()))) && !((10 <= (setpoint() + (-1 * sample()))))) && !((10 <= (sample() + (-1 * setpoint())))))) and
	t ##0 bus_resp_sync()
implies
	t_end(o) ##0 reading_0() and
	t_end(o) ##0 Kd() == Kd_0 and
	t_end(o) ##0 Ki() == Ki_0 and
	t_end(o) ##0 Kp() == Kp_0 and
	t_end(o) ##0 dac_sig() == 0 and
	t_end(o) ##0 deriv() == deriv_0 and
	t_end(o) ##0 error() == error_0 and
	t_end(o) ##0 integral() == integral_0 and
	t_end(o) ##0 prev_err() == prev_err_0 and
	t_end(o) ##0 resp_ack() == resp_ack_0 and
	t_end(o) ##0 resp_data() == resp_data_0 and
	t_end(o) ##0 sample() == sample_0 and
	t_end(o) ##0 sample_time() == sample_time_0 and
	t_end(o) ##0 setpoint() == setpoint_0 and
	t_end(o) ##0 setup_correct() == ((((((((((((setup_correct_0 && !((sample_time_0 <= 1))) && !((1000 <= sample_time_0))) && (Kp_0 >= 0)) && (Kp_0 <= 10)) && (Ki_0 >= 0)) && (Ki_0 <= 10)) && (Kd_0 >= 0)) && (Kd_0 <= 10)) && !((setpoint_0 <= 0))) && !((100 <= setpoint_0))) && !((10 <= (setpoint_0 + (-1 * sample_0))))) && !((10 <= (sample_0 + (-1 * setpoint_0))))) and
	during_o (t, 1, t_end(o) , -1, bus_req_notify() == 0) and
	t_end(o) ##0 bus_req_notify() == 1 and
	during (next(t,1), t_end(o), bus_resp_notify() == 0);
endproperty;
reading_1_write_7_a: assert property (disable iff (reset) reading_1_write_7_p(1));// ASSIGN t_end offset here

property reading_1_write_8_p(o);
ack_t resp_ack_0;
int resp_data_0;
int sample_0;
int sample_time_0;
int setpoint_0;
bool setup_correct_0;
int Kd_0;
int Ki_0;
int Kp_0;
int deriv_0;
int error_0;
int integral_0;
int prev_err_0;
// hold
	t ##0 hold(resp_ack_0, resp_ack()) and
	t ##0 hold(resp_data_0, resp_data()) and
	t ##0 hold(sample_0, sample()) and
	t ##0 hold(sample_time_0, sample_time()) and
	t ##0 hold(setpoint_0, setpoint()) and
	t ##0 hold(setup_correct_0, setup_correct()) and
	t ##0 hold(Kd_0, Kd()) and
	t ##0 hold(Ki_0, Ki()) and
	t ##0 hold(Kp_0, Kp()) and
	t ##0 hold(deriv_0, deriv()) and
	t ##0 hold(error_0, error()) and
	t ##0 hold(integral_0, integral()) and
	t ##0 hold(prev_err_0, prev_err()) and
// Conceptual State
	t ##0 reading_1() and
// trigger
	t ##0 power_sig() and
	t ##0 setup_correct() and
	t ##0 ((integral() + (sample_time() * (setpoint() + (-1 * sample())))) >= -65535) and
	t ##0 ((integral() + (sample_time() * (setpoint() + (-1 * sample())))) <= 65535) and
	t ##0 (sample_time() >= 2) and
	t ##0 (sample_time() <= 999) and
	t ##0 (Kp() >= 0) and
	t ##0 (Kp() <= 10) and
	t ##0 (Ki() >= 0) and
	t ##0 (Ki() <= 10) and
	t ##0 (Kd() >= 0) and
	t ##0 (Kd() <= 10) and
	t ##0 (setpoint() >= 1) and
	t ##0 (setpoint() <= 99) and
	t ##0 ((setpoint() + (-1 * sample())) <= 9) and
	t ##0 ((sample() + (-1 * setpoint())) <= 9) and
	t ##0 bus_resp_sync()
implies
	t_end(o) ##0 reading_0() and
	t_end(o) ##0 Kd() == Kd_0 and
	t_end(o) ##0 Ki() == Ki_0 and
	t_end(o) ##0 Kp() == Kp_0 and
	t_end(o) ##0 dac_sig() == (((Kp_0 * error_0) + (Ki_0 * integral_0)) + (Kd_0 * deriv_0)) and
	t_end(o) ##0 deriv() == (((setpoint_0 + (-1 * sample_0)) + (-1 * prev_err_0)) / sample_time_0) and
	t_end(o) ##0 error() == (setpoint_0 + (-1 * sample_0)) and
	t_end(o) ##0 integral() == (integral_0 + (sample_time_0 * (setpoint_0 + (-1 * sample_0)))) and
	t_end(o) ##0 prev_err() == (setpoint_0 + (-1 * sample_0)) and
	t_end(o) ##0 resp_ack() == resp_ack_0 and
	t_end(o) ##0 resp_data() == resp_data_0 and
	t_end(o) ##0 sample() == sample_0 and
	t_end(o) ##0 sample_time() == sample_time_0 and
	t_end(o) ##0 setpoint() == setpoint_0 and
	t_end(o) ##0 setup_correct() == ((((((((((((setup_correct_0 && !((sample_time_0 <= 1))) && !((1000 <= sample_time_0))) && (Kp_0 >= 0)) && (Kp_0 <= 10)) && (Ki_0 >= 0)) && (Ki_0 <= 10)) && (Kd_0 >= 0)) && (Kd_0 <= 10)) && !((setpoint_0 <= 0))) && !((100 <= setpoint_0))) && !((10 <= (setpoint_0 + (-1 * sample_0))))) && !((10 <= (sample_0 + (-1 * setpoint_0))))) and
	during_o (t, 1, t_end(o) , -1, bus_req_notify() == 0) and
	t_end(o) ##0 bus_req_notify() == 1 and
	during (next(t,1), t_end(o), bus_resp_notify() == 0);
endproperty;
reading_1_write_8_a: assert property (disable iff (reset) reading_1_write_8_p(1));// ASSIGN t_end offset here

property reading_1_write_9_p(o);
ack_t resp_ack_0;
int resp_data_0;
int sample_0;
int sample_time_0;
int setpoint_0;
bool setup_correct_0;
int Kd_0;
int Ki_0;
int Kp_0;
int deriv_0;
int error_0;
int integral_0;
int prev_err_0;
// hold
	t ##0 hold(resp_ack_0, resp_ack()) and
	t ##0 hold(resp_data_0, resp_data()) and
	t ##0 hold(sample_0, sample()) and
	t ##0 hold(sample_time_0, sample_time()) and
	t ##0 hold(setpoint_0, setpoint()) and
	t ##0 hold(setup_correct_0, setup_correct()) and
	t ##0 hold(Kd_0, Kd()) and
	t ##0 hold(Ki_0, Ki()) and
	t ##0 hold(Kp_0, Kp()) and
	t ##0 hold(deriv_0, deriv()) and
	t ##0 hold(error_0, error()) and
	t ##0 hold(integral_0, integral()) and
	t ##0 hold(prev_err_0, prev_err()) and
// Conceptual State
	t ##0 reading_1() and
// trigger
	t ##0 power_sig() and
	t ##0 setup_correct() and
	t ##0 ((integral() + (sample_time() * (setpoint() + (-1 * sample())))) >= 65536) and
	t ##0 (sample_time() >= 2) and
	t ##0 (sample_time() <= 999) and
	t ##0 (Kp() >= 0) and
	t ##0 (Kp() <= 10) and
	t ##0 (Ki() >= 0) and
	t ##0 (Ki() <= 10) and
	t ##0 (Kd() >= 0) and
	t ##0 (Kd() <= 10) and
	t ##0 (setpoint() >= 1) and
	t ##0 (setpoint() <= 99) and
	t ##0 ((setpoint() + (-1 * sample())) <= 9) and
	t ##0 ((sample() + (-1 * setpoint())) <= 9) and
	t ##0 bus_resp_sync()
implies
	t_end(o) ##0 reading_0() and
	t_end(o) ##0 Kd() == Kd_0 and
	t_end(o) ##0 Ki() == Ki_0 and
	t_end(o) ##0 Kp() == Kp_0 and
	t_end(o) ##0 dac_sig() == (((Kp_0 * error_0) + (Ki_0 * integral_0)) + (Kd_0 * deriv_0)) and
	t_end(o) ##0 deriv() == (((setpoint_0 + (-1 * sample_0)) + (-1 * prev_err_0)) / sample_time_0) and
	t_end(o) ##0 error() == (setpoint_0 + (-1 * sample_0)) and
	t_end(o) ##0 integral() == 65535 and
	t_end(o) ##0 prev_err() == (setpoint_0 + (-1 * sample_0)) and
	t_end(o) ##0 resp_ack() == resp_ack_0 and
	t_end(o) ##0 resp_data() == resp_data_0 and
	t_end(o) ##0 sample() == sample_0 and
	t_end(o) ##0 sample_time() == sample_time_0 and
	t_end(o) ##0 setpoint() == setpoint_0 and
	t_end(o) ##0 setup_correct() == ((((((((((((setup_correct_0 && !((sample_time_0 <= 1))) && !((1000 <= sample_time_0))) && (Kp_0 >= 0)) && (Kp_0 <= 10)) && (Ki_0 >= 0)) && (Ki_0 <= 10)) && (Kd_0 >= 0)) && (Kd_0 <= 10)) && !((setpoint_0 <= 0))) && !((100 <= setpoint_0))) && !((10 <= (setpoint_0 + (-1 * sample_0))))) && !((10 <= (sample_0 + (-1 * setpoint_0))))) and
	during_o (t, 1, t_end(o) , -1, bus_req_notify() == 0) and
	t_end(o) ##0 bus_req_notify() == 1 and
	during (next(t,1), t_end(o), bus_resp_notify() == 0);
endproperty;
reading_1_write_9_a: assert property (disable iff (reset) reading_1_write_9_p(1));// ASSIGN t_end offset here

property reading_1_write_10_p(o);
ack_t resp_ack_0;
int resp_data_0;
int sample_0;
int sample_time_0;
int setpoint_0;
bool setup_correct_0;
int Kd_0;
int Ki_0;
int Kp_0;
int deriv_0;
int error_0;
int integral_0;
int prev_err_0;
// hold
	t ##0 hold(resp_ack_0, resp_ack()) and
	t ##0 hold(resp_data_0, resp_data()) and
	t ##0 hold(sample_0, sample()) and
	t ##0 hold(sample_time_0, sample_time()) and
	t ##0 hold(setpoint_0, setpoint()) and
	t ##0 hold(setup_correct_0, setup_correct()) and
	t ##0 hold(Kd_0, Kd()) and
	t ##0 hold(Ki_0, Ki()) and
	t ##0 hold(Kp_0, Kp()) and
	t ##0 hold(deriv_0, deriv()) and
	t ##0 hold(error_0, error()) and
	t ##0 hold(integral_0, integral()) and
	t ##0 hold(prev_err_0, prev_err()) and
// Conceptual State
	t ##0 reading_1() and
// trigger
	t ##0 power_sig() and
	t ##0 setup_correct() and
	t ##0 ((integral() + (sample_time() * (setpoint() + (-1 * sample())))) <= -65536) and
	t ##0 (sample_time() >= 2) and
	t ##0 (sample_time() <= 999) and
	t ##0 (Kp() >= 0) and
	t ##0 (Kp() <= 10) and
	t ##0 (Ki() >= 0) and
	t ##0 (Ki() <= 10) and
	t ##0 (Kd() >= 0) and
	t ##0 (Kd() <= 10) and
	t ##0 (setpoint() >= 1) and
	t ##0 (setpoint() <= 99) and
	t ##0 ((setpoint() + (-1 * sample())) <= 9) and
	t ##0 ((sample() + (-1 * setpoint())) <= 9) and
	t ##0 bus_resp_sync()
implies
	t_end(o) ##0 reading_0() and
	t_end(o) ##0 Kd() == Kd_0 and
	t_end(o) ##0 Ki() == Ki_0 and
	t_end(o) ##0 Kp() == Kp_0 and
	t_end(o) ##0 dac_sig() == (((Kp_0 * error_0) + (Ki_0 * integral_0)) + (Kd_0 * deriv_0)) and
	t_end(o) ##0 deriv() == (((setpoint_0 + (-1 * sample_0)) + (-1 * prev_err_0)) / sample_time_0) and
	t_end(o) ##0 error() == (setpoint_0 + (-1 * sample_0)) and
	t_end(o) ##0 integral() == -65535 and
	t_end(o) ##0 prev_err() == (setpoint_0 + (-1 * sample_0)) and
	t_end(o) ##0 resp_ack() == resp_ack_0 and
	t_end(o) ##0 resp_data() == resp_data_0 and
	t_end(o) ##0 sample() == sample_0 and
	t_end(o) ##0 sample_time() == sample_time_0 and
	t_end(o) ##0 setpoint() == setpoint_0 and
	t_end(o) ##0 setup_correct() == ((((((((((((setup_correct_0 && !((sample_time_0 <= 1))) && !((1000 <= sample_time_0))) && (Kp_0 >= 0)) && (Kp_0 <= 10)) && (Ki_0 >= 0)) && (Ki_0 <= 10)) && (Kd_0 >= 0)) && (Kd_0 <= 10)) && !((setpoint_0 <= 0))) && !((100 <= setpoint_0))) && !((10 <= (setpoint_0 + (-1 * sample_0))))) && !((10 <= (sample_0 + (-1 * setpoint_0))))) and
	during_o (t, 1, t_end(o) , -1, bus_req_notify() == 0) and
	t_end(o) ##0 bus_req_notify() == 1 and
	during (next(t,1), t_end(o), bus_resp_notify() == 0);
endproperty;
reading_1_write_10_a: assert property (disable iff (reset) reading_1_write_10_p(1));// ASSIGN t_end offset here


property wait_reading_0_p;
ack_t resp_ack_0;
int resp_data_0;
int sample_0;
int sample_time_0;
int setpoint_0;
bool setup_correct_0;
int Kd_0;
int Ki_0;
int Kp_0;
int deriv_0;
int error_0;
int integral_0;
int prev_err_0;
int dac_sig_0;
// hold
	t ##0 hold(resp_ack_0, resp_ack()) and
	t ##0 hold(resp_data_0, resp_data()) and
	t ##0 hold(sample_0, sample()) and
	t ##0 hold(sample_time_0, sample_time()) and
	t ##0 hold(setpoint_0, setpoint()) and
	t ##0 hold(setup_correct_0, setup_correct()) and
	t ##0 hold(Kd_0, Kd()) and
	t ##0 hold(Ki_0, Ki()) and
	t ##0 hold(Kp_0, Kp()) and
	t ##0 hold(deriv_0, deriv()) and
	t ##0 hold(error_0, error()) and
	t ##0 hold(integral_0, integral()) and
	t ##0 hold(prev_err_0, prev_err()) and
	t ##0 hold(dac_sig_0, dac_sig()) and
// Conceptual State
	t ##0 reading_0() and
// trigger
	t ##0 !(bus_req_sync())
implies
	t ##1 reading_0() and
	t ##1 Kd() == Kd_0 and
	t ##1 Ki() == Ki_0 and
	t ##1 Kp() == Kp_0 and
	t ##1 dac_sig() == dac_sig_0 and
	t ##1 deriv() == deriv_0 and
	t ##1 error() == error_0 and
	t ##1 integral() == integral_0 and
	t ##1 prev_err() == prev_err_0 and
	t ##1 resp_ack() == resp_ack_0 and
	t ##1 resp_data() == resp_data_0 and
	t ##1 sample() == sample_0 and
	t ##1 sample_time() == sample_time_0 and
	t ##1 setpoint() == setpoint_0 and
	t ##1 setup_correct() == setup_correct_0 and
	t ##1 bus_req_notify() == 1 and
	t ##1 bus_resp_notify() == 0;
endproperty;
wait_reading_0_a: assert property (disable iff (reset) wait_reading_0_p);


property wait_reading_1_p;
ack_t resp_ack_0;
int resp_data_0;
int sample_0;
int sample_time_0;
int setpoint_0;
bool setup_correct_0;
int Kd_0;
int Ki_0;
int Kp_0;
int deriv_0;
int error_0;
int integral_0;
int prev_err_0;
int dac_sig_0;
// hold
	t ##0 hold(resp_ack_0, resp_ack()) and
	t ##0 hold(resp_data_0, resp_data()) and
	t ##0 hold(sample_0, sample()) and
	t ##0 hold(sample_time_0, sample_time()) and
	t ##0 hold(setpoint_0, setpoint()) and
	t ##0 hold(setup_correct_0, setup_correct()) and
	t ##0 hold(Kd_0, Kd()) and
	t ##0 hold(Ki_0, Ki()) and
	t ##0 hold(Kp_0, Kp()) and
	t ##0 hold(deriv_0, deriv()) and
	t ##0 hold(error_0, error()) and
	t ##0 hold(integral_0, integral()) and
	t ##0 hold(prev_err_0, prev_err()) and
	t ##0 hold(dac_sig_0, dac_sig()) and
// Conceptual State
	t ##0 reading_1() and
// trigger
	t ##0 !(bus_resp_sync())
implies
	t ##1 reading_1() and
	t ##1 Kd() == Kd_0 and
	t ##1 Ki() == Ki_0 and
	t ##1 Kp() == Kp_0 and
	t ##1 bus_resp_sig_ack() == resp_ack_0 and
	t ##1 bus_resp_sig_data() == resp_data_0 and
	t ##1 dac_sig() == dac_sig_0 and
	t ##1 deriv() == deriv_0 and
	t ##1 error() == error_0 and
	t ##1 integral() == integral_0 and
	t ##1 prev_err() == prev_err_0 and
	t ##1 resp_ack() == resp_ack_0 and
	t ##1 resp_data() == resp_data_0 and
	t ##1 sample() == sample_0 and
	t ##1 sample_time() == sample_time_0 and
	t ##1 setpoint() == setpoint_0 and
	t ##1 setup_correct() == setup_correct_0 and
	t ##1 bus_req_notify() == 0 and
	t ##1 bus_resp_notify() == 1;
endproperty;
wait_reading_1_a: assert property (disable iff (reset) wait_reading_1_p);

endmodule

//DESIGNER SHOULD PAY ATTENTION FOR USING THE MODEL CORRECT NAME FOR BINDING AND TO REFER TO THE RESET SIGNAL USED IN IT
bind PID_Actuator PID_Actuator_verification inst (.*, .reset());
