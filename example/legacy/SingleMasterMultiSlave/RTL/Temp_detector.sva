// required terminology
`define next_shift_amount 0 //IN CASE OF REQUIRED SIGNALS VALUES IN THE FUTURE, SHIFT YOUR ENTIRE TIMING BY THIS FACTOR

sequence hold(l, e);
	(l===e, l=e);
endsequence

sequence t;
	##`next_shift_amount 1'b1;
endsequence

sequence t_end(offset);
	t ##offset 1'b1;
endsequence

sequence next(timepoint, offset);
	timepoint ##offset 1'b1;
endsequence

property during(t1, t2, se);
	(t1 ##0 se[*0:$] intersect t2) or
	(t1 intersect t2 ##[1:$] 1'b1);
endproperty

property during_limited(t1, t2, off, se);
	(t1 ##0 se[*0:$] ##off 1'b1 intersect t2) or
	(next(t1, off) intersect t2 ##[1:$] 1'b1);
endproperty

property during_o(t1, o1, t2, o2, se);
	if (o2 >= 0)
		during(next(t1, o1), next(t2, (o2<0) ? 0 : o2), se)
	else
		during_limited(next(t1, o1), t2, (o2>0) ? 0 : -o2, se);
endproperty
// end of ipc_sva

import scam_model_types::*;

module Temp_detector_verification(reset);

input reset;

//DESIGNER SHOULD PAY ATTENTION FOR USING THE MODEL CORRECT NAME TO REFER TO THE CLK SIGNAL USED IN IT
default clocking default_clk @(posedge Temp_detector.clk); endclocking

// SYNC AND NOTIFY SIGNALS (1-cycle macros) //
function sample_event_notify;
	sample_event_notify = ;
endfunction
function sample_event_sync;
	sample_event_sync = ;
endfunction

// DP SIGNALS //
function int adc_in_sig;
	adc_in_sig = ;
endfunction
function bool sample_event_sig;
	sample_event_sig = ;
endfunction
function int temp_out_sig;
	temp_out_sig = ;
endfunction

// VISIBLE REGISTERS //
function int avg_temp_last;
	avg_temp_last = ;
endfunction
function int measured_sum_ok;
	measured_sum_ok = ;
endfunction
function int sample_cnt;
	sample_cnt = ;
endfunction
function int sample_cnt_ok;
	sample_cnt_ok = ;
endfunction

// STATES //
function MEASURE_0;
	MEASURE_0 = ;
endfunction


////////////////////////////////////
//////////// Operations ////////////
////////////////////////////////////
sequence reset_sequence;
//DISGNER REFER TO MODEL RESET SIGNAL HERE
endsequence
property reset_p;
	reset_sequence |=>
	t ##0 MEASURE_0() and
	t ##0 avg_temp_last() == 20 and
	t ##0 measured_sum_ok() == 0 and
	t ##0 sample_cnt() == 0 and
	t ##0 sample_cnt_ok() == 0 and
	t ##0 temp_out_sig() == 20 and
	t ##0 sample_event_notify() == 1;
endproperty
reset_a: assert property (reset_p);

property MEASURE_0_read_0_p(o);
int avg_temp_last_0;
int measured_sum_ok_0;
int sample_cnt_0;
int sample_cnt_ok_0;
int temp_out_sig_0;
// hold
	t ##0 hold(avg_temp_last_0, avg_temp_last()) and
	t ##0 hold(measured_sum_ok_0, measured_sum_ok()) and
	t ##0 hold(sample_cnt_0, sample_cnt()) and
	t ##0 hold(sample_cnt_ok_0, sample_cnt_ok()) and
	t ##0 hold(temp_out_sig_0, temp_out_sig()) and
// Conceptual State
	t ##0 MEASURE_0() and
// trigger
	t ##0 !((((!((adc_in_sig() <= 0)) && !((40 <= adc_in_sig()))) && !((10 <= (avg_temp_last() + (-1 * adc_in_sig()))))) && !((10 <= (adc_in_sig() + (-1 * avg_temp_last())))))) and
	t ##0 !((sample_cnt() == 15)) and
	t ##0 sample_event_sync()
implies
	t_end(o) ##0 MEASURE_0() and
	t_end(o) ##0 avg_temp_last() == avg_temp_last_0 and
	t_end(o) ##0 measured_sum_ok() == measured_sum_ok_0 and
	t_end(o) ##0 sample_cnt() == (1 + sample_cnt_0) and
	t_end(o) ##0 sample_cnt_ok() == sample_cnt_ok_0 and
	t_end(o) ##0 temp_out_sig() == temp_out_sig_0 and
	during_o (t, 1, t_end(o) , -1, sample_event_notify() == 0) and
	t_end(o) ##0 sample_event_notify() == 1;
endproperty;
MEASURE_0_read_0_a: assert property (disable iff (reset) MEASURE_0_read_0_p(1));// ASSIGN t_end offset here

property MEASURE_0_read_1_p(o);
int avg_temp_last_0;
int measured_sum_ok_0;
int sample_cnt_0;
int sample_cnt_ok_0;
int temp_out_sig_0;
int adc_in_sig_0;
// hold
	t ##0 hold(avg_temp_last_0, avg_temp_last()) and
	t ##0 hold(measured_sum_ok_0, measured_sum_ok()) and
	t ##0 hold(sample_cnt_0, sample_cnt()) and
	t ##0 hold(sample_cnt_ok_0, sample_cnt_ok()) and
	t ##0 hold(temp_out_sig_0, temp_out_sig()) and
	t ##0 hold(adc_in_sig_0, adc_in_sig()) and
// Conceptual State
	t ##0 MEASURE_0() and
// trigger
	t ##0 !((sample_cnt() == 15)) and
	t ##0 (adc_in_sig() >= 1) and
	t ##0 (adc_in_sig() <= 39) and
	t ##0 ((avg_temp_last() + (-1 * adc_in_sig())) <= 9) and
	t ##0 ((adc_in_sig() + (-1 * avg_temp_last())) <= 9) and
	t ##0 sample_event_sync()
implies
	t_end(o) ##0 MEASURE_0() and
	t_end(o) ##0 avg_temp_last() == avg_temp_last_0 and
	t_end(o) ##0 measured_sum_ok() == (measured_sum_ok_0 + adc_in_sig_0) and
	t_end(o) ##0 sample_cnt() == (1 + sample_cnt_0) and
	t_end(o) ##0 sample_cnt_ok() == (1 + sample_cnt_ok_0) and
	t_end(o) ##0 temp_out_sig() == temp_out_sig_0 and
	during_o (t, 1, t_end(o) , -1, sample_event_notify() == 0) and
	t_end(o) ##0 sample_event_notify() == 1;
endproperty;
MEASURE_0_read_1_a: assert property (disable iff (reset) MEASURE_0_read_1_p(1));// ASSIGN t_end offset here

property MEASURE_0_read_2_p(o);
int avg_temp_last_0;
// hold
	t ##0 hold(avg_temp_last_0, avg_temp_last()) and
// Conceptual State
	t ##0 MEASURE_0() and
// trigger
	t ##0 !((((!((adc_in_sig() <= 0)) && !((40 <= adc_in_sig()))) && !((10 <= (avg_temp_last() + (-1 * adc_in_sig()))))) && !((10 <= (adc_in_sig() + (-1 * avg_temp_last())))))) and
	t ##0 (sample_cnt() == 15) and
	t ##0 (sample_cnt_ok() <= 10) and
	t ##0 sample_event_sync()
implies
	t_end(o) ##0 MEASURE_0() and
	t_end(o) ##0 avg_temp_last() == avg_temp_last_0 and
	t_end(o) ##0 measured_sum_ok() == 0 and
	t_end(o) ##0 sample_cnt() == 0 and
	t_end(o) ##0 sample_cnt_ok() == 0 and
	t_end(o) ##0 temp_out_sig() == avg_temp_last_0 and
	during_o (t, 1, t_end(o) , -1, sample_event_notify() == 0) and
	t_end(o) ##0 sample_event_notify() == 1;
endproperty;
MEASURE_0_read_2_a: assert property (disable iff (reset) MEASURE_0_read_2_p(1));// ASSIGN t_end offset here

property MEASURE_0_read_3_p(o);
int measured_sum_ok_0;
int sample_cnt_ok_0;
// hold
	t ##0 hold(measured_sum_ok_0, measured_sum_ok()) and
	t ##0 hold(sample_cnt_ok_0, sample_cnt_ok()) and
// Conceptual State
	t ##0 MEASURE_0() and
// trigger
	t ##0 !((((!((adc_in_sig() <= 0)) && !((40 <= adc_in_sig()))) && !((10 <= (avg_temp_last() + (-1 * adc_in_sig()))))) && !((10 <= (adc_in_sig() + (-1 * avg_temp_last())))))) and
	t ##0 (sample_cnt() == 15) and
	t ##0 (sample_cnt_ok() >= 11) and
	t ##0 sample_event_sync()
implies
	t_end(o) ##0 MEASURE_0() and
	t_end(o) ##0 avg_temp_last() == (measured_sum_ok_0 / sample_cnt_ok_0) and
	t_end(o) ##0 measured_sum_ok() == 0 and
	t_end(o) ##0 sample_cnt() == 0 and
	t_end(o) ##0 sample_cnt_ok() == 0 and
	t_end(o) ##0 temp_out_sig() == (measured_sum_ok_0 / sample_cnt_ok_0) and
	during_o (t, 1, t_end(o) , -1, sample_event_notify() == 0) and
	t_end(o) ##0 sample_event_notify() == 1;
endproperty;
MEASURE_0_read_3_a: assert property (disable iff (reset) MEASURE_0_read_3_p(1));// ASSIGN t_end offset here

property MEASURE_0_read_4_p(o);
int avg_temp_last_0;
// hold
	t ##0 hold(avg_temp_last_0, avg_temp_last()) and
// Conceptual State
	t ##0 MEASURE_0() and
// trigger
	t ##0 (adc_in_sig() >= 1) and
	t ##0 (adc_in_sig() <= 39) and
	t ##0 ((avg_temp_last() + (-1 * adc_in_sig())) <= 9) and
	t ##0 ((adc_in_sig() + (-1 * avg_temp_last())) <= 9) and
	t ##0 (sample_cnt() == 15) and
	t ##0 (sample_cnt_ok() <= 9) and
	t ##0 sample_event_sync()
implies
	t_end(o) ##0 MEASURE_0() and
	t_end(o) ##0 avg_temp_last() == avg_temp_last_0 and
	t_end(o) ##0 measured_sum_ok() == 0 and
	t_end(o) ##0 sample_cnt() == 0 and
	t_end(o) ##0 sample_cnt_ok() == 0 and
	t_end(o) ##0 temp_out_sig() == avg_temp_last_0 and
	during_o (t, 1, t_end(o) , -1, sample_event_notify() == 0) and
	t_end(o) ##0 sample_event_notify() == 1;
endproperty;
MEASURE_0_read_4_a: assert property (disable iff (reset) MEASURE_0_read_4_p(1));// ASSIGN t_end offset here

property MEASURE_0_read_5_p(o);
int measured_sum_ok_0;
int sample_cnt_ok_0;
int adc_in_sig_0;
// hold
	t ##0 hold(measured_sum_ok_0, measured_sum_ok()) and
	t ##0 hold(sample_cnt_ok_0, sample_cnt_ok()) and
	t ##0 hold(adc_in_sig_0, adc_in_sig()) and
// Conceptual State
	t ##0 MEASURE_0() and
// trigger
	t ##0 (adc_in_sig() >= 1) and
	t ##0 (adc_in_sig() <= 39) and
	t ##0 ((avg_temp_last() + (-1 * adc_in_sig())) <= 9) and
	t ##0 ((adc_in_sig() + (-1 * avg_temp_last())) <= 9) and
	t ##0 (sample_cnt() == 15) and
	t ##0 (sample_cnt_ok() >= 10) and
	t ##0 sample_event_sync()
implies
	t_end(o) ##0 MEASURE_0() and
	t_end(o) ##0 avg_temp_last() == ((measured_sum_ok_0 + adc_in_sig_0) / (1 + sample_cnt_ok_0)) and
	t_end(o) ##0 measured_sum_ok() == 0 and
	t_end(o) ##0 sample_cnt() == 0 and
	t_end(o) ##0 sample_cnt_ok() == 0 and
	t_end(o) ##0 temp_out_sig() == ((measured_sum_ok_0 + adc_in_sig_0) / (1 + sample_cnt_ok_0)) and
	during_o (t, 1, t_end(o) , -1, sample_event_notify() == 0) and
	t_end(o) ##0 sample_event_notify() == 1;
endproperty;
MEASURE_0_read_5_a: assert property (disable iff (reset) MEASURE_0_read_5_p(1));// ASSIGN t_end offset here


property wait_MEASURE_0_p;
int avg_temp_last_0;
int measured_sum_ok_0;
int sample_cnt_0;
int sample_cnt_ok_0;
int temp_out_sig_0;
// hold
	t ##0 hold(avg_temp_last_0, avg_temp_last()) and
	t ##0 hold(measured_sum_ok_0, measured_sum_ok()) and
	t ##0 hold(sample_cnt_0, sample_cnt()) and
	t ##0 hold(sample_cnt_ok_0, sample_cnt_ok()) and
	t ##0 hold(temp_out_sig_0, temp_out_sig()) and
// Conceptual State
	t ##0 MEASURE_0() and
// trigger
	t ##0 !(sample_event_sync())
implies
	t ##1 MEASURE_0() and
	t ##1 avg_temp_last() == avg_temp_last_0 and
	t ##1 measured_sum_ok() == measured_sum_ok_0 and
	t ##1 sample_cnt() == sample_cnt_0 and
	t ##1 sample_cnt_ok() == sample_cnt_ok_0 and
	t ##1 temp_out_sig() == temp_out_sig_0 and
	t ##1 sample_event_notify() == 1;
endproperty;
wait_MEASURE_0_a: assert property (disable iff (reset) wait_MEASURE_0_p);

endmodule

//DESIGNER SHOULD PAY ATTENTION FOR USING THE MODEL CORRECT NAME FOR BINDING AND TO REFER TO THE RESET SIGNAL USED IN IT
bind Temp_detector Temp_detector_verification inst (.*, .reset());
