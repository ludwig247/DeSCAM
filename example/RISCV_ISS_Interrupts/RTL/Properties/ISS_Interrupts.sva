// DATA TYPES //
typedef enum {ALU_ADD, ALU_AND, ALU_COPY1, ALU_OR, ALU_SLL, ALU_SLT, ALU_SLTU, ALU_SRA, ALU_SRL, ALU_SUB, ALU_X, ALU_XOR} ALUfuncType;
typedef enum {ENC_B, ENC_ERR, ENC_I_I, ENC_I_J, ENC_I_L, ENC_I_M, ENC_I_S, ENC_J, ENC_R, ENC_S, ENC_U} EncType;
typedef enum {INSTR_ADD, INSTR_ADDI, INSTR_AND, INSTR_ANDI, INSTR_AUIPC, INSTR_BEQ, INSTR_BGE, INSTR_BGEU, INSTR_BLT, INSTR_BLTU, INSTR_BNE, INSTR_CSRRC, INSTR_CSRRCI, INSTR_CSRRS, INSTR_CSRRSI, INSTR_CSRRW, INSTR_CSRRWI, INSTR_FENCE, INSTR_FENCEI, INSTR_JAL, INSTR_JALR, INSTR_LB, INSTR_LBU, INSTR_LH, INSTR_LHU, INSTR_LUI, INSTR_LW, INSTR_OR, INSTR_ORI, INSTR_PRIV, INSTR_SB, INSTR_SH, INSTR_SLL, INSTR_SLLI, INSTR_SLT, INSTR_SLTI, INSTR_SLTU, INSTR_SLTUI, INSTR_SRA, INSTR_SRAI, INSTR_SRL, INSTR_SRLI, INSTR_SUB, INSTR_SW, INSTR_UNKNOWN, INSTR_XOR, INSTR_XORI} InstrType_Complete;
typedef enum {ME_RD, ME_WR, ME_X} ME_AccessType;
typedef enum {MT_B, MT_BU, MT_H, MT_HU, MT_W, MT_X} ME_MaskType;
typedef enum {INSTR_EBREAK, INSTR_ECALL, INSTR_MRET, INSTR_PRIV_UNKNOWN} PrivInstrType;

`define next_shift_amount 0 //IN CASE OF REQUIRED SIGNALS VALUES IN THE FUTURE, SHIFT YOUR ENTIRE TIMING BY THIS FACTOR

`include "ipc.sva"
`include "ISS_Interrupts_functions.sva"

import top_level_types::*;
import iss_interrupts_types::*;

module ISS_Interrupts_verification(reset);

input reset;

//DESIGNER SHOULD PAY ATTENTION FOR USING THE MODEL CORRECT NAME TO REFER TO THE CLK SIGNAL USED IN IT
default clocking default_clk @(posedge ISS_Interrupts.clk); endclocking
`include "ISS_Interrupts_macros.sva"

////////////////////////////////////
//////////// Operations ////////////
////////////////////////////////////

sequence reset_sequence;
reset ##1 !reset;  	//DESIGNER REFER TO MODEL RESET SIGNAL HERE
endsequence

property reset_p;
	reset_sequence |->
	t##0 FETCH_REQ_1() and
	t##0 csrfile_mcause() == 0 and
	t##0 csrfile_mepc() == 0 and
	t##0 csrfile_mie() == 0 and
	t##0 csrfile_mip() == 0 and
	t##0 csrfile_mstatus() == 0 and
	t##0 csrfile_mtvec() == 0 and
	t##0 pcReg() == 0 and
	t##0 regfileWrite_dst() == 0 and
	t##0 regfileWrite_dstData() == 0 and
	t##0 toMemoryPort_sig_addrIn() == 0 and
	t##0 toMemoryPort_sig_dataIn() == 0 and
	t##0 toMemoryPort_sig_mask() == MT_W and
	t##0 toMemoryPort_sig_req() == ME_RD and
	t##0 ecall_isa_Port_notify() == 0 and
	t##0 fromMemoryPort_notify() == 0 and
	t##0 isa_ecall_Port_notify() == 0 and
	t##0 toMemoryPort_notify() == 1 and
	t##0 toRegsPort_notify() == 0;
endproperty
reset_a: assert property (reset_p);



property ECALL_DONE_7_35_p(o);
 bit[31:0] csrfile_mcause_0;
 bit[31:0] csrfile_mepc_0;
 bit[31:0] csrfile_mie_0;
 bit[31:0] csrfile_mstatus_0;
 bit[31:0] csrfile_mtvec_0;
 bit[31:0] mip_isa_Port_sig_0;
 bit[31:0] pcReg_0;
 bit[31:0] regfileWrite_dst_0;
 bit[31:0] regfileWrite_dstData_0;
	t ##0 hold(csrfile_mcause_0, csrfile_mcause()) and
	t ##0 hold(csrfile_mepc_0, csrfile_mepc()) and
	t ##0 hold(csrfile_mie_0, csrfile_mie()) and
	t ##0 hold(csrfile_mstatus_0, csrfile_mstatus()) and
	t ##0 hold(csrfile_mtvec_0, csrfile_mtvec()) and
	t ##0 hold(mip_isa_Port_sig_0, mip_isa_Port_sig()) and
	t ##0 hold(pcReg_0, pcReg()) and
	t ##0 hold(regfileWrite_dst_0, regfileWrite_dst()) and
	t ##0 hold(regfileWrite_dstData_0, regfileWrite_dstData()) and
	t##0 ECALL_DONE_7() and
	t##0 ecall_isa_Port_sync()
implies
	t_end(o)##0 FETCH_REQ_1() and
	t_end(o)##0 csrfile_mcause() == updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0) and
	t_end(o)##0 csrfile_mepc() == updateMEPC(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mepc_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0,(pcReg_0 + 4)) and
	t_end(o)##0 csrfile_mie() == csrfile_mie_0 and
	t_end(o)##0 csrfile_mip() == mip_isa_Port_sig_0 and
	t_end(o)##0 csrfile_mstatus() == updateMSTATUS(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0) and
	t_end(o)##0 csrfile_mtvec() == csrfile_mtvec_0 and
	t_end(o)##0 pcReg() == updatePC(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0,csrfile_mtvec_0,(pcReg_0 + 4)) and
	t_end(o)##0 regfileWrite_dst() == regfileWrite_dst_0 and
	t_end(o)##0 regfileWrite_dstData() == regfileWrite_dstData_0 and
	t_end(o)##0 toMemoryPort_sig_addrIn() == updatePC(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0,csrfile_mtvec_0,(pcReg_0 + 4)) and
	t_end(o)##0 toMemoryPort_sig_dataIn() == 0 and
	t_end(o)##0 toMemoryPort_sig_mask() == MT_W and
	t_end(o)##0 toMemoryPort_sig_req() == ME_RD and
	during_o (t, 1, t_end(o), 0, ecall_isa_Port_notify() == 0) and
	during_o (t, 1, t_end(o), 0, fromMemoryPort_notify() == 0) and
	during_o (t, 1, t_end(o), 0, isa_ecall_Port_notify() == 0) and
	during_o (t, 1, t_end(o), -1, toMemoryPort_notify() == 0) and
	t_end(o)##0 toMemoryPort_notify() == 1 and
	during_o (t, 1, t_end(o), 0, toRegsPort_notify() == 0);
endproperty;
ECALL_DONE_7_35_a: assert property (disable iff (reset) ECALL_DONE_7_35_p(1)); //ASSIGN t_end offset here



property ECALL_REQ_6_34_p(o);
 bit[31:0] csrfile_mcause_0;
 bit[31:0] csrfile_mepc_0;
 bit[31:0] csrfile_mie_0;
 bit[31:0] csrfile_mip_0;
 bit[31:0] csrfile_mstatus_0;
 bit[31:0] csrfile_mtvec_0;
 bit[31:0] pcReg_0;
 bit[31:0] regfileWrite_dst_0;
 bit[31:0] regfileWrite_dstData_0;
	t ##0 hold(csrfile_mcause_0, csrfile_mcause()) and
	t ##0 hold(csrfile_mepc_0, csrfile_mepc()) and
	t ##0 hold(csrfile_mie_0, csrfile_mie()) and
	t ##0 hold(csrfile_mip_0, csrfile_mip()) and
	t ##0 hold(csrfile_mstatus_0, csrfile_mstatus()) and
	t ##0 hold(csrfile_mtvec_0, csrfile_mtvec()) and
	t ##0 hold(pcReg_0, pcReg()) and
	t ##0 hold(regfileWrite_dst_0, regfileWrite_dst()) and
	t ##0 hold(regfileWrite_dstData_0, regfileWrite_dstData()) and
	t##0 ECALL_REQ_6() and
	t##0 isa_ecall_Port_sync()
implies
	t_end(o)##0 ECALL_DONE_7() and
	t_end(o)##0 csrfile_mcause() == csrfile_mcause_0 and
	t_end(o)##0 csrfile_mepc() == csrfile_mepc_0 and
	t_end(o)##0 csrfile_mie() == csrfile_mie_0 and
	t_end(o)##0 csrfile_mip() == csrfile_mip_0 and
	t_end(o)##0 csrfile_mstatus() == csrfile_mstatus_0 and
	t_end(o)##0 csrfile_mtvec() == csrfile_mtvec_0 and
	t_end(o)##0 pcReg() == pcReg_0 and
	t_end(o)##0 regfileWrite_dst() == regfileWrite_dst_0 and
	t_end(o)##0 regfileWrite_dstData() == regfileWrite_dstData_0 and
	during_o (t, 1, t_end(o), -1, ecall_isa_Port_notify() == 0) and
	t_end(o)##0 ecall_isa_Port_notify() == 1 and
	during_o (t, 1, t_end(o), 0, fromMemoryPort_notify() == 0) and
	during_o (t, 1, t_end(o), 0, isa_ecall_Port_notify() == 0) and
	during_o (t, 1, t_end(o), 0, toMemoryPort_notify() == 0) and
	during_o (t, 1, t_end(o), 0, toRegsPort_notify() == 0);
endproperty;
ECALL_REQ_6_34_a: assert property (disable iff (reset) ECALL_REQ_6_34_p(1)); //ASSIGN t_end offset here



property FETCH_DONE_2_10_p(o);
 bit[31:0] csrfile_mcause_0;
 bit[31:0] csrfile_mepc_0;
 bit[31:0] csrfile_mie_0;
 bit[31:0] csrfile_mstatus_0;
 bit[31:0] csrfile_mtvec_0;
 bit[31:0] fromMemoryPort_sig_loadedData_0;
 bit[31:0] mip_isa_Port_sig_0;
 bit[31:0] pcReg_0;
 bit[31:0] regfileWrite_dst_0;
 bit[31:0] regfileWrite_dstData_0;
	t ##0 hold(csrfile_mcause_0, csrfile_mcause()) and
	t ##0 hold(csrfile_mepc_0, csrfile_mepc()) and
	t ##0 hold(csrfile_mie_0, csrfile_mie()) and
	t ##0 hold(csrfile_mstatus_0, csrfile_mstatus()) and
	t ##0 hold(csrfile_mtvec_0, csrfile_mtvec()) and
	t ##0 hold(fromMemoryPort_sig_loadedData_0, fromMemoryPort_sig_loadedData()) and
	t ##0 hold(mip_isa_Port_sig_0, mip_isa_Port_sig()) and
	t ##0 hold(pcReg_0, pcReg()) and
	t ##0 hold(regfileWrite_dst_0, regfileWrite_dst()) and
	t ##0 hold(regfileWrite_dstData_0, regfileWrite_dstData()) and
	t##0 FETCH_DONE_2() and
	t##0 fromMemoryPort_sync() and
	t##0 (getEncType(fromMemoryPort_sig_loadedData()) == ENC_I_M)
implies
	t_end(o)##0 FETCH_REQ_1() and
	t_end(o)##0 csrfile_mcause() == updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0) and
	t_end(o)##0 csrfile_mepc() == updateMEPC(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mepc_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0,(pcReg_0 + 4)) and
	t_end(o)##0 csrfile_mie() == csrfile_mie_0 and
	t_end(o)##0 csrfile_mip() == mip_isa_Port_sig_0 and
	t_end(o)##0 csrfile_mstatus() == updateMSTATUS(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0) and
	t_end(o)##0 csrfile_mtvec() == csrfile_mtvec_0 and
	t_end(o)##0 pcReg() == updatePC(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0,csrfile_mtvec_0,(pcReg_0 + 4)) and
	t_end(o)##0 regfileWrite_dst() == regfileWrite_dst_0 and
	t_end(o)##0 regfileWrite_dstData() == regfileWrite_dstData_0 and
	t_end(o)##0 toMemoryPort_sig_addrIn() == updatePC(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0,csrfile_mtvec_0,(pcReg_0 + 4)) and
	t_end(o)##0 toMemoryPort_sig_dataIn() == 0 and
	t_end(o)##0 toMemoryPort_sig_mask() == MT_W and
	t_end(o)##0 toMemoryPort_sig_req() == ME_RD and
	during_o (t, 1, t_end(o), 0, ecall_isa_Port_notify() == 0) and
	during_o (t, 1, t_end(o), 0, fromMemoryPort_notify() == 0) and
	during_o (t, 1, t_end(o), 0, isa_ecall_Port_notify() == 0) and
	during_o (t, 1, t_end(o), -1, toMemoryPort_notify() == 0) and
	t_end(o)##0 toMemoryPort_notify() == 1 and
	during_o (t, 1, t_end(o), 0, toRegsPort_notify() == 0);
endproperty;
FETCH_DONE_2_10_a: assert property (disable iff (reset) FETCH_DONE_2_10_p(1)); //ASSIGN t_end offset here



property FETCH_DONE_2_11_p(o);
 bit[31:0] csrfile_mcause_0;
 bit[31:0] csrfile_mepc_0;
 bit[31:0] csrfile_mie_0;
 bit[31:0] csrfile_mip_0;
 bit[31:0] csrfile_mstatus_0;
 bit[31:0] csrfile_mtvec_0;
 bit[31:0] fromMemoryPort_sig_loadedData_0;
 bit[31:0] pcReg_0;
 bit[31:0] regfile_0;
 bit[31:0] mip_isa_Port_sig_0;
	t ##0 hold(csrfile_mcause_0, csrfile_mcause()) and
	t ##0 hold(csrfile_mepc_0, csrfile_mepc()) and
	t ##0 hold(csrfile_mie_0, csrfile_mie()) and
	t ##0 hold(csrfile_mip_0, csrfile_mip()) and
	t ##0 hold(csrfile_mstatus_0, csrfile_mstatus()) and
	t ##0 hold(csrfile_mtvec_0, csrfile_mtvec()) and
	t ##0 hold(mip_isa_Port_sig_0, mip_isa_Port_sig()) and
	t ##0 hold(fromMemoryPort_sig_loadedData_0, fromMemoryPort_sig_loadedData()) and
	t ##0 hold(pcReg_0, pcReg()) and
	t ##0 hold(regfile_0, regfile()) and
	t##0 FETCH_DONE_2() and
	t##0 fromMemoryPort_sync() and
	t##0 (getEncType(fromMemoryPort_sig_loadedData()) == ENC_I_S) and
	t##0 (((getInstrType(fromMemoryPort_sig_loadedData()) == INSTR_CSRRW) || (getInstrType(fromMemoryPort_sig_loadedData()) == INSTR_CSRRS)) || (getInstrType(fromMemoryPort_sig_loadedData()) == INSTR_CSRRC)) and
	t##0 (getImmediate(fromMemoryPort_sig_loadedData()) == 768)
implies
	t_end(o)##0 FETCH_REQ_1() and
	t_end(o)##0 csrfile_mcause() == updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,getCSRresult(getCSR(csrfile_mcause_0,csrfile_mepc_0,csrfile_mie_0,csrfile_mip_0,csrfile_mstatus_0,csrfile_mtvec_0,fromMemoryPort_sig_loadedData_0),getInstrType(fromMemoryPort_sig_loadedData_0),regfile_0[((fromMemoryPort_sig_loadedData_0>>15) & 31)])) and
	t_end(o)##0 csrfile_mepc() == updateMEPC(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,getCSRresult(getCSR(csrfile_mcause_0,csrfile_mepc_0,csrfile_mie_0,csrfile_mip_0,csrfile_mstatus_0,csrfile_mtvec_0,fromMemoryPort_sig_loadedData_0),getInstrType(fromMemoryPort_sig_loadedData_0),regfile_0[((fromMemoryPort_sig_loadedData_0>>15) & 31)])),csrfile_mepc_0,csrfile_mie_0,mip_isa_Port_sig_0,getCSRresult(getCSR(csrfile_mcause_0,csrfile_mepc_0,csrfile_mie_0,csrfile_mip_0,csrfile_mstatus_0,csrfile_mtvec_0,fromMemoryPort_sig_loadedData_0),getInstrType(fromMemoryPort_sig_loadedData_0),regfile_0[((fromMemoryPort_sig_loadedData_0>>15) & 31)]),(pcReg_0 + 4)) and
	t_end(o)##0 csrfile_mie() == csrfile_mie_0 and
	t_end(o)##0 csrfile_mip() == mip_isa_Port_sig_0 and
	t_end(o)##0 csrfile_mstatus() == updateMSTATUS(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,getCSRresult(getCSR(csrfile_mcause_0,csrfile_mepc_0,csrfile_mie_0,csrfile_mip_0,csrfile_mstatus_0,csrfile_mtvec_0,fromMemoryPort_sig_loadedData_0),getInstrType(fromMemoryPort_sig_loadedData_0),regfile_0[((fromMemoryPort_sig_loadedData_0>>15) & 31)])),csrfile_mie_0,mip_isa_Port_sig_0,getCSRresult(getCSR(csrfile_mcause_0,csrfile_mepc_0,csrfile_mie_0,csrfile_mip_0,csrfile_mstatus_0,csrfile_mtvec_0,fromMemoryPort_sig_loadedData_0),getInstrType(fromMemoryPort_sig_loadedData_0),regfile_0[((fromMemoryPort_sig_loadedData_0>>15) & 31)])) and
	t_end(o)##0 csrfile_mtvec() == csrfile_mtvec_0 and
	t_end(o)##0 pcReg() == updatePC(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,getCSRresult(getCSR(csrfile_mcause_0,csrfile_mepc_0,csrfile_mie_0,csrfile_mip_0,csrfile_mstatus_0,csrfile_mtvec_0,fromMemoryPort_sig_loadedData_0),getInstrType(fromMemoryPort_sig_loadedData_0),regfile_0[((fromMemoryPort_sig_loadedData_0>>15) & 31)])),csrfile_mie_0,mip_isa_Port_sig_0,getCSRresult(getCSR(csrfile_mcause_0,csrfile_mepc_0,csrfile_mie_0,csrfile_mip_0,csrfile_mstatus_0,csrfile_mtvec_0,fromMemoryPort_sig_loadedData_0),getInstrType(fromMemoryPort_sig_loadedData_0),regfile_0[((fromMemoryPort_sig_loadedData_0>>15) & 31)]),csrfile_mtvec_0,(pcReg_0 + 4)) and
	t_end(o)##0 regfileWrite_dst() == ((fromMemoryPort_sig_loadedData_0>>7) & 31) and
	t_end(o)##0 regfileWrite_dstData() == getCSR(csrfile_mcause_0,csrfile_mepc_0,csrfile_mie_0,csrfile_mip_0,csrfile_mstatus_0,csrfile_mtvec_0,fromMemoryPort_sig_loadedData_0) and
	t_end(o)##0 toRegsPort_sig_dst() == ((fromMemoryPort_sig_loadedData_0>>7) & 31) and
	t_end(o)##0 toRegsPort_sig_dstData() == getCSR(csrfile_mcause_0,csrfile_mepc_0,csrfile_mie_0,csrfile_mip_0,csrfile_mstatus_0,csrfile_mtvec_0,fromMemoryPort_sig_loadedData_0) and
	t_end(o)##0 toMemoryPort_sig_addrIn() == updatePC(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,getCSRresult(getCSR(csrfile_mcause_0,csrfile_mepc_0,csrfile_mie_0,csrfile_mip_0,csrfile_mstatus_0,csrfile_mtvec_0,fromMemoryPort_sig_loadedData_0),getInstrType(fromMemoryPort_sig_loadedData_0),regfile_0[((fromMemoryPort_sig_loadedData_0>>15) & 31)])),csrfile_mie_0,mip_isa_Port_sig_0,getCSRresult(getCSR(csrfile_mcause_0,csrfile_mepc_0,csrfile_mie_0,csrfile_mip_0,csrfile_mstatus_0,csrfile_mtvec_0,fromMemoryPort_sig_loadedData_0),getInstrType(fromMemoryPort_sig_loadedData_0),regfile_0[((fromMemoryPort_sig_loadedData_0>>15) & 31)]),csrfile_mtvec_0,(pcReg_0 + 4)) and
	t_end(o)##0 toMemoryPort_sig_dataIn() == 0 and
	t_end(o)##0 toMemoryPort_sig_mask() == MT_W and
	t_end(o)##0 toMemoryPort_sig_req() == ME_RD and
	during_o (t, 1, t_end(o), 0, ecall_isa_Port_notify() == 0) and
	during_o (t, 1, t_end(o), 0, fromMemoryPort_notify() == 0) and
	during_o (t, 1, t_end(o), 0, isa_ecall_Port_notify() == 0) and
	during_o (t, 1, t_end(o) , -1, toMemoryPort_notify() == 0) and
	t_end(o) ##0 toMemoryPort_notify() == 1 and
	during_o (t, 1, t_end(o), -1, toRegsPort_notify() == 0) and
	t_end(o)##0 toRegsPort_notify() == 1;
endproperty;
FETCH_DONE_2_11_a: assert property (disable iff (reset) FETCH_DONE_2_11_p(1)); //ASSIGN t_end offset here



property FETCH_DONE_2_12_p(o);
 bit[31:0] csrfile_mcause_0;
 bit[31:0] csrfile_mepc_0;
 bit[31:0] csrfile_mie_0;
 bit[31:0] csrfile_mip_0;
 bit[31:0] csrfile_mstatus_0;
 bit[31:0] csrfile_mtvec_0;
 bit[31:0] mip_isa_Port_sig_0;
 bit[31:0] fromMemoryPort_sig_loadedData_0;
 bit[31:0] pcReg_0;
 bit[31:0] regfile_0;
	t ##0 hold(csrfile_mcause_0, csrfile_mcause()) and
	t ##0 hold(csrfile_mepc_0, csrfile_mepc()) and
	t ##0 hold(csrfile_mie_0, csrfile_mie()) and
	t ##0 hold(csrfile_mip_0, csrfile_mip()) and
	t ##0 hold(csrfile_mstatus_0, csrfile_mstatus()) and
	t ##0 hold(csrfile_mtvec_0, csrfile_mtvec()) and
	t ##0 hold(mip_isa_Port_sig_0, mip_isa_Port_sig()) and
	t ##0 hold(fromMemoryPort_sig_loadedData_0, fromMemoryPort_sig_loadedData()) and
	t ##0 hold(pcReg_0, pcReg()) and
	t ##0 hold(regfile_0, regfile()) and
	t##0 FETCH_DONE_2() and
	t##0 fromMemoryPort_sync() and
	t##0 (getEncType(fromMemoryPort_sig_loadedData()) == ENC_I_S) and
	t##0 (((getInstrType(fromMemoryPort_sig_loadedData()) == INSTR_CSRRW) || (getInstrType(fromMemoryPort_sig_loadedData()) == INSTR_CSRRS)) || (getInstrType(fromMemoryPort_sig_loadedData()) == INSTR_CSRRC)) and
	t##0 (getImmediate(fromMemoryPort_sig_loadedData()) == 772)
implies
	t_end(o)##0 FETCH_REQ_1() and
	t_end(o)##0 csrfile_mcause() == updateMCAUSE(csrfile_mcause_0,getCSRresult(getCSR(csrfile_mcause_0,csrfile_mepc_0,csrfile_mie_0,csrfile_mip_0,csrfile_mstatus_0,csrfile_mtvec_0,fromMemoryPort_sig_loadedData_0),getInstrType(fromMemoryPort_sig_loadedData_0),regfile_0[((fromMemoryPort_sig_loadedData_0>>15) & 31)]),mip_isa_Port_sig_0,csrfile_mstatus_0) and
	t_end(o)##0 csrfile_mepc() == updateMEPC(updateMCAUSE(csrfile_mcause_0,getCSRresult(getCSR(csrfile_mcause_0,csrfile_mepc_0,csrfile_mie_0,csrfile_mip_0,csrfile_mstatus_0,csrfile_mtvec_0,fromMemoryPort_sig_loadedData_0),getInstrType(fromMemoryPort_sig_loadedData_0),regfile_0[((fromMemoryPort_sig_loadedData_0>>15) & 31)]),mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mepc_0,getCSRresult(getCSR(csrfile_mcause_0,csrfile_mepc_0,csrfile_mie_0,csrfile_mip_0,csrfile_mstatus_0,csrfile_mtvec_0,fromMemoryPort_sig_loadedData_0),getInstrType(fromMemoryPort_sig_loadedData_0),regfile_0[((fromMemoryPort_sig_loadedData_0>>15) & 31)]),mip_isa_Port_sig_0,csrfile_mstatus_0,(pcReg_0 + 4)) and
	t_end(o)##0 csrfile_mie() == getCSRresult(getCSR(csrfile_mcause_0,csrfile_mepc_0,csrfile_mie_0,csrfile_mip_0,csrfile_mstatus_0,csrfile_mtvec_0,fromMemoryPort_sig_loadedData_0),getInstrType(fromMemoryPort_sig_loadedData_0),regfile_0[((fromMemoryPort_sig_loadedData_0>>15) & 31)]) and
	t_end(o)##0 csrfile_mip() == mip_isa_Port_sig_0 and
	t_end(o)##0 csrfile_mstatus() == updateMSTATUS(updateMCAUSE(csrfile_mcause_0,getCSRresult(getCSR(csrfile_mcause_0,csrfile_mepc_0,csrfile_mie_0,csrfile_mip_0,csrfile_mstatus_0,csrfile_mtvec_0,fromMemoryPort_sig_loadedData_0),getInstrType(fromMemoryPort_sig_loadedData_0),regfile_0[((fromMemoryPort_sig_loadedData_0>>15) & 31)]),mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0) and
	t_end(o)##0 csrfile_mtvec() == csrfile_mtvec_0 and
	t_end(o)##0 pcReg() == updatePC(updateMCAUSE(csrfile_mcause_0,getCSRresult(getCSR(csrfile_mcause_0,csrfile_mepc_0,csrfile_mie_0,csrfile_mip_0,csrfile_mstatus_0,csrfile_mtvec_0,fromMemoryPort_sig_loadedData_0),getInstrType(fromMemoryPort_sig_loadedData_0),regfile_0[((fromMemoryPort_sig_loadedData_0>>15) & 31)]),mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0,csrfile_mtvec_0,(pcReg_0 + 4)) and
	t_end(o)##0 regfileWrite_dst() == ((fromMemoryPort_sig_loadedData_0>>7) & 31) and
	t_end(o)##0 regfileWrite_dstData() == getCSR(csrfile_mcause_0,csrfile_mepc_0,csrfile_mie_0,csrfile_mip_0,csrfile_mstatus_0,csrfile_mtvec_0,fromMemoryPort_sig_loadedData_0) and
	t_end(o)##0 toRegsPort_sig_dst() == ((fromMemoryPort_sig_loadedData_0>>7) & 31) and
	t_end(o)##0 toRegsPort_sig_dstData() == getCSR(csrfile_mcause_0,csrfile_mepc_0,csrfile_mie_0,csrfile_mip_0,csrfile_mstatus_0,csrfile_mtvec_0,fromMemoryPort_sig_loadedData_0) and
	t_end(o)##0 toMemoryPort_sig_addrIn() == updatePC(updateMCAUSE(csrfile_mcause_0,getCSRresult(getCSR(csrfile_mcause_0,csrfile_mepc_0,csrfile_mie_0,csrfile_mip_0,csrfile_mstatus_0,csrfile_mtvec_0,fromMemoryPort_sig_loadedData_0),getInstrType(fromMemoryPort_sig_loadedData_0),regfile_0[((fromMemoryPort_sig_loadedData_0>>15) & 31)]),mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0,csrfile_mtvec_0,(pcReg_0 + 4)) and
	t_end(o)##0 toMemoryPort_sig_dataIn() == 0 and
	t_end(o)##0 toMemoryPort_sig_mask() == MT_W and
	t_end(o)##0 toMemoryPort_sig_req() == ME_RD and
	during_o (t, 1, t_end(o), 0, ecall_isa_Port_notify() == 0) and
	during_o (t, 1, t_end(o), 0, fromMemoryPort_notify() == 0) and
	during_o (t, 1, t_end(o), 0, isa_ecall_Port_notify() == 0) and
	during_o (t, 1, t_end(o) , -1, toMemoryPort_notify() == 0) and
	t_end(o) ##0 toMemoryPort_notify() == 1 and
	during_o (t, 1, t_end(o), -1, toRegsPort_notify() == 0) and
	t_end(o)##0 toRegsPort_notify() == 1;
endproperty;
FETCH_DONE_2_12_a: assert property (disable iff (reset) FETCH_DONE_2_12_p(1)); //ASSIGN t_end offset here



property FETCH_DONE_2_13_p(o);
 bit[31:0] csrfile_mcause_0;
 bit[31:0] csrfile_mepc_0;
 bit[31:0] csrfile_mie_0;
 bit[31:0] csrfile_mip_0;
 bit[31:0] csrfile_mstatus_0;
 bit[31:0] csrfile_mtvec_0;
 bit[31:0] mip_isa_Port_sig_0;
 bit[31:0] fromMemoryPort_sig_loadedData_0;
 bit[31:0] pcReg_0;
 bit[31:0] regfile_0;
	t ##0 hold(csrfile_mcause_0, csrfile_mcause()) and
	t ##0 hold(csrfile_mepc_0, csrfile_mepc()) and
	t ##0 hold(csrfile_mie_0, csrfile_mie()) and
	t ##0 hold(csrfile_mip_0, csrfile_mip()) and
	t ##0 hold(csrfile_mstatus_0, csrfile_mstatus()) and
	t ##0 hold(csrfile_mtvec_0, csrfile_mtvec()) and
	t ##0 hold(mip_isa_Port_sig_0, mip_isa_Port_sig()) and
	t ##0 hold(fromMemoryPort_sig_loadedData_0, fromMemoryPort_sig_loadedData()) and
	t ##0 hold(pcReg_0, pcReg()) and
	t ##0 hold(regfile_0, regfile()) and
	t##0 FETCH_DONE_2() and
	t##0 fromMemoryPort_sync() and
	t##0 (getEncType(fromMemoryPort_sig_loadedData()) == ENC_I_S) and
	t##0 (((getInstrType(fromMemoryPort_sig_loadedData()) == INSTR_CSRRW) || (getInstrType(fromMemoryPort_sig_loadedData()) == INSTR_CSRRS)) || (getInstrType(fromMemoryPort_sig_loadedData()) == INSTR_CSRRC)) and
	t##0 (getImmediate(fromMemoryPort_sig_loadedData()) == 773)
implies
	t_end(o)##0 FETCH_REQ_1() and
	t_end(o)##0 csrfile_mcause() == updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0) and
	t_end(o)##0 csrfile_mepc() == updateMEPC(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mepc_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0,(pcReg_0 + 4)) and
	t_end(o)##0 csrfile_mie() == csrfile_mie_0 and
	t_end(o)##0 csrfile_mip() == mip_isa_Port_sig_0 and
	t_end(o)##0 csrfile_mstatus() == updateMSTATUS(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0) and
	t_end(o)##0 csrfile_mtvec() == getCSRresult(getCSR(csrfile_mcause_0,csrfile_mepc_0,csrfile_mie_0,csrfile_mip_0,csrfile_mstatus_0,csrfile_mtvec_0,fromMemoryPort_sig_loadedData_0),getInstrType(fromMemoryPort_sig_loadedData_0),regfile_0[((fromMemoryPort_sig_loadedData_0>>15) & 31)]) and
	t_end(o)##0 pcReg() == updatePC(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0,getCSRresult(getCSR(csrfile_mcause_0,csrfile_mepc_0,csrfile_mie_0,csrfile_mip_0,csrfile_mstatus_0,csrfile_mtvec_0,fromMemoryPort_sig_loadedData_0),getInstrType(fromMemoryPort_sig_loadedData_0),regfile_0[((fromMemoryPort_sig_loadedData_0>>15) & 31)]),(pcReg_0 + 4)) and
	t_end(o)##0 regfileWrite_dst() == ((fromMemoryPort_sig_loadedData_0>>7) & 31) and
	t_end(o)##0 regfileWrite_dstData() == getCSR(csrfile_mcause_0,csrfile_mepc_0,csrfile_mie_0,csrfile_mip_0,csrfile_mstatus_0,csrfile_mtvec_0,fromMemoryPort_sig_loadedData_0) and
	t_end(o)##0 toRegsPort_sig_dst() == ((fromMemoryPort_sig_loadedData_0>>7) & 31) and
	t_end(o)##0 toRegsPort_sig_dstData() == getCSR(csrfile_mcause_0,csrfile_mepc_0,csrfile_mie_0,csrfile_mip_0,csrfile_mstatus_0,csrfile_mtvec_0,fromMemoryPort_sig_loadedData_0) and
	t_end(o)##0 toMemoryPort_sig_addrIn() == updatePC(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0,getCSRresult(getCSR(csrfile_mcause_0,csrfile_mepc_0,csrfile_mie_0,csrfile_mip_0,csrfile_mstatus_0,csrfile_mtvec_0,fromMemoryPort_sig_loadedData_0),getInstrType(fromMemoryPort_sig_loadedData_0),regfile_0[((fromMemoryPort_sig_loadedData_0>>15) & 31)]),(pcReg_0 + 4)) and
	t_end(o)##0 toMemoryPort_sig_dataIn() == 0 and
	t_end(o)##0 toMemoryPort_sig_mask() == MT_W and
	t_end(o)##0 toMemoryPort_sig_req() == ME_RD and
	during_o (t, 1, t_end(o), 0, ecall_isa_Port_notify() == 0) and
	during_o (t, 1, t_end(o), 0, fromMemoryPort_notify() == 0) and
	during_o (t, 1, t_end(o), 0, isa_ecall_Port_notify() == 0) and
	during_o (t, 1, t_end(o) , -1, toMemoryPort_notify() == 0) and
	t_end(o) ##0 toMemoryPort_notify() == 1 and
	during_o (t, 1, t_end(o), -1, toRegsPort_notify() == 0) and
	t_end(o)##0 toRegsPort_notify() == 1;
endproperty;
FETCH_DONE_2_13_a: assert property (disable iff (reset) FETCH_DONE_2_13_p(1)); //ASSIGN t_end offset here



property FETCH_DONE_2_14_p(o);
 bit[31:0] csrfile_mcause_0;
 bit[31:0] csrfile_mepc_0;
 bit[31:0] csrfile_mie_0;
 bit[31:0] csrfile_mip_0;
 bit[31:0] csrfile_mstatus_0;
 bit[31:0] csrfile_mtvec_0;
 bit[31:0] mip_isa_Port_sig_0;
 bit[31:0] fromMemoryPort_sig_loadedData_0;
 bit[31:0] pcReg_0;
 bit[31:0] regfile_0;
	t ##0 hold(csrfile_mcause_0, csrfile_mcause()) and
	t ##0 hold(csrfile_mepc_0, csrfile_mepc()) and
	t ##0 hold(csrfile_mie_0, csrfile_mie()) and
	t ##0 hold(csrfile_mip_0, csrfile_mip()) and
	t ##0 hold(mip_isa_Port_sig_0, mip_isa_Port_sig()) and
	t ##0 hold(csrfile_mstatus_0, csrfile_mstatus()) and
	t ##0 hold(csrfile_mtvec_0, csrfile_mtvec()) and
	t ##0 hold(fromMemoryPort_sig_loadedData_0, fromMemoryPort_sig_loadedData()) and
	t ##0 hold(pcReg_0, pcReg()) and
	t ##0 hold(regfile_0, regfile()) and
	t##0 FETCH_DONE_2() and
	t##0 fromMemoryPort_sync() and
	t##0 (getEncType(fromMemoryPort_sig_loadedData()) == ENC_I_S) and
	t##0 (((getInstrType(fromMemoryPort_sig_loadedData()) == INSTR_CSRRW) || (getInstrType(fromMemoryPort_sig_loadedData()) == INSTR_CSRRS)) || (getInstrType(fromMemoryPort_sig_loadedData()) == INSTR_CSRRC)) and
	t##0 (getImmediate(fromMemoryPort_sig_loadedData()) == 833)
implies
	t_end(o)##0 FETCH_REQ_1() and
	t_end(o)##0 csrfile_mcause() == updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0) and
	t_end(o)##0 csrfile_mepc() == updateMEPC(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),getCSRresult(getCSR(csrfile_mcause_0,csrfile_mepc_0,csrfile_mie_0,csrfile_mip_0,csrfile_mstatus_0,csrfile_mtvec_0,fromMemoryPort_sig_loadedData_0),getInstrType(fromMemoryPort_sig_loadedData_0),regfile_0[((fromMemoryPort_sig_loadedData_0>>15) & 31)]),csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0,(pcReg_0 + 4)) and
	t_end(o)##0 csrfile_mie() == csrfile_mie_0 and
	t_end(o)##0 csrfile_mip() == mip_isa_Port_sig_0 and
	t_end(o)##0 csrfile_mstatus() == updateMSTATUS(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0) and
	t_end(o)##0 csrfile_mtvec() == csrfile_mtvec_0 and
	t_end(o)##0 pcReg() == updatePC(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0,csrfile_mtvec_0,(pcReg_0 + 4)) and
	t_end(o)##0 regfileWrite_dst() == ((fromMemoryPort_sig_loadedData_0>>7) & 31) and
	t_end(o)##0 regfileWrite_dstData() == getCSR(csrfile_mcause_0,csrfile_mepc_0,csrfile_mie_0,csrfile_mip_0,csrfile_mstatus_0,csrfile_mtvec_0,fromMemoryPort_sig_loadedData_0) and
	t_end(o)##0 toRegsPort_sig_dst() == ((fromMemoryPort_sig_loadedData_0>>7) & 31) and
	t_end(o)##0 toRegsPort_sig_dstData() == getCSR(csrfile_mcause_0,csrfile_mepc_0,csrfile_mie_0,csrfile_mip_0,csrfile_mstatus_0,csrfile_mtvec_0,fromMemoryPort_sig_loadedData_0) and
	t_end(o)##0 toMemoryPort_sig_addrIn() == updatePC(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0,csrfile_mtvec_0,(pcReg_0 + 4)) and
	t_end(o)##0 toMemoryPort_sig_dataIn() == 0 and
	t_end(o)##0 toMemoryPort_sig_mask() == MT_W and
	t_end(o)##0 toMemoryPort_sig_req() == ME_RD and
	during_o (t, 1, t_end(o), 0, ecall_isa_Port_notify() == 0) and
	during_o (t, 1, t_end(o), 0, fromMemoryPort_notify() == 0) and
	during_o (t, 1, t_end(o), 0, isa_ecall_Port_notify() == 0) and
	during_o (t, 1, t_end(o) , -1, toMemoryPort_notify() == 0) and
	t_end(o) ##0 toMemoryPort_notify() == 1 and
	during_o (t, 1, t_end(o), -1, toRegsPort_notify() == 0) and
	t_end(o)##0 toRegsPort_notify() == 1;
endproperty;
FETCH_DONE_2_14_a: assert property (disable iff (reset) FETCH_DONE_2_14_p(1)); //ASSIGN t_end offset here



property FETCH_DONE_2_15_p(o);
 bit[31:0] csrfile_mcause_0;
 bit[31:0] csrfile_mepc_0;
 bit[31:0] csrfile_mie_0;
 bit[31:0] csrfile_mip_0;
 bit[31:0] csrfile_mstatus_0;
 bit[31:0] csrfile_mtvec_0;
 bit[31:0] mip_isa_Port_sig_0;
 bit[31:0] fromMemoryPort_sig_loadedData_0;
 bit[31:0] pcReg_0;
 bit[31:0] regfile_0;
	t ##0 hold(csrfile_mcause_0, csrfile_mcause()) and
	t ##0 hold(csrfile_mepc_0, csrfile_mepc()) and
	t ##0 hold(csrfile_mie_0, csrfile_mie()) and
	t ##0 hold(csrfile_mip_0, csrfile_mip()) and
	t ##0 hold(csrfile_mstatus_0, csrfile_mstatus()) and
	t ##0 hold(csrfile_mtvec_0, csrfile_mtvec()) and
	t ##0 hold(mip_isa_Port_sig_0, mip_isa_Port_sig()) and
	t ##0 hold(fromMemoryPort_sig_loadedData_0, fromMemoryPort_sig_loadedData()) and
	t ##0 hold(pcReg_0, pcReg()) and
	t ##0 hold(regfile_0, regfile()) and
	t##0 FETCH_DONE_2() and
	t##0 fromMemoryPort_sync() and
	t##0 (getEncType(fromMemoryPort_sig_loadedData()) == ENC_I_S) and
	t##0 (((getInstrType(fromMemoryPort_sig_loadedData()) == INSTR_CSRRW) || (getInstrType(fromMemoryPort_sig_loadedData()) == INSTR_CSRRS)) || (getInstrType(fromMemoryPort_sig_loadedData()) == INSTR_CSRRC)) and
	t##0 (getImmediate(fromMemoryPort_sig_loadedData()) == 834)
implies
	t_end(o)##0 FETCH_REQ_1() and
	t_end(o)##0 csrfile_mcause() == updateMCAUSE(getCSRresult(getCSR(csrfile_mcause_0,csrfile_mepc_0,csrfile_mie_0,csrfile_mip_0,csrfile_mstatus_0,csrfile_mtvec_0,fromMemoryPort_sig_loadedData_0),getInstrType(fromMemoryPort_sig_loadedData_0),regfile_0[((fromMemoryPort_sig_loadedData_0>>15) & 31)]),csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0) and
	t_end(o)##0 csrfile_mepc() == updateMEPC(updateMCAUSE(getCSRresult(getCSR(csrfile_mcause_0,csrfile_mepc_0,csrfile_mie_0,csrfile_mip_0,csrfile_mstatus_0,csrfile_mtvec_0,fromMemoryPort_sig_loadedData_0),getInstrType(fromMemoryPort_sig_loadedData_0),regfile_0[((fromMemoryPort_sig_loadedData_0>>15) & 31)]),csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mepc_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0,(pcReg_0 + 4)) and
	t_end(o)##0 csrfile_mie() == csrfile_mie_0 and
	t_end(o)##0 csrfile_mip() == mip_isa_Port_sig_0 and
	t_end(o)##0 csrfile_mstatus() == updateMSTATUS(updateMCAUSE(getCSRresult(getCSR(csrfile_mcause_0,csrfile_mepc_0,csrfile_mie_0,csrfile_mip_0,csrfile_mstatus_0,csrfile_mtvec_0,fromMemoryPort_sig_loadedData_0),getInstrType(fromMemoryPort_sig_loadedData_0),regfile_0[((fromMemoryPort_sig_loadedData_0>>15) & 31)]),csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0) and
	t_end(o)##0 csrfile_mtvec() == csrfile_mtvec_0 and
	t_end(o)##0 pcReg() == updatePC(updateMCAUSE(getCSR(csrfile_mcause_0,csrfile_mepc_0,csrfile_mie_0,csrfile_mip_0,csrfile_mstatus_0,csrfile_mtvec_0,fromMemoryPort_sig_loadedData_0),csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0,csrfile_mtvec_0,(pcReg_0 + 4)) and
	t_end(o)##0 regfileWrite_dst() == ((fromMemoryPort_sig_loadedData_0>>7) & 31) and
	t_end(o)##0 regfileWrite_dstData() == getCSR(csrfile_mcause_0,csrfile_mepc_0,csrfile_mie_0,csrfile_mip_0,csrfile_mstatus_0,csrfile_mtvec_0,fromMemoryPort_sig_loadedData_0) and
	t_end(o)##0 toRegsPort_sig_dst() == ((fromMemoryPort_sig_loadedData_0>>7) & 31) and
	t_end(o)##0 toRegsPort_sig_dstData() == getCSR(csrfile_mcause_0,csrfile_mepc_0,csrfile_mie_0,csrfile_mip_0,csrfile_mstatus_0,csrfile_mtvec_0,fromMemoryPort_sig_loadedData_0) and
	t_end(o)##0 toMemoryPort_sig_addrIn() == updatePC(updateMCAUSE(getCSR(csrfile_mcause_0,csrfile_mepc_0,csrfile_mie_0,csrfile_mip_0,csrfile_mstatus_0,csrfile_mtvec_0,fromMemoryPort_sig_loadedData_0),csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0,csrfile_mtvec_0,(pcReg_0 + 4)) and
	t_end(o)##0 toMemoryPort_sig_dataIn() == 0 and
	t_end(o)##0 toMemoryPort_sig_mask() == MT_W and
	t_end(o)##0 toMemoryPort_sig_req() == ME_RD and
	during_o (t, 1, t_end(o), 0, ecall_isa_Port_notify() == 0) and
	during_o (t, 1, t_end(o), 0, fromMemoryPort_notify() == 0) and
	during_o (t, 1, t_end(o), 0, isa_ecall_Port_notify() == 0) and
	during_o (t, 1, t_end(o) , -1, toMemoryPort_notify() == 0) and
	t_end(o) ##0 toMemoryPort_notify() == 1 and
	during_o (t, 1, t_end(o), -1, toRegsPort_notify() == 0) and
	t_end(o)##0 toRegsPort_notify() == 1;
endproperty;
FETCH_DONE_2_15_a: assert property (disable iff (reset) FETCH_DONE_2_15_p(1)); //ASSIGN t_end offset here



property FETCH_DONE_2_16_p(o);
 bit[31:0] csrfile_mcause_0;
 bit[31:0] csrfile_mepc_0;
 bit[31:0] csrfile_mie_0;
 bit[31:0] csrfile_mip_0;
 bit[31:0] csrfile_mstatus_0;
 bit[31:0] csrfile_mtvec_0;
 bit[31:0] mip_isa_Port_sig_0;
 bit[31:0] fromMemoryPort_sig_loadedData_0;
 bit[31:0] pcReg_0;
 bit[31:0] regfile_0;
	t ##0 hold(csrfile_mcause_0, csrfile_mcause()) and
	t ##0 hold(csrfile_mepc_0, csrfile_mepc()) and
	t ##0 hold(csrfile_mie_0, csrfile_mie()) and
	t ##0 hold(csrfile_mip_0, csrfile_mip()) and
	t ##0 hold(csrfile_mstatus_0, csrfile_mstatus()) and
	t ##0 hold(csrfile_mtvec_0, csrfile_mtvec()) and
	t ##0 hold(mip_isa_Port_sig_0, mip_isa_Port_sig()) and
	t ##0 hold(fromMemoryPort_sig_loadedData_0, fromMemoryPort_sig_loadedData()) and
	t ##0 hold(pcReg_0, pcReg()) and
	t ##0 hold(regfile_0, regfile()) and
	t##0 FETCH_DONE_2() and
	t##0 fromMemoryPort_sync() and
	t##0 (getEncType(fromMemoryPort_sig_loadedData()) == ENC_I_S) and
	t##0 (((getInstrType(fromMemoryPort_sig_loadedData()) == INSTR_CSRRW) || (getInstrType(fromMemoryPort_sig_loadedData()) == INSTR_CSRRS)) || (getInstrType(fromMemoryPort_sig_loadedData()) == INSTR_CSRRC)) and
	t##0 (getImmediate(fromMemoryPort_sig_loadedData()) == 836)
implies
	t_end(o)##0 FETCH_REQ_1() and
	t_end(o)##0 csrfile_mcause() == updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0) and
	t_end(o)##0 csrfile_mepc() == updateMEPC(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mepc_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0,(pcReg_0 + 4)) and
	t_end(o)##0 csrfile_mie() == csrfile_mie_0 and
	t_end(o)##0 csrfile_mip() == mip_isa_Port_sig_0 and
	t_end(o)##0 csrfile_mstatus() == updateMSTATUS(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0) and
	t_end(o)##0 csrfile_mtvec() == csrfile_mtvec_0 and
	t_end(o)##0 pcReg() == updatePC(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0,csrfile_mtvec_0,(pcReg_0 + 4)) and
	t_end(o)##0 regfileWrite_dst() == ((fromMemoryPort_sig_loadedData_0>>7) & 31) and
	t_end(o)##0 regfileWrite_dstData() == getCSR(csrfile_mcause_0,csrfile_mepc_0,csrfile_mie_0,csrfile_mip_0,csrfile_mstatus_0,csrfile_mtvec_0,fromMemoryPort_sig_loadedData_0) and
	t_end(o)##0 toRegsPort_sig_dst() == ((fromMemoryPort_sig_loadedData_0>>7) & 31) and
	t_end(o)##0 toRegsPort_sig_dstData() == getCSR(csrfile_mcause_0,csrfile_mepc_0,csrfile_mie_0,csrfile_mip_0,csrfile_mstatus_0,csrfile_mtvec_0,fromMemoryPort_sig_loadedData_0) and
	t_end(o)##0 toMemoryPort_sig_addrIn() == updatePC(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0,csrfile_mtvec_0,(pcReg_0 + 4)) and
	t_end(o)##0 toMemoryPort_sig_dataIn() == 0 and
	t_end(o)##0 toMemoryPort_sig_mask() == MT_W and
	t_end(o)##0 toMemoryPort_sig_req() == ME_RD and
	during_o (t, 1, t_end(o), 0, ecall_isa_Port_notify() == 0) and
	during_o (t, 1, t_end(o), 0, fromMemoryPort_notify() == 0) and
	during_o (t, 1, t_end(o), 0, isa_ecall_Port_notify() == 0) and
	during_o (t, 1, t_end(o) , -1, toMemoryPort_notify() == 0) and
	t_end(o) ##0 toMemoryPort_notify() == 1 and
	during_o (t, 1, t_end(o), -1, toRegsPort_notify() == 0) and
	t_end(o)##0 toRegsPort_notify() == 1;
endproperty;
FETCH_DONE_2_16_a: assert property (disable iff (reset) FETCH_DONE_2_16_p(1)); //ASSIGN t_end offset here



property FETCH_DONE_2_17_p(o);
 bit[31:0] csrfile_mcause_0;
 bit[31:0] csrfile_mepc_0;
 bit[31:0] csrfile_mie_0;
 bit[31:0] csrfile_mip_0;
 bit[31:0] csrfile_mstatus_0;
 bit[31:0] csrfile_mtvec_0;
 bit[31:0] mip_isa_Port_sig_0;
 bit[31:0] fromMemoryPort_sig_loadedData_0;
 bit[31:0] pcReg_0;
	t ##0 hold(csrfile_mcause_0, csrfile_mcause()) and
	t ##0 hold(csrfile_mepc_0, csrfile_mepc()) and
	t ##0 hold(csrfile_mie_0, csrfile_mie()) and
	t ##0 hold(csrfile_mip_0, csrfile_mip()) and
	t ##0 hold(csrfile_mstatus_0, csrfile_mstatus()) and
	t ##0 hold(csrfile_mtvec_0, csrfile_mtvec()) and
	t ##0 hold(mip_isa_Port_sig_0, mip_isa_Port_sig()) and
	t ##0 hold(fromMemoryPort_sig_loadedData_0, fromMemoryPort_sig_loadedData()) and
	t ##0 hold(pcReg_0, pcReg()) and
	t##0 FETCH_DONE_2() and
	t##0 fromMemoryPort_sync() and
	t##0 (getEncType(fromMemoryPort_sig_loadedData()) == ENC_I_S) and
	t##0 (((getInstrType(fromMemoryPort_sig_loadedData()) == INSTR_CSRRW) || (getInstrType(fromMemoryPort_sig_loadedData()) == INSTR_CSRRS)) || (getInstrType(fromMemoryPort_sig_loadedData()) == INSTR_CSRRC)) and
	t##0 !((getImmediate(fromMemoryPort_sig_loadedData()) == 768)) and
	t##0 !((getImmediate(fromMemoryPort_sig_loadedData()) == 772)) and
	t##0 !((getImmediate(fromMemoryPort_sig_loadedData()) == 773)) and
	t##0 !((getImmediate(fromMemoryPort_sig_loadedData()) == 833)) and
	t##0 !((getImmediate(fromMemoryPort_sig_loadedData()) == 834)) and
	t##0 !((getImmediate(fromMemoryPort_sig_loadedData()) == 836))
implies
	t_end(o)##0 FETCH_REQ_1() and
	t_end(o)##0 csrfile_mcause() == updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0) and
	t_end(o)##0 csrfile_mepc() == updateMEPC(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mepc_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0,(pcReg_0 + 4)) and
	t_end(o)##0 csrfile_mie() == csrfile_mie_0 and
	t_end(o)##0 csrfile_mip() == mip_isa_Port_sig_0 and
	t_end(o)##0 csrfile_mstatus() == updateMSTATUS(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0) and
	t_end(o)##0 csrfile_mtvec() == csrfile_mtvec_0 and
	t_end(o)##0 pcReg() == updatePC(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0,csrfile_mtvec_0,(pcReg_0 + 4)) and 
	t_end(o)##0 regfileWrite_dst() == ((fromMemoryPort_sig_loadedData_0>>7) & 31) and
	t_end(o)##0 regfileWrite_dstData() == getCSR(csrfile_mcause_0,csrfile_mepc_0,csrfile_mie_0,csrfile_mip_0,csrfile_mstatus_0,csrfile_mtvec_0,fromMemoryPort_sig_loadedData_0) and
	t_end(o)##0 toRegsPort_sig_dst() == ((fromMemoryPort_sig_loadedData_0>>7) & 31) and
	t_end(o)##0 toRegsPort_sig_dstData() == getCSR(csrfile_mcause_0,csrfile_mepc_0,csrfile_mie_0,csrfile_mip_0,csrfile_mstatus_0,csrfile_mtvec_0,fromMemoryPort_sig_loadedData_0) and
	t_end(o)##0 toMemoryPort_sig_addrIn() == updatePC(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0,csrfile_mtvec_0,(pcReg_0 + 4)) and
	t_end(o)##0 toMemoryPort_sig_dataIn() == 0 and
	t_end(o)##0 toMemoryPort_sig_mask() == MT_W and
	t_end(o)##0 toMemoryPort_sig_req() == ME_RD and
	during_o (t, 1, t_end(o), 0, ecall_isa_Port_notify() == 0) and
	during_o (t, 1, t_end(o), 0, fromMemoryPort_notify() == 0) and
	during_o (t, 1, t_end(o), 0, isa_ecall_Port_notify() == 0) and
	during_o (t, 1, t_end(o) , -1, toMemoryPort_notify() == 0) and
	t_end(o) ##0 toMemoryPort_notify() == 1 and
	during_o (t, 1, t_end(o), -1, toRegsPort_notify() == 0) and
	t_end(o)##0 toRegsPort_notify() == 1;
endproperty;
FETCH_DONE_2_17_a: assert property (disable iff (reset) FETCH_DONE_2_17_p(1)); //ASSIGN t_end offset here



property FETCH_DONE_2_18_p(o);
 bit[31:0] csrfile_mcause_0;
 bit[31:0] csrfile_mepc_0;
 bit[31:0] csrfile_mie_0;
 bit[31:0] csrfile_mip_0;
 bit[31:0] csrfile_mstatus_0;
 bit[31:0] csrfile_mtvec_0;
 bit[31:0] mip_isa_Port_sig_0;
 bit[31:0] fromMemoryPort_sig_loadedData_0;
 bit[31:0] pcReg_0;
	t ##0 hold(csrfile_mcause_0, csrfile_mcause()) and
	t ##0 hold(csrfile_mepc_0, csrfile_mepc()) and
	t ##0 hold(csrfile_mie_0, csrfile_mie()) and
	t ##0 hold(csrfile_mip_0, csrfile_mip()) and
	t ##0 hold(csrfile_mstatus_0, csrfile_mstatus()) and
	t ##0 hold(csrfile_mtvec_0, csrfile_mtvec()) and
	t ##0 hold(mip_isa_Port_sig_0, mip_isa_Port_sig()) and
	t ##0 hold(fromMemoryPort_sig_loadedData_0, fromMemoryPort_sig_loadedData()) and
	t ##0 hold(pcReg_0, pcReg()) and
	t##0 FETCH_DONE_2() and
	t##0 fromMemoryPort_sync() and
	t##0 (getEncType(fromMemoryPort_sig_loadedData()) == ENC_I_S) and
	t##0 (((getInstrType(fromMemoryPort_sig_loadedData()) == INSTR_CSRRWI) || (getInstrType(fromMemoryPort_sig_loadedData()) == INSTR_CSRRSI)) || (getInstrType(fromMemoryPort_sig_loadedData()) == INSTR_CSRRCI)) and
	t##0 (getImmediate(fromMemoryPort_sig_loadedData()) == 768)
implies
	t_end(o)##0 FETCH_REQ_1() and
	t_end(o)##0 csrfile_mcause() == updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,getCSRresult(getCSR(csrfile_mcause_0,csrfile_mepc_0,csrfile_mie_0,csrfile_mip_0,csrfile_mstatus_0,csrfile_mtvec_0,fromMemoryPort_sig_loadedData_0),getInstrType(fromMemoryPort_sig_loadedData_0),((fromMemoryPort_sig_loadedData_0>>15) & 31))) and
	t_end(o)##0 csrfile_mepc() == updateMEPC(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,getCSRresult(getCSR(csrfile_mcause_0,csrfile_mepc_0,csrfile_mie_0,csrfile_mip_0,csrfile_mstatus_0,csrfile_mtvec_0,fromMemoryPort_sig_loadedData_0),getInstrType(fromMemoryPort_sig_loadedData_0),((fromMemoryPort_sig_loadedData_0>>15) & 31))),csrfile_mepc_0,csrfile_mie_0,mip_isa_Port_sig_0,getCSRresult(getCSR(csrfile_mcause_0,csrfile_mepc_0,csrfile_mie_0,csrfile_mip_0,csrfile_mstatus_0,csrfile_mtvec_0,fromMemoryPort_sig_loadedData_0),getInstrType(fromMemoryPort_sig_loadedData_0),((fromMemoryPort_sig_loadedData_0>>15) & 31)),(pcReg_0 + 4)) and
	t_end(o)##0 csrfile_mie() == csrfile_mie_0 and
	t_end(o)##0 csrfile_mip() == mip_isa_Port_sig_0 and
	t_end(o)##0 csrfile_mstatus() == updateMSTATUS(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,getCSRresult(getCSR(csrfile_mcause_0,csrfile_mepc_0,csrfile_mie_0,csrfile_mip_0,csrfile_mstatus_0,csrfile_mtvec_0,fromMemoryPort_sig_loadedData_0),getInstrType(fromMemoryPort_sig_loadedData_0),((fromMemoryPort_sig_loadedData_0>>15) & 31))),csrfile_mie_0,mip_isa_Port_sig_0,getCSRresult(getCSR(csrfile_mcause_0,csrfile_mepc_0,csrfile_mie_0,csrfile_mip_0,csrfile_mstatus_0,csrfile_mtvec_0,fromMemoryPort_sig_loadedData_0),getInstrType(fromMemoryPort_sig_loadedData_0),((fromMemoryPort_sig_loadedData_0>>15) & 31))) and
	t_end(o)##0 csrfile_mtvec() == csrfile_mtvec_0 and
	t_end(o)##0 pcReg() == updatePC(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,getCSRresult(getCSR(csrfile_mcause_0,csrfile_mepc_0,csrfile_mie_0,csrfile_mip_0,csrfile_mstatus_0,csrfile_mtvec_0,fromMemoryPort_sig_loadedData_0),getInstrType(fromMemoryPort_sig_loadedData_0),((fromMemoryPort_sig_loadedData_0>>15) & 31))),csrfile_mie_0,mip_isa_Port_sig_0,getCSRresult(getCSR(csrfile_mcause_0,csrfile_mepc_0,csrfile_mie_0,csrfile_mip_0,csrfile_mstatus_0,csrfile_mtvec_0,fromMemoryPort_sig_loadedData_0),getInstrType(fromMemoryPort_sig_loadedData_0),((fromMemoryPort_sig_loadedData_0>>15) & 31)),csrfile_mtvec_0,(pcReg_0 + 4)) and
	t_end(o)##0 regfileWrite_dst() == ((fromMemoryPort_sig_loadedData_0>>7) & 31) and
	t_end(o)##0 regfileWrite_dstData() == getCSR(csrfile_mcause_0,csrfile_mepc_0,csrfile_mie_0,csrfile_mip_0,csrfile_mstatus_0,csrfile_mtvec_0,fromMemoryPort_sig_loadedData_0) and
	t_end(o)##0 toRegsPort_sig_dst() == ((fromMemoryPort_sig_loadedData_0>>7) & 31) and
	t_end(o)##0 toRegsPort_sig_dstData() == getCSR(csrfile_mcause_0,csrfile_mepc_0,csrfile_mie_0,csrfile_mip_0,csrfile_mstatus_0,csrfile_mtvec_0,fromMemoryPort_sig_loadedData_0) and
	t_end(o)##0 toMemoryPort_sig_addrIn() == updatePC(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,getCSRresult(getCSR(csrfile_mcause_0,csrfile_mepc_0,csrfile_mie_0,csrfile_mip_0,csrfile_mstatus_0,csrfile_mtvec_0,fromMemoryPort_sig_loadedData_0),getInstrType(fromMemoryPort_sig_loadedData_0),((fromMemoryPort_sig_loadedData_0>>15) & 31))),csrfile_mie_0,mip_isa_Port_sig_0,getCSRresult(getCSR(csrfile_mcause_0,csrfile_mepc_0,csrfile_mie_0,csrfile_mip_0,csrfile_mstatus_0,csrfile_mtvec_0,fromMemoryPort_sig_loadedData_0),getInstrType(fromMemoryPort_sig_loadedData_0),((fromMemoryPort_sig_loadedData_0>>15) & 31)),csrfile_mtvec_0,(pcReg_0 + 4)) and
	t_end(o)##0 toMemoryPort_sig_dataIn() == 0 and
	t_end(o)##0 toMemoryPort_sig_mask() == MT_W and
	t_end(o)##0 toMemoryPort_sig_req() == ME_RD and
	during_o (t, 1, t_end(o), 0, ecall_isa_Port_notify() == 0) and
	during_o (t, 1, t_end(o), 0, fromMemoryPort_notify() == 0) and
	during_o (t, 1, t_end(o), 0, isa_ecall_Port_notify() == 0) and
	during_o (t, 1, t_end(o) , -1, toMemoryPort_notify() == 0) and
	t_end(o) ##0 toMemoryPort_notify() == 1 and
	during_o (t, 1, t_end(o), -1, toRegsPort_notify() == 0) and
	t_end(o)##0 toRegsPort_notify() == 1;
endproperty;
FETCH_DONE_2_18_a: assert property (disable iff (reset) FETCH_DONE_2_18_p(1)); //ASSIGN t_end offset here



property FETCH_DONE_2_19_p(o);
 bit[31:0] csrfile_mcause_0;
 bit[31:0] csrfile_mepc_0;
 bit[31:0] csrfile_mie_0;
 bit[31:0] csrfile_mip_0;
 bit[31:0] csrfile_mstatus_0;
 bit[31:0] csrfile_mtvec_0;
 bit[31:0] mip_isa_Port_sig_0;
 bit[31:0] fromMemoryPort_sig_loadedData_0;
 bit[31:0] pcReg_0;
	t ##0 hold(csrfile_mcause_0, csrfile_mcause()) and
	t ##0 hold(csrfile_mepc_0, csrfile_mepc()) and
	t ##0 hold(csrfile_mie_0, csrfile_mie()) and
	t ##0 hold(csrfile_mip_0, csrfile_mip()) and
	t ##0 hold(csrfile_mstatus_0, csrfile_mstatus()) and
	t ##0 hold(csrfile_mtvec_0, csrfile_mtvec()) and
	t ##0 hold(mip_isa_Port_sig_0, mip_isa_Port_sig()) and
	t ##0 hold(fromMemoryPort_sig_loadedData_0, fromMemoryPort_sig_loadedData()) and
	t ##0 hold(pcReg_0, pcReg()) and
	t##0 FETCH_DONE_2() and
	t##0 fromMemoryPort_sync() and
	t##0 (getEncType(fromMemoryPort_sig_loadedData()) == ENC_I_S) and
	t##0 (((getInstrType(fromMemoryPort_sig_loadedData()) == INSTR_CSRRWI) || (getInstrType(fromMemoryPort_sig_loadedData()) == INSTR_CSRRSI)) || (getInstrType(fromMemoryPort_sig_loadedData()) == INSTR_CSRRCI)) and
	t##0 (getImmediate(fromMemoryPort_sig_loadedData()) == 772)
implies
	t_end(o)##0 FETCH_REQ_1() and
	t_end(o)##0 csrfile_mcause() == updateMCAUSE(csrfile_mcause_0,getCSRresult(getCSR(csrfile_mcause_0,csrfile_mepc_0,csrfile_mie_0,csrfile_mip_0,csrfile_mstatus_0,csrfile_mtvec_0,fromMemoryPort_sig_loadedData_0),getInstrType(fromMemoryPort_sig_loadedData_0),((fromMemoryPort_sig_loadedData_0>>15) & 31)),mip_isa_Port_sig_0,csrfile_mstatus_0) and
	t_end(o)##0 csrfile_mepc() == updateMEPC(updateMCAUSE(csrfile_mcause_0,getCSRresult(getCSR(csrfile_mcause_0,csrfile_mepc_0,csrfile_mie_0,csrfile_mip_0,csrfile_mstatus_0,csrfile_mtvec_0,fromMemoryPort_sig_loadedData_0),getInstrType(fromMemoryPort_sig_loadedData_0),((fromMemoryPort_sig_loadedData_0>>15) & 31)),mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mepc_0,getCSRresult(getCSR(csrfile_mcause_0,csrfile_mepc_0,csrfile_mie_0,csrfile_mip_0,csrfile_mstatus_0,csrfile_mtvec_0,fromMemoryPort_sig_loadedData_0),getInstrType(fromMemoryPort_sig_loadedData_0),((fromMemoryPort_sig_loadedData_0>>15) & 31)),mip_isa_Port_sig_0,csrfile_mstatus_0,(pcReg_0 + 4)) and
	t_end(o)##0 csrfile_mie() == getCSRresult(getCSR(csrfile_mcause_0,csrfile_mepc_0,csrfile_mie_0,csrfile_mip_0,csrfile_mstatus_0,csrfile_mtvec_0,fromMemoryPort_sig_loadedData_0),getInstrType(fromMemoryPort_sig_loadedData_0),((fromMemoryPort_sig_loadedData_0>>15) & 31)) and
	t_end(o)##0 csrfile_mip() == mip_isa_Port_sig_0 and
	t_end(o)##0 csrfile_mstatus() == updateMSTATUS(updateMCAUSE(csrfile_mcause_0,getCSRresult(getCSR(csrfile_mcause_0,csrfile_mepc_0,csrfile_mie_0,csrfile_mip_0,csrfile_mstatus_0,csrfile_mtvec_0,fromMemoryPort_sig_loadedData_0),getInstrType(fromMemoryPort_sig_loadedData_0),((fromMemoryPort_sig_loadedData_0>>15) & 31)),mip_isa_Port_sig_0,csrfile_mstatus_0),getCSRresult(getCSR(csrfile_mcause_0,csrfile_mepc_0,csrfile_mie_0,csrfile_mip_0,csrfile_mstatus_0,csrfile_mtvec_0,fromMemoryPort_sig_loadedData_0),getInstrType(fromMemoryPort_sig_loadedData_0),((fromMemoryPort_sig_loadedData_0>>15) & 31)),mip_isa_Port_sig_0,csrfile_mstatus_0) and
	t_end(o)##0 csrfile_mtvec() == csrfile_mtvec_0 and
	t_end(o)##0 pcReg() == updatePC(updateMCAUSE(csrfile_mcause_0,getCSRresult(getCSR(csrfile_mcause_0,csrfile_mepc_0,csrfile_mie_0,csrfile_mip_0,csrfile_mstatus_0,csrfile_mtvec_0,fromMemoryPort_sig_loadedData_0),getInstrType(fromMemoryPort_sig_loadedData_0),((fromMemoryPort_sig_loadedData_0>>15) & 31)),mip_isa_Port_sig_0,csrfile_mstatus_0),getCSRresult(getCSR(csrfile_mcause_0,csrfile_mepc_0,csrfile_mie_0,csrfile_mip_0,csrfile_mstatus_0,csrfile_mtvec_0,fromMemoryPort_sig_loadedData_0),getInstrType(fromMemoryPort_sig_loadedData_0),((fromMemoryPort_sig_loadedData_0>>15) & 31)),mip_isa_Port_sig_0,csrfile_mstatus_0,csrfile_mtvec_0,(pcReg_0 + 4)) and
	t_end(o)##0 regfileWrite_dst() == ((fromMemoryPort_sig_loadedData_0>>7) & 31) and
	t_end(o)##0 regfileWrite_dstData() == getCSR(csrfile_mcause_0,csrfile_mepc_0,csrfile_mie_0,csrfile_mip_0,csrfile_mstatus_0,csrfile_mtvec_0,fromMemoryPort_sig_loadedData_0) and
	t_end(o)##0 toRegsPort_sig_dst() == ((fromMemoryPort_sig_loadedData_0>>7) & 31) and
	t_end(o)##0 toRegsPort_sig_dstData() == getCSR(csrfile_mcause_0,csrfile_mepc_0,csrfile_mie_0,csrfile_mip_0,csrfile_mstatus_0,csrfile_mtvec_0,fromMemoryPort_sig_loadedData_0) and
	t_end(o)##0 toMemoryPort_sig_addrIn() == updatePC(updateMCAUSE(csrfile_mcause_0,getCSRresult(getCSR(csrfile_mcause_0,csrfile_mepc_0,csrfile_mie_0,csrfile_mip_0,csrfile_mstatus_0,csrfile_mtvec_0,fromMemoryPort_sig_loadedData_0),getInstrType(fromMemoryPort_sig_loadedData_0),((fromMemoryPort_sig_loadedData_0>>15) & 31)),mip_isa_Port_sig_0,csrfile_mstatus_0),getCSRresult(getCSR(csrfile_mcause_0,csrfile_mepc_0,csrfile_mie_0,csrfile_mip_0,csrfile_mstatus_0,csrfile_mtvec_0,fromMemoryPort_sig_loadedData_0),getInstrType(fromMemoryPort_sig_loadedData_0),((fromMemoryPort_sig_loadedData_0>>15) & 31)),mip_isa_Port_sig_0,csrfile_mstatus_0,csrfile_mtvec_0,(pcReg_0 + 4)) and
	t_end(o)##0 toMemoryPort_sig_dataIn() == 0 and
	t_end(o)##0 toMemoryPort_sig_mask() == MT_W and
	t_end(o)##0 toMemoryPort_sig_req() == ME_RD and
	during_o (t, 1, t_end(o), 0, ecall_isa_Port_notify() == 0) and
	during_o (t, 1, t_end(o), 0, fromMemoryPort_notify() == 0) and
	during_o (t, 1, t_end(o), 0, isa_ecall_Port_notify() == 0) and
	during_o (t, 1, t_end(o) , -1, toMemoryPort_notify() == 0) and
	t_end(o) ##0 toMemoryPort_notify() == 1 and
	during_o (t, 1, t_end(o), -1, toRegsPort_notify() == 0) and
	t_end(o)##0 toRegsPort_notify() == 1;
endproperty;
FETCH_DONE_2_19_a: assert property (disable iff (reset) FETCH_DONE_2_19_p(1)); //ASSIGN t_end offset here



property FETCH_DONE_2_2_p(o);
 bit[31:0] csrfile_mcause_0;
 bit[31:0] csrfile_mepc_0;
 bit[31:0] csrfile_mie_0;
 bit[31:0] csrfile_mip_0;
 bit[31:0] csrfile_mstatus_0;
 bit[31:0] csrfile_mtvec_0;
 bit[31:0] fromMemoryPort_sig_loadedData_0;
 bit[31:0] mip_isa_Port_sig_0;
 bit[31:0] pcReg_0;
 bit[31:0] regfile_0;
	t ##0 hold(csrfile_mcause_0, csrfile_mcause()) and
	t ##0 hold(csrfile_mepc_0, csrfile_mepc()) and
	t ##0 hold(csrfile_mie_0, csrfile_mie()) and
	t ##0 hold(csrfile_mip_0, csrfile_mip()) and
	t ##0 hold(csrfile_mstatus_0, csrfile_mstatus()) and
	t ##0 hold(csrfile_mtvec_0, csrfile_mtvec()) and
	t ##0 hold(fromMemoryPort_sig_loadedData_0, fromMemoryPort_sig_loadedData()) and
	t ##0 hold(mip_isa_Port_sig_0, mip_isa_Port_sig()) and
	t ##0 hold(pcReg_0, pcReg()) and
	t ##0 hold(regfile_0, regfile()) and
	t##0 FETCH_DONE_2() and
	t##0 fromMemoryPort_sync() and
	t##0 (getEncType(fromMemoryPort_sig_loadedData()) == ENC_R)
implies
	t_end(o)##0 FETCH_REQ_1() and
	t_end(o)##0 csrfile_mcause() == updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0) and
	t_end(o)##0 csrfile_mepc() == updateMEPC(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,csrfile_mip_0,csrfile_mstatus_0),csrfile_mepc_0,csrfile_mie_0,csrfile_mip_0,csrfile_mstatus_0,(pcReg_0 + 4)) and
	t_end(o)##0 csrfile_mie() == csrfile_mie_0 and
	t_end(o)##0 csrfile_mip() == mip_isa_Port_sig_0 and
	t_end(o)##0 csrfile_mstatus() == updateMSTATUS(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0) and
	t_end(o)##0 csrfile_mtvec() == csrfile_mtvec_0 and
	t_end(o)##0 pcReg() == updatePC(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0,csrfile_mtvec_0,(pcReg_0 + 4)) and
	t_end(o)##0 regfileWrite_dst() == ((fromMemoryPort_sig_loadedData_0>>7) & 31) and
	t_end(o)##0 regfileWrite_dstData() == getALUresult(getALUfunc(getInstrType(fromMemoryPort_sig_loadedData_0)),regfile_0[((fromMemoryPort_sig_loadedData_0>>15) & 31)],regfile_0[((fromMemoryPort_sig_loadedData_0>>20) & 31)]) and
	t_end(o)##0 toRegsPort_sig_dst() == ((fromMemoryPort_sig_loadedData_0>>7) & 31) and
	t_end(o)##0 toRegsPort_sig_dstData() == getALUresult(getALUfunc(getInstrType(fromMemoryPort_sig_loadedData_0)),regfile_0[((fromMemoryPort_sig_loadedData_0>>15) & 31)],regfile_0[((fromMemoryPort_sig_loadedData_0>>20) & 31)]) and
	t_end(o)##0 toMemoryPort_sig_addrIn() == updatePC(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0,csrfile_mtvec_0,(pcReg_0 + 4)) and
	t_end(o)##0 toMemoryPort_sig_dataIn() == 0 and
	t_end(o)##0 toMemoryPort_sig_mask() == MT_W and
	t_end(o)##0 toMemoryPort_sig_req() == ME_RD and
	during_o (t, 1, t_end(o), 0, ecall_isa_Port_notify() == 0) and
	during_o (t, 1, t_end(o), 0, fromMemoryPort_notify() == 0) and
	during_o (t, 1, t_end(o), 0, isa_ecall_Port_notify() == 0) and
	during_o (t, 1, t_end(o) , -1, toMemoryPort_notify() == 0) and
	t_end(o) ##0 toMemoryPort_notify() == 1 and
	during_o (t, 1, t_end(o), -1, toRegsPort_notify() == 0) and
	t_end(o)##0 toRegsPort_notify() == 1;
endproperty;
FETCH_DONE_2_2_a: assert property (disable iff (reset) FETCH_DONE_2_2_p(1)); //ASSIGN t_end offset here



property FETCH_DONE_2_20_p(o);
 bit[31:0] csrfile_mcause_0;
 bit[31:0] csrfile_mepc_0;
 bit[31:0] csrfile_mie_0;
 bit[31:0] csrfile_mip_0;
 bit[31:0] csrfile_mstatus_0;
 bit[31:0] csrfile_mtvec_0;
 bit[31:0] mip_isa_Port_sig_0;
 bit[31:0] fromMemoryPort_sig_loadedData_0;
 bit[31:0] pcReg_0;
	t ##0 hold(csrfile_mcause_0, csrfile_mcause()) and
	t ##0 hold(csrfile_mepc_0, csrfile_mepc()) and
	t ##0 hold(csrfile_mie_0, csrfile_mie()) and
	t ##0 hold(csrfile_mip_0, csrfile_mip()) and
	t ##0 hold(csrfile_mstatus_0, csrfile_mstatus()) and
	t ##0 hold(csrfile_mtvec_0, csrfile_mtvec()) and
	t ##0 hold(mip_isa_Port_sig_0, mip_isa_Port_sig()) and
	t ##0 hold(fromMemoryPort_sig_loadedData_0, fromMemoryPort_sig_loadedData()) and
	t ##0 hold(pcReg_0, pcReg()) and
	t##0 FETCH_DONE_2() and
	t##0 fromMemoryPort_sync() and
	t##0 (getEncType(fromMemoryPort_sig_loadedData()) == ENC_I_S) and
	t##0 (((getInstrType(fromMemoryPort_sig_loadedData()) == INSTR_CSRRWI) || (getInstrType(fromMemoryPort_sig_loadedData()) == INSTR_CSRRSI)) || (getInstrType(fromMemoryPort_sig_loadedData()) == INSTR_CSRRCI)) and
	t##0 (getImmediate(fromMemoryPort_sig_loadedData()) == 773)
implies
	t_end(o)##0 FETCH_REQ_1() and
	t_end(o)##0 csrfile_mcause() == updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0) and
	t_end(o)##0 csrfile_mepc() == updateMEPC(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mepc_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0,(pcReg_0 + 4)) and
	t_end(o)##0 csrfile_mie() == csrfile_mie_0 and
	t_end(o)##0 csrfile_mip() == mip_isa_Port_sig_0 and
	t_end(o)##0 csrfile_mstatus() == updateMSTATUS(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0) and
	t_end(o)##0 csrfile_mtvec() == getCSRresult(getCSR(csrfile_mcause_0,csrfile_mepc_0,csrfile_mie_0,csrfile_mip_0,csrfile_mstatus_0,csrfile_mtvec_0,fromMemoryPort_sig_loadedData_0),getInstrType(fromMemoryPort_sig_loadedData_0),((fromMemoryPort_sig_loadedData_0>>15) & 31)) and
	t_end(o)##0 pcReg() == updatePC(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0,getCSRresult(getCSR(csrfile_mcause_0,csrfile_mepc_0,csrfile_mie_0,csrfile_mip_0,csrfile_mstatus_0,csrfile_mtvec_0,fromMemoryPort_sig_loadedData_0),getInstrType(fromMemoryPort_sig_loadedData_0),((fromMemoryPort_sig_loadedData_0>>15) & 31)),(pcReg_0 + 4)) and
	t_end(o)##0 regfileWrite_dst() == ((fromMemoryPort_sig_loadedData_0>>7) & 31) and
	t_end(o)##0 regfileWrite_dstData() == getCSR(csrfile_mcause_0,csrfile_mepc_0,csrfile_mie_0,csrfile_mip_0,csrfile_mstatus_0,csrfile_mtvec_0,fromMemoryPort_sig_loadedData_0) and
	t_end(o)##0 toRegsPort_sig_dst() == ((fromMemoryPort_sig_loadedData_0>>7) & 31) and
	t_end(o)##0 toRegsPort_sig_dstData() == getCSR(csrfile_mcause_0,csrfile_mepc_0,csrfile_mie_0,csrfile_mip_0,csrfile_mstatus_0,csrfile_mtvec_0,fromMemoryPort_sig_loadedData_0) and
	t_end(o)##0 toMemoryPort_sig_addrIn() == updatePC(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0,getCSRresult(getCSR(csrfile_mcause_0,csrfile_mepc_0,csrfile_mie_0,csrfile_mip_0,csrfile_mstatus_0,csrfile_mtvec_0,fromMemoryPort_sig_loadedData_0),getInstrType(fromMemoryPort_sig_loadedData_0),((fromMemoryPort_sig_loadedData_0>>15) & 31)),(pcReg_0 + 4)) and
	t_end(o)##0 toMemoryPort_sig_dataIn() == 0 and
	t_end(o)##0 toMemoryPort_sig_mask() == MT_W and
	t_end(o)##0 toMemoryPort_sig_req() == ME_RD and
	during_o (t, 1, t_end(o), 0, ecall_isa_Port_notify() == 0) and
	during_o (t, 1, t_end(o), 0, fromMemoryPort_notify() == 0) and
	during_o (t, 1, t_end(o), 0, isa_ecall_Port_notify() == 0) and
	during_o (t, 1, t_end(o) , -1, toMemoryPort_notify() == 0) and
	t_end(o) ##0 toMemoryPort_notify() == 1 and
	during_o (t, 1, t_end(o), -1, toRegsPort_notify() == 0) and
	t_end(o)##0 toRegsPort_notify() == 1;
endproperty;
FETCH_DONE_2_20_a: assert property (disable iff (reset) FETCH_DONE_2_20_p(1)); //ASSIGN t_end offset here



property FETCH_DONE_2_21_p(o);
 bit[31:0] csrfile_mcause_0;
 bit[31:0] csrfile_mepc_0;
 bit[31:0] csrfile_mie_0;
 bit[31:0] csrfile_mip_0;
 bit[31:0] csrfile_mstatus_0;
 bit[31:0] csrfile_mtvec_0;
 bit[31:0] mip_isa_Port_sig_0;
 bit[31:0] fromMemoryPort_sig_loadedData_0;
 bit[31:0] pcReg_0;
	t ##0 hold(csrfile_mcause_0, csrfile_mcause()) and
	t ##0 hold(csrfile_mepc_0, csrfile_mepc()) and
	t ##0 hold(csrfile_mie_0, csrfile_mie()) and
	t ##0 hold(csrfile_mip_0, csrfile_mip()) and
	t ##0 hold(csrfile_mstatus_0, csrfile_mstatus()) and
	t ##0 hold(csrfile_mtvec_0, csrfile_mtvec()) and
	t ##0 hold(mip_isa_Port_sig_0, mip_isa_Port_sig()) and
	t ##0 hold(fromMemoryPort_sig_loadedData_0, fromMemoryPort_sig_loadedData()) and
	t ##0 hold(pcReg_0, pcReg()) and
	t##0 FETCH_DONE_2() and
	t##0 fromMemoryPort_sync() and
	t##0 (getEncType(fromMemoryPort_sig_loadedData()) == ENC_I_S) and
	t##0 (((getInstrType(fromMemoryPort_sig_loadedData()) == INSTR_CSRRWI) || (getInstrType(fromMemoryPort_sig_loadedData()) == INSTR_CSRRSI)) || (getInstrType(fromMemoryPort_sig_loadedData()) == INSTR_CSRRCI)) and
	t##0 (getImmediate(fromMemoryPort_sig_loadedData()) == 833)
implies
	t_end(o)##0 FETCH_REQ_1() and
	t_end(o)##0 csrfile_mcause() == updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0) and
	t_end(o)##0 csrfile_mepc() == updateMEPC(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),getCSRresult(getCSR(csrfile_mcause_0,csrfile_mepc_0,csrfile_mie_0,csrfile_mip_0,csrfile_mstatus_0,csrfile_mtvec_0,fromMemoryPort_sig_loadedData_0),getInstrType(fromMemoryPort_sig_loadedData_0),((fromMemoryPort_sig_loadedData_0>>15) & 31)),csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0,(pcReg_0 + 4)) and
	t_end(o)##0 csrfile_mie() == csrfile_mie_0 and
	t_end(o)##0 csrfile_mip() == mip_isa_Port_sig_0 and
	t_end(o)##0 csrfile_mstatus() == updateMSTATUS(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0) and
	t_end(o)##0 csrfile_mtvec() == csrfile_mtvec_0 and
	t_end(o)##0 pcReg() == updatePC(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0,csrfile_mtvec_0,(pcReg_0 + 4)) and
	t_end(o)##0 regfileWrite_dst() == ((fromMemoryPort_sig_loadedData_0>>7) & 31) and
	t_end(o)##0 regfileWrite_dstData() == getCSR(csrfile_mcause_0,csrfile_mepc_0,csrfile_mie_0,csrfile_mip_0,csrfile_mstatus_0,csrfile_mtvec_0,fromMemoryPort_sig_loadedData_0) and
	t_end(o)##0 toRegsPort_sig_dst() == ((fromMemoryPort_sig_loadedData_0>>7) & 31) and
	t_end(o)##0 toRegsPort_sig_dstData() == getCSR(csrfile_mcause_0,csrfile_mepc_0,csrfile_mie_0,csrfile_mip_0,csrfile_mstatus_0,csrfile_mtvec_0,fromMemoryPort_sig_loadedData_0) and
	t_end(o)##0 toMemoryPort_sig_addrIn() == updatePC(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0,csrfile_mtvec_0,(pcReg_0 + 4)) and
	t_end(o)##0 toMemoryPort_sig_dataIn() == 0 and
	t_end(o)##0 toMemoryPort_sig_mask() == MT_W and
	t_end(o)##0 toMemoryPort_sig_req() == ME_RD and
	during_o (t, 1, t_end(o), 0, ecall_isa_Port_notify() == 0) and
	during_o (t, 1, t_end(o), 0, fromMemoryPort_notify() == 0) and
	during_o (t, 1, t_end(o), 0, isa_ecall_Port_notify() == 0) and
	during_o (t, 1, t_end(o) , -1, toMemoryPort_notify() == 0) and
	t_end(o) ##0 toMemoryPort_notify() == 1 and
	during_o (t, 1, t_end(o), -1, toRegsPort_notify() == 0) and
	t_end(o)##0 toRegsPort_notify() == 1;
endproperty;
FETCH_DONE_2_21_a: assert property (disable iff (reset) FETCH_DONE_2_21_p(1)); //ASSIGN t_end offset here



property FETCH_DONE_2_22_p(o);
 bit[31:0] csrfile_mcause_0;
 bit[31:0] csrfile_mepc_0;
 bit[31:0] csrfile_mie_0;
 bit[31:0] csrfile_mip_0;
 bit[31:0] csrfile_mstatus_0;
 bit[31:0] csrfile_mtvec_0;
 bit[31:0] mip_isa_Port_sig_0;
 bit[31:0] fromMemoryPort_sig_loadedData_0;
 bit[31:0] pcReg_0;
	t ##0 hold(csrfile_mcause_0, csrfile_mcause()) and
	t ##0 hold(csrfile_mepc_0, csrfile_mepc()) and
	t ##0 hold(csrfile_mie_0, csrfile_mie()) and
	t ##0 hold(csrfile_mip_0, csrfile_mip()) and
	t ##0 hold(csrfile_mstatus_0, csrfile_mstatus()) and
	t ##0 hold(csrfile_mtvec_0, csrfile_mtvec()) and
	t ##0 hold(mip_isa_Port_sig_0, mip_isa_Port_sig()) and
	t ##0 hold(fromMemoryPort_sig_loadedData_0, fromMemoryPort_sig_loadedData()) and
	t ##0 hold(pcReg_0, pcReg()) and
	t##0 FETCH_DONE_2() and
	t##0 fromMemoryPort_sync() and
	t##0 (getEncType(fromMemoryPort_sig_loadedData()) == ENC_I_S) and
	t##0 (((getInstrType(fromMemoryPort_sig_loadedData()) == INSTR_CSRRWI) || (getInstrType(fromMemoryPort_sig_loadedData()) == INSTR_CSRRSI)) || (getInstrType(fromMemoryPort_sig_loadedData()) == INSTR_CSRRCI)) and
	t##0 (getImmediate(fromMemoryPort_sig_loadedData()) == 834)
implies
	t_end(o)##0 FETCH_REQ_1() and
	t_end(o)##0 csrfile_mcause() == updateMCAUSE(getCSRresult(getCSR(csrfile_mcause_0,csrfile_mepc_0,csrfile_mie_0,csrfile_mip_0,csrfile_mstatus_0,csrfile_mtvec_0,fromMemoryPort_sig_loadedData_0),getInstrType(fromMemoryPort_sig_loadedData_0),((fromMemoryPort_sig_loadedData_0>>15) & 31)),csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0) and
	t_end(o)##0 csrfile_mepc() == updateMEPC(updateMCAUSE(getCSRresult(getCSR(csrfile_mcause_0,csrfile_mepc_0,csrfile_mie_0,csrfile_mip_0,csrfile_mstatus_0,csrfile_mtvec_0,fromMemoryPort_sig_loadedData_0),getInstrType(fromMemoryPort_sig_loadedData_0),((fromMemoryPort_sig_loadedData_0>>15) & 31)),csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mepc_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0,(pcReg_0 + 4)) and
	t_end(o)##0 csrfile_mie() == csrfile_mie_0 and
	t_end(o)##0 csrfile_mip() == mip_isa_Port_sig_0 and
	t_end(o)##0 csrfile_mstatus() == updateMSTATUS(updateMCAUSE(getCSRresult(getCSR(csrfile_mcause_0,csrfile_mepc_0,csrfile_mie_0,csrfile_mip_0,csrfile_mstatus_0,csrfile_mtvec_0,fromMemoryPort_sig_loadedData_0),getInstrType(fromMemoryPort_sig_loadedData_0),((fromMemoryPort_sig_loadedData_0>>15) & 31)),csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0) and
	t_end(o)##0 csrfile_mtvec() == csrfile_mtvec_0 and
	t_end(o)##0 pcReg() == updatePC(updateMCAUSE(getCSRresult(getCSR(csrfile_mcause_0,csrfile_mepc_0,csrfile_mie_0,csrfile_mip_0,csrfile_mstatus_0,csrfile_mtvec_0,fromMemoryPort_sig_loadedData_0),getInstrType(fromMemoryPort_sig_loadedData_0),((fromMemoryPort_sig_loadedData_0>>15) & 31)),csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0,csrfile_mtvec_0,(pcReg_0 + 4)) and
	t_end(o)##0 regfileWrite_dst() == ((fromMemoryPort_sig_loadedData_0>>7) & 31) and
	t_end(o)##0 regfileWrite_dstData() == getCSR(csrfile_mcause_0,csrfile_mepc_0,csrfile_mie_0,csrfile_mip_0,csrfile_mstatus_0,csrfile_mtvec_0,fromMemoryPort_sig_loadedData_0) and
	t_end(o)##0 toRegsPort_sig_dst() == ((fromMemoryPort_sig_loadedData_0>>7) & 31) and
	t_end(o)##0 toRegsPort_sig_dstData() == getCSR(csrfile_mcause_0,csrfile_mepc_0,csrfile_mie_0,csrfile_mip_0,csrfile_mstatus_0,csrfile_mtvec_0,fromMemoryPort_sig_loadedData_0) and
	t_end(o)##0 toMemoryPort_sig_addrIn() == updatePC(updateMCAUSE(getCSRresult(getCSR(csrfile_mcause_0,csrfile_mepc_0,csrfile_mie_0,csrfile_mip_0,csrfile_mstatus_0,csrfile_mtvec_0,fromMemoryPort_sig_loadedData_0),getInstrType(fromMemoryPort_sig_loadedData_0),((fromMemoryPort_sig_loadedData_0>>15) & 31)),csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0,csrfile_mtvec_0,(pcReg_0 + 4)) and
	t_end(o)##0 toMemoryPort_sig_dataIn() == 0 and
	t_end(o)##0 toMemoryPort_sig_mask() == MT_W and
	t_end(o)##0 toMemoryPort_sig_req() == ME_RD and
	during_o (t, 1, t_end(o), 0, ecall_isa_Port_notify() == 0) and
	during_o (t, 1, t_end(o), 0, fromMemoryPort_notify() == 0) and
	during_o (t, 1, t_end(o), 0, isa_ecall_Port_notify() == 0) and
	during_o (t, 1, t_end(o) , -1, toMemoryPort_notify() == 0) and
	t_end(o) ##0 toMemoryPort_notify() == 1 and
	during_o (t, 1, t_end(o), -1, toRegsPort_notify() == 0) and
	t_end(o)##0 toRegsPort_notify() == 1;
endproperty;
FETCH_DONE_2_22_a: assert property (disable iff (reset) FETCH_DONE_2_22_p(1)); //ASSIGN t_end offset here



property FETCH_DONE_2_23_p(o);
 bit[31:0] csrfile_mcause_0;
 bit[31:0] csrfile_mepc_0;
 bit[31:0] csrfile_mie_0;
 bit[31:0] csrfile_mip_0;
 bit[31:0] csrfile_mstatus_0;
 bit[31:0] csrfile_mtvec_0;
 bit[31:0] mip_isa_Port_sig_0;
 bit[31:0] fromMemoryPort_sig_loadedData_0;
 bit[31:0] pcReg_0;
	t ##0 hold(csrfile_mcause_0, csrfile_mcause()) and
	t ##0 hold(csrfile_mepc_0, csrfile_mepc()) and
	t ##0 hold(csrfile_mie_0, csrfile_mie()) and
	t ##0 hold(csrfile_mip_0, csrfile_mip()) and
	t ##0 hold(csrfile_mstatus_0, csrfile_mstatus()) and
	t ##0 hold(csrfile_mtvec_0, csrfile_mtvec()) and
	t ##0 hold(mip_isa_Port_sig_0, mip_isa_Port_sig()) and
	t ##0 hold(fromMemoryPort_sig_loadedData_0, fromMemoryPort_sig_loadedData()) and
	t ##0 hold(pcReg_0, pcReg()) and
	t##0 FETCH_DONE_2() and
	t##0 fromMemoryPort_sync() and
	t##0 (getEncType(fromMemoryPort_sig_loadedData()) == ENC_I_S) and
	t##0 (((getInstrType(fromMemoryPort_sig_loadedData()) == INSTR_CSRRWI) || (getInstrType(fromMemoryPort_sig_loadedData()) == INSTR_CSRRSI)) || (getInstrType(fromMemoryPort_sig_loadedData()) == INSTR_CSRRCI)) and
	t##0 (getImmediate(fromMemoryPort_sig_loadedData()) == 836)
implies
	t_end(o)##0 FETCH_REQ_1() and
	t_end(o)##0 csrfile_mcause() == updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0) and
	t_end(o)##0 csrfile_mepc() == updateMEPC(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mepc_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0,(pcReg_0 + 4)) and
	t_end(o)##0 csrfile_mie() == csrfile_mie_0 and
	t_end(o)##0 csrfile_mip() == mip_isa_Port_sig_0 and
	t_end(o)##0 csrfile_mstatus() == updateMSTATUS(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0) and
	t_end(o)##0 csrfile_mtvec() == csrfile_mtvec_0 and
	t_end(o)##0 pcReg() == updatePC(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0,csrfile_mtvec_0,(pcReg_0 + 4)) and
	t_end(o)##0 regfileWrite_dst() == ((fromMemoryPort_sig_loadedData_0>>7) & 31) and
	t_end(o)##0 regfileWrite_dstData() == getCSR(csrfile_mcause_0,csrfile_mepc_0,csrfile_mie_0,csrfile_mip_0,csrfile_mstatus_0,csrfile_mtvec_0,fromMemoryPort_sig_loadedData_0) and
	t_end(o)##0 toRegsPort_sig_dst() == ((fromMemoryPort_sig_loadedData_0>>7) & 31) and
	t_end(o)##0 toRegsPort_sig_dstData() == getCSR(csrfile_mcause_0,csrfile_mepc_0,csrfile_mie_0,csrfile_mip_0,csrfile_mstatus_0,csrfile_mtvec_0,fromMemoryPort_sig_loadedData_0) and
	t_end(o)##0 toMemoryPort_sig_addrIn() == updatePC(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0,csrfile_mtvec_0,(pcReg_0 + 4)) and
	t_end(o)##0 toMemoryPort_sig_dataIn() == 0 and
	t_end(o)##0 toMemoryPort_sig_mask() == MT_W and
	t_end(o)##0 toMemoryPort_sig_req() == ME_RD and
	during_o (t, 1, t_end(o), 0, ecall_isa_Port_notify() == 0) and
	during_o (t, 1, t_end(o), 0, fromMemoryPort_notify() == 0) and
	during_o (t, 1, t_end(o), 0, isa_ecall_Port_notify() == 0) and
	during_o (t, 1, t_end(o) , -1, toMemoryPort_notify() == 0) and
	t_end(o) ##0 toMemoryPort_notify() == 1 and
	during_o (t, 1, t_end(o), -1, toRegsPort_notify() == 0) and
	t_end(o)##0 toRegsPort_notify() == 1;
endproperty;
FETCH_DONE_2_23_a: assert property (disable iff (reset) FETCH_DONE_2_23_p(1)); //ASSIGN t_end offset here



property FETCH_DONE_2_24_p(o);
 bit[31:0] csrfile_mcause_0;
 bit[31:0] csrfile_mepc_0;
 bit[31:0] csrfile_mie_0;
 bit[31:0] csrfile_mip_0;
 bit[31:0] csrfile_mstatus_0;
 bit[31:0] csrfile_mtvec_0;
 bit[31:0] mip_isa_Port_sig_0;
 bit[31:0] fromMemoryPort_sig_loadedData_0;
 bit[31:0] pcReg_0;
	t ##0 hold(csrfile_mcause_0, csrfile_mcause()) and
	t ##0 hold(csrfile_mepc_0, csrfile_mepc()) and
	t ##0 hold(csrfile_mie_0, csrfile_mie()) and
	t ##0 hold(csrfile_mip_0, csrfile_mip()) and
	t ##0 hold(csrfile_mstatus_0, csrfile_mstatus()) and
	t ##0 hold(csrfile_mtvec_0, csrfile_mtvec()) and
	t ##0 hold(mip_isa_Port_sig_0, mip_isa_Port_sig()) and
	t ##0 hold(fromMemoryPort_sig_loadedData_0, fromMemoryPort_sig_loadedData()) and
	t ##0 hold(pcReg_0, pcReg()) and
	t##0 FETCH_DONE_2() and
	t##0 fromMemoryPort_sync() and
	t##0 (getEncType(fromMemoryPort_sig_loadedData()) == ENC_I_S) and
	t##0 (((getInstrType(fromMemoryPort_sig_loadedData()) == INSTR_CSRRWI) || (getInstrType(fromMemoryPort_sig_loadedData()) == INSTR_CSRRSI)) || (getInstrType(fromMemoryPort_sig_loadedData()) == INSTR_CSRRCI)) and
	t##0 !((getImmediate(fromMemoryPort_sig_loadedData()) == 768)) and
	t##0 !((getImmediate(fromMemoryPort_sig_loadedData()) == 772)) and
	t##0 !((getImmediate(fromMemoryPort_sig_loadedData()) == 773)) and
	t##0 !((getImmediate(fromMemoryPort_sig_loadedData()) == 833)) and
	t##0 !((getImmediate(fromMemoryPort_sig_loadedData()) == 834)) and
	t##0 !((getImmediate(fromMemoryPort_sig_loadedData()) == 836))
implies
	t_end(o)##0 FETCH_REQ_1() and
	t_end(o)##0 csrfile_mcause() == updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0) and
	t_end(o)##0 csrfile_mepc() == updateMEPC(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mepc_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0,(pcReg_0 + 4)) and
	t_end(o)##0 csrfile_mie() == csrfile_mie_0 and
	t_end(o)##0 csrfile_mip() == mip_isa_Port_sig_0 and
	t_end(o)##0 csrfile_mstatus() == updateMSTATUS(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0) and
	t_end(o)##0 csrfile_mtvec() == csrfile_mtvec_0 and
	t_end(o)##0 pcReg() == updatePC(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0,csrfile_mtvec_0,(pcReg_0 + 4)) and 
	t_end(o)##0 regfileWrite_dst() == ((fromMemoryPort_sig_loadedData_0>>7) & 31) and
	t_end(o)##0 regfileWrite_dstData() == getCSR(csrfile_mcause_0,csrfile_mepc_0,csrfile_mie_0,csrfile_mip_0,csrfile_mstatus_0,csrfile_mtvec_0,fromMemoryPort_sig_loadedData_0) and
	t_end(o)##0 toRegsPort_sig_dst() == ((fromMemoryPort_sig_loadedData_0>>7) & 31) and
	t_end(o)##0 toRegsPort_sig_dstData() == getCSR(csrfile_mcause_0,csrfile_mepc_0,csrfile_mie_0,csrfile_mip_0,csrfile_mstatus_0,csrfile_mtvec_0,fromMemoryPort_sig_loadedData_0) and
	t_end(o)##0 toMemoryPort_sig_addrIn() == updatePC(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0,csrfile_mtvec_0,(pcReg_0 + 4)) and
	t_end(o)##0 toMemoryPort_sig_dataIn() == 0 and
	t_end(o)##0 toMemoryPort_sig_mask() == MT_W and
	t_end(o)##0 toMemoryPort_sig_req() == ME_RD and
	during_o (t, 1, t_end(o), 0, ecall_isa_Port_notify() == 0) and
	during_o (t, 1, t_end(o), 0, fromMemoryPort_notify() == 0) and
	during_o (t, 1, t_end(o), 0, isa_ecall_Port_notify() == 0) and
	during_o (t, 1, t_end(o) , -1, toMemoryPort_notify() == 0) and
	t_end(o) ##0 toMemoryPort_notify() == 1 and
	during_o (t, 1, t_end(o), -1, toRegsPort_notify() == 0) and
	t_end(o)##0 toRegsPort_notify() == 1;
endproperty;
FETCH_DONE_2_24_a: assert property (disable iff (reset) FETCH_DONE_2_24_p(1)); //ASSIGN t_end offset here



property FETCH_DONE_2_25_p(o);
 bit[31:0] csrfile_mcause_0;
 bit[31:0] csrfile_mepc_0;
 bit[31:0] csrfile_mie_0;
 bit[31:0] csrfile_mip_0;
 bit[31:0] csrfile_mstatus_0;
 bit[31:0] csrfile_mtvec_0;
 bit[31:0] fromMemoryPort_sig_loadedData_0;
 bit[31:0] pcReg_0;
 bit[31:0] regfileWrite_dst_0;
 bit[31:0] regfileWrite_dstData_0;
	t ##0 hold(csrfile_mcause_0, csrfile_mcause()) and
	t ##0 hold(csrfile_mepc_0, csrfile_mepc()) and
	t ##0 hold(csrfile_mie_0, csrfile_mie()) and
	t ##0 hold(csrfile_mip_0, csrfile_mip()) and
	t ##0 hold(csrfile_mstatus_0, csrfile_mstatus()) and
	t ##0 hold(csrfile_mtvec_0, csrfile_mtvec()) and
	t ##0 hold(fromMemoryPort_sig_loadedData_0, fromMemoryPort_sig_loadedData()) and
	t ##0 hold(pcReg_0, pcReg()) and
	t ##0 hold(regfileWrite_dst_0, regfileWrite_dst()) and
	t ##0 hold(regfileWrite_dstData_0, regfileWrite_dstData()) and
	t##0 FETCH_DONE_2() and
	t##0 fromMemoryPort_sync() and
	t##0 (getEncType(fromMemoryPort_sig_loadedData()) == ENC_I_S) and
	t##0 (getInstrType(fromMemoryPort_sig_loadedData()) == INSTR_PRIV) and
	t##0 (getPrivInstrType(fromMemoryPort_sig_loadedData()) == INSTR_ECALL)
implies
	t_end(o)##0 ECALL_REQ_6() and
	t_end(o)##0 csrfile_mcause() == csrfile_mcause_0 and
	t_end(o)##0 csrfile_mepc() == csrfile_mepc_0 and
	t_end(o)##0 csrfile_mie() == csrfile_mie_0 and
	t_end(o)##0 csrfile_mip() == csrfile_mip_0 and
	t_end(o)##0 csrfile_mstatus() == csrfile_mstatus_0 and
	t_end(o)##0 csrfile_mtvec() == csrfile_mtvec_0 and
	t_end(o)##0 isa_ecall_Port_sig() == 1 and
	t_end(o)##0 pcReg() == pcReg_0 and
	t_end(o)##0 regfileWrite_dst() == regfileWrite_dst_0 and
	t_end(o)##0 regfileWrite_dstData() == regfileWrite_dstData_0 and
	during_o (t, 1, t_end(o), 0, ecall_isa_Port_notify() == 0) and
	during_o (t, 1, t_end(o), 0, fromMemoryPort_notify() == 0) and
	during_o (t, 1, t_end(o), -1, isa_ecall_Port_notify() == 0) and
	t_end(o)##0 isa_ecall_Port_notify() == 1 and
	during_o (t, 1, t_end(o), 0, toMemoryPort_notify() == 0) and
	during_o (t, 1, t_end(o), 0, toRegsPort_notify() == 0);
endproperty;
FETCH_DONE_2_25_a: assert property (disable iff (reset) FETCH_DONE_2_25_p(1)); //ASSIGN t_end offset here



property FETCH_DONE_2_26_p(o);
 bit[31:0] csrfile_mcause_0;
 bit[31:0] csrfile_mepc_0;
 bit[31:0] csrfile_mie_0;
 bit[31:0] csrfile_mstatus_0;
 bit[31:0] csrfile_mtvec_0;
 bit[31:0] fromMemoryPort_sig_loadedData_0;
 bit[31:0] mip_isa_Port_sig_0;
 bit[31:0] pcReg_0;
 bit[31:0] regfileWrite_dst_0;
 bit[31:0] regfileWrite_dstData_0;
	t ##0 hold(csrfile_mcause_0, csrfile_mcause()) and
	t ##0 hold(csrfile_mepc_0, csrfile_mepc()) and
	t ##0 hold(csrfile_mie_0, csrfile_mie()) and
	t ##0 hold(csrfile_mstatus_0, csrfile_mstatus()) and
	t ##0 hold(csrfile_mtvec_0, csrfile_mtvec()) and
	t ##0 hold(fromMemoryPort_sig_loadedData_0, fromMemoryPort_sig_loadedData()) and
	t ##0 hold(mip_isa_Port_sig_0, mip_isa_Port_sig()) and
	t ##0 hold(pcReg_0, pcReg()) and
	t ##0 hold(regfileWrite_dst_0, regfileWrite_dst()) and
	t ##0 hold(regfileWrite_dstData_0, regfileWrite_dstData()) and
	t##0 FETCH_DONE_2() and
	t##0 fromMemoryPort_sync() and
	t##0 (getEncType(fromMemoryPort_sig_loadedData()) == ENC_I_S) and
	t##0 (getInstrType(fromMemoryPort_sig_loadedData()) == INSTR_PRIV) and
	t##0 (getPrivInstrType(fromMemoryPort_sig_loadedData()) == INSTR_EBREAK)
implies
	t_end(o)##0 FETCH_REQ_1() and
	t_end(o)##0 csrfile_mcause() == updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0) and
	t_end(o)##0 csrfile_mepc() == updateMEPC(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mepc_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0,(pcReg_0+4)) and
	t_end(o)##0 csrfile_mie() == csrfile_mie_0 and
	t_end(o)##0 csrfile_mip() == mip_isa_Port_sig_0 and
	t_end(o)##0 csrfile_mstatus() == updateMSTATUS(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0) and
	t_end(o)##0 csrfile_mtvec() == csrfile_mtvec_0 and
	t_end(o)##0 pcReg() == updatePC(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0,csrfile_mtvec_0,(pcReg_0+4)) and
	t_end(o)##0 regfileWrite_dst() == regfileWrite_dst_0 and
	t_end(o)##0 regfileWrite_dstData() == regfileWrite_dstData_0 and
	t_end(o)##0 toMemoryPort_sig_addrIn() == updatePC(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0,csrfile_mtvec_0,(pcReg_0+4)) and
	t_end(o)##0 toMemoryPort_sig_dataIn() == 0 and
	t_end(o)##0 toMemoryPort_sig_mask() == MT_W and
	t_end(o)##0 toMemoryPort_sig_req() == ME_RD and
	during_o (t, 1, t_end(o), 0, ecall_isa_Port_notify() == 0) and
	during_o (t, 1, t_end(o), 0, fromMemoryPort_notify() == 0) and
	during_o (t, 1, t_end(o), 0, isa_ecall_Port_notify() == 0) and
	during_o (t, 1, t_end(o), -1, toMemoryPort_notify() == 0) and
	t_end(o)##0 toMemoryPort_notify() == 1 and
	during_o (t, 1, t_end(o), 0, toRegsPort_notify() == 0);
endproperty;
FETCH_DONE_2_26_a: assert property (disable iff (reset) FETCH_DONE_2_26_p(1)); //ASSIGN t_end offset here



property FETCH_DONE_2_27_p(o);
 bit[31:0] csrfile_mepc_0;
 bit[31:0] csrfile_mie_0;
 bit[31:0] csrfile_mstatus_0;
 bit[31:0] csrfile_mtvec_0;
 bit[31:0] fromMemoryPort_sig_loadedData_0;
 bit[31:0] mip_isa_Port_sig_0;
 bit[31:0] regfileWrite_dst_0;
 bit[31:0] regfileWrite_dstData_0;
	t ##0 hold(csrfile_mepc_0, csrfile_mepc()) and
	t ##0 hold(csrfile_mie_0, csrfile_mie()) and
	t ##0 hold(csrfile_mstatus_0, csrfile_mstatus()) and
	t ##0 hold(csrfile_mtvec_0, csrfile_mtvec()) and
	t ##0 hold(fromMemoryPort_sig_loadedData_0, fromMemoryPort_sig_loadedData()) and
	t ##0 hold(mip_isa_Port_sig_0, mip_isa_Port_sig()) and
	t ##0 hold(regfileWrite_dst_0, regfileWrite_dst()) and
	t ##0 hold(regfileWrite_dstData_0, regfileWrite_dstData()) and
	t##0 FETCH_DONE_2() and
	t##0 fromMemoryPort_sync() and
	t##0 (getEncType(fromMemoryPort_sig_loadedData()) == ENC_I_S) and
	t##0 (getInstrType(fromMemoryPort_sig_loadedData()) == INSTR_PRIV) and
	t##0 (getPrivInstrType(fromMemoryPort_sig_loadedData()) == INSTR_MRET)
implies
	t_end(o)##0 FETCH_REQ_1() and
	t_end(o)##0 csrfile_mcause() == updateMCAUSE(0,csrfile_mie_0,mip_isa_Port_sig_0,(csrfile_mstatus_0 | 8)) and
	t_end(o)##0 csrfile_mepc() == updateMEPC(updateMCAUSE(0,csrfile_mie_0,mip_isa_Port_sig_0,(csrfile_mstatus_0 | 8)),csrfile_mepc_0,csrfile_mie_0,mip_isa_Port_sig_0,(csrfile_mstatus_0 | 8),csrfile_mepc_0) and
	t_end(o)##0 csrfile_mie() == csrfile_mie_0 and
	t_end(o)##0 csrfile_mip() == mip_isa_Port_sig_0 and
	t_end(o)##0 csrfile_mstatus() == updateMSTATUS(updateMCAUSE(0,csrfile_mie_0,mip_isa_Port_sig_0,(csrfile_mstatus_0 | 8)),csrfile_mie_0,mip_isa_Port_sig_0,(csrfile_mstatus_0 | 8)) and
	t_end(o)##0 csrfile_mtvec() == csrfile_mtvec_0 and
	t_end(o)##0 pcReg() == updatePC(updateMCAUSE(0,csrfile_mie_0,mip_isa_Port_sig_0,(csrfile_mstatus_0 | 8)),csrfile_mie_0,mip_isa_Port_sig_0,(csrfile_mstatus_0 | 8),csrfile_mtvec_0,csrfile_mepc_0) and
	t_end(o)##0 regfileWrite_dst() == regfileWrite_dst_0 and
	t_end(o)##0 regfileWrite_dstData() == regfileWrite_dstData_0 and
	t_end(o)##0 toMemoryPort_sig_addrIn() == updatePC(updateMCAUSE(0,csrfile_mie_0,mip_isa_Port_sig_0,(csrfile_mstatus_0 | 8)),csrfile_mie_0,mip_isa_Port_sig_0,(csrfile_mstatus_0 | 8),csrfile_mtvec_0,csrfile_mepc_0) and
	t_end(o)##0 toMemoryPort_sig_dataIn() == 0 and
	t_end(o)##0 toMemoryPort_sig_mask() == MT_W and
	t_end(o)##0 toMemoryPort_sig_req() == ME_RD and
	during_o (t, 1, t_end(o), 0, ecall_isa_Port_notify() == 0) and
	during_o (t, 1, t_end(o), 0, fromMemoryPort_notify() == 0) and
	during_o (t, 1, t_end(o), 0, isa_ecall_Port_notify() == 0) and
	during_o (t, 1, t_end(o), -1, toMemoryPort_notify() == 0) and
	t_end(o)##0 toMemoryPort_notify() == 1 and
	during_o (t, 1, t_end(o), 0, toRegsPort_notify() == 0);
endproperty;
FETCH_DONE_2_27_a: assert property (disable iff (reset) FETCH_DONE_2_27_p(1)); //ASSIGN t_end offset here



property FETCH_DONE_2_28_p(o);
 bit[31:0] csrfile_mcause_0;
 bit[31:0] csrfile_mepc_0;
 bit[31:0] csrfile_mie_0;
 bit[31:0] csrfile_mstatus_0;
 bit[31:0] csrfile_mtvec_0;
 bit[31:0] fromMemoryPort_sig_loadedData_0;
 bit[31:0] mip_isa_Port_sig_0;
 bit[31:0] pcReg_0;
 bit[31:0] regfileWrite_dst_0;
 bit[31:0] regfileWrite_dstData_0;
	t ##0 hold(csrfile_mcause_0, csrfile_mcause()) and
	t ##0 hold(csrfile_mepc_0, csrfile_mepc()) and
	t ##0 hold(csrfile_mie_0, csrfile_mie()) and
	t ##0 hold(csrfile_mstatus_0, csrfile_mstatus()) and
	t ##0 hold(csrfile_mtvec_0, csrfile_mtvec()) and
	t ##0 hold(fromMemoryPort_sig_loadedData_0, fromMemoryPort_sig_loadedData()) and
	t ##0 hold(mip_isa_Port_sig_0, mip_isa_Port_sig()) and
	t ##0 hold(pcReg_0, pcReg()) and
	t ##0 hold(regfileWrite_dst_0, regfileWrite_dst()) and
	t ##0 hold(regfileWrite_dstData_0, regfileWrite_dstData()) and
	t##0 FETCH_DONE_2() and
	t##0 fromMemoryPort_sync() and
	t##0 (getEncType(fromMemoryPort_sig_loadedData()) == ENC_I_S) and
	t##0 (getInstrType(fromMemoryPort_sig_loadedData()) == INSTR_PRIV) and
	t##0 !((getPrivInstrType(fromMemoryPort_sig_loadedData()) == INSTR_ECALL)) and
	t##0 !((getPrivInstrType(fromMemoryPort_sig_loadedData()) == INSTR_EBREAK)) and
	t##0 !((getPrivInstrType(fromMemoryPort_sig_loadedData()) == INSTR_MRET))
implies
	t_end(o)##0 FETCH_REQ_1() and
	t_end(o)##0 csrfile_mcause() == updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0) and
	t_end(o)##0 csrfile_mepc() == updateMEPC(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mepc_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0,(pcReg_0 + 4)) and
	t_end(o)##0 csrfile_mie() == csrfile_mie_0 and
	t_end(o)##0 csrfile_mip() == mip_isa_Port_sig_0 and
	t_end(o)##0 csrfile_mstatus() == updateMSTATUS(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0) and
	t_end(o)##0 csrfile_mtvec() == csrfile_mtvec_0 and
	t_end(o)##0 pcReg() == updatePC(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0,csrfile_mtvec_0,(pcReg_0 + 4)) and
	t_end(o)##0 regfileWrite_dst() == regfileWrite_dst_0 and
	t_end(o)##0 regfileWrite_dstData() == regfileWrite_dstData_0 and
	t_end(o)##0 toMemoryPort_sig_addrIn() == updatePC(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0,csrfile_mtvec_0,(pcReg_0 + 4)) and
	t_end(o)##0 toMemoryPort_sig_dataIn() == 0 and
	t_end(o)##0 toMemoryPort_sig_mask() == MT_W and
	t_end(o)##0 toMemoryPort_sig_req() == ME_RD and
	during_o (t, 1, t_end(o), 0, ecall_isa_Port_notify() == 0) and
	during_o (t, 1, t_end(o), 0, fromMemoryPort_notify() == 0) and
	during_o (t, 1, t_end(o), 0, isa_ecall_Port_notify() == 0) and
	during_o (t, 1, t_end(o), -1, toMemoryPort_notify() == 0) and
	t_end(o)##0 toMemoryPort_notify() == 1 and
	during_o (t, 1, t_end(o), 0, toRegsPort_notify() == 0);
endproperty;
FETCH_DONE_2_28_a: assert property (disable iff (reset) FETCH_DONE_2_28_p(1)); //ASSIGN t_end offset here



property FETCH_DONE_2_29_p(o);
 bit[31:0] csrfile_mcause_0;
 bit[31:0] csrfile_mepc_0;
 bit[31:0] csrfile_mie_0;
 bit[31:0] csrfile_mstatus_0;
 bit[31:0] csrfile_mtvec_0;
 bit[31:0] fromMemoryPort_sig_loadedData_0;
 bit[31:0] mip_isa_Port_sig_0;
 bit[31:0] pcReg_0;
 bit[31:0] regfileWrite_dst_0;
 bit[31:0] regfileWrite_dstData_0;
	t ##0 hold(csrfile_mcause_0, csrfile_mcause()) and
	t ##0 hold(csrfile_mepc_0, csrfile_mepc()) and
	t ##0 hold(csrfile_mie_0, csrfile_mie()) and
	t ##0 hold(csrfile_mstatus_0, csrfile_mstatus()) and
	t ##0 hold(csrfile_mtvec_0, csrfile_mtvec()) and
	t ##0 hold(fromMemoryPort_sig_loadedData_0, fromMemoryPort_sig_loadedData()) and
	t ##0 hold(mip_isa_Port_sig_0, mip_isa_Port_sig()) and
	t ##0 hold(pcReg_0, pcReg()) and
	t ##0 hold(regfileWrite_dst_0, regfileWrite_dst()) and
	t ##0 hold(regfileWrite_dstData_0, regfileWrite_dstData()) and
	t##0 FETCH_DONE_2() and
	t##0 fromMemoryPort_sync() and
	t##0 (getEncType(fromMemoryPort_sig_loadedData()) == ENC_I_S) and
	t##0 !((getInstrType(fromMemoryPort_sig_loadedData()) == INSTR_CSRRW)) and
	t##0 !((getInstrType(fromMemoryPort_sig_loadedData()) == INSTR_CSRRS)) and
	t##0 !((getInstrType(fromMemoryPort_sig_loadedData()) == INSTR_CSRRC)) and
	t##0 !((getInstrType(fromMemoryPort_sig_loadedData()) == INSTR_CSRRWI)) and
	t##0 !((getInstrType(fromMemoryPort_sig_loadedData()) == INSTR_CSRRSI)) and
	t##0 !((getInstrType(fromMemoryPort_sig_loadedData()) == INSTR_CSRRCI)) and
	t##0 !((getInstrType(fromMemoryPort_sig_loadedData()) == INSTR_PRIV))
implies
	t_end(o)##0 FETCH_REQ_1() and
	t_end(o)##0 csrfile_mcause() == updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0) and
	t_end(o)##0 csrfile_mepc() == updateMEPC(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mepc_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0,(pcReg_0+4)) and
	t_end(o)##0 csrfile_mie() == csrfile_mie_0 and
	t_end(o)##0 csrfile_mip() == mip_isa_Port_sig_0 and
	t_end(o)##0 csrfile_mstatus() == updateMSTATUS(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0) and
	t_end(o)##0 csrfile_mtvec() == csrfile_mtvec_0 and
	t_end(o)##0 pcReg() == updatePC(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0,csrfile_mtvec_0,(pcReg_0+4)) and
	t_end(o)##0 regfileWrite_dst() == regfileWrite_dst_0 and
	t_end(o)##0 regfileWrite_dstData() == regfileWrite_dstData_0 and
	t_end(o)##0 toMemoryPort_sig_addrIn() == updatePC(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0,csrfile_mtvec_0,(pcReg_0+4)) and
	t_end(o)##0 toMemoryPort_sig_dataIn() == 0 and
	t_end(o)##0 toMemoryPort_sig_mask() == MT_W and
	t_end(o)##0 toMemoryPort_sig_req() == ME_RD and
	during_o (t, 1, t_end(o), 0, ecall_isa_Port_notify() == 0) and
	during_o (t, 1, t_end(o), 0, fromMemoryPort_notify() == 0) and
	during_o (t, 1, t_end(o), 0, isa_ecall_Port_notify() == 0) and
	during_o (t, 1, t_end(o), -1, toMemoryPort_notify() == 0) and
	t_end(o)##0 toMemoryPort_notify() == 1 and
	during_o (t, 1, t_end(o), 0, toRegsPort_notify() == 0);
endproperty;
FETCH_DONE_2_29_a: assert property (disable iff (reset) FETCH_DONE_2_29_p(1)); //ASSIGN t_end offset here



property FETCH_DONE_2_3_p(o);
 bit[31:0] csrfile_mcause_0;
 bit[31:0] csrfile_mepc_0;
 bit[31:0] csrfile_mie_0;
 bit[31:0] csrfile_mstatus_0;
 bit[31:0] csrfile_mtvec_0;
 bit[31:0] fromMemoryPort_sig_loadedData_0;
 bit[31:0] mip_isa_Port_sig_0;
 bit[31:0] pcReg_0;
 bit[31:0] regfile_0;
 bit[31:0] regfileWrite_dst_0;
 bit[31:0] regfileWrite_dstData_0;
	t ##0 hold(csrfile_mcause_0, csrfile_mcause()) and
	t ##0 hold(csrfile_mepc_0, csrfile_mepc()) and
	t ##0 hold(csrfile_mie_0, csrfile_mie()) and
	t ##0 hold(csrfile_mstatus_0, csrfile_mstatus()) and
	t ##0 hold(csrfile_mtvec_0, csrfile_mtvec()) and
	t ##0 hold(mip_isa_Port_sig_0, mip_isa_Port_sig()) and
	t ##0 hold(fromMemoryPort_sig_loadedData_0, fromMemoryPort_sig_loadedData()) and
	t ##0 hold(pcReg_0, pcReg()) and
	t ##0 hold(regfile_0, regfile()) and
	t ##0 hold(regfileWrite_dst_0, regfileWrite_dst()) and
	t ##0 hold(regfileWrite_dstData_0, regfileWrite_dstData()) and
	t##0 FETCH_DONE_2() and
	t##0 fromMemoryPort_sync() and
	t##0 (getEncType(fromMemoryPort_sig_loadedData()) == ENC_B)
implies
	t_end(o)##0 FETCH_REQ_1() and
	t_end(o)##0 csrfile_mcause() == updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0) and
	t_end(o)##0 csrfile_mepc() == updateMEPC(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mepc_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0,getBranchresult(getALUresult(getALUfunc(getInstrType(fromMemoryPort_sig_loadedData_0)),regfile_0[((fromMemoryPort_sig_loadedData_0>>15) & 31)],regfile_0[((fromMemoryPort_sig_loadedData_0>>20) & 31)]),fromMemoryPort_sig_loadedData_0,pcReg_0)) and
	t_end(o)##0 csrfile_mie() == csrfile_mie_0 and
	t_end(o)##0 csrfile_mip() == mip_isa_Port_sig_0 and
	t_end(o)##0 csrfile_mstatus() == updateMSTATUS(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0) and
	t_end(o)##0 csrfile_mtvec() == csrfile_mtvec_0 and
	t_end(o)##0 pcReg() == updatePC(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0,csrfile_mtvec_0,getBranchresult(getALUresult(getALUfunc(getInstrType(fromMemoryPort_sig_loadedData_0)),regfile_0[((fromMemoryPort_sig_loadedData_0>>15) & 31)],regfile_0[((fromMemoryPort_sig_loadedData_0>>20) & 31)]),fromMemoryPort_sig_loadedData_0,pcReg_0)) and
	t_end(o)##0 regfileWrite_dst() == regfileWrite_dst_0 and
	t_end(o)##0 regfileWrite_dstData() == regfileWrite_dstData_0 and
	t_end(o)##0 toMemoryPort_sig_addrIn() == updatePC(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0,csrfile_mtvec_0,getBranchresult(getALUresult(getALUfunc(getInstrType(fromMemoryPort_sig_loadedData_0)),regfile_0[((fromMemoryPort_sig_loadedData_0>>15) & 31)],regfile_0[((fromMemoryPort_sig_loadedData_0>>20) & 31)]),fromMemoryPort_sig_loadedData_0,pcReg_0)) and
	t_end(o)##0 toMemoryPort_sig_dataIn() == 0 and
	t_end(o)##0 toMemoryPort_sig_mask() == MT_W and
	t_end(o)##0 toMemoryPort_sig_req() == ME_RD and
	during_o (t, 1, t_end(o), 0, ecall_isa_Port_notify() == 0) and
	during_o (t, 1, t_end(o), 0, fromMemoryPort_notify() == 0) and
	during_o (t, 1, t_end(o), 0, isa_ecall_Port_notify() == 0) and
	during_o (t, 1, t_end(o), -1, toMemoryPort_notify() == 0) and
	t_end(o)##0 toMemoryPort_notify() == 1 and
	during_o (t, 1, t_end(o), 0, toRegsPort_notify() == 0);
endproperty;
FETCH_DONE_2_3_a: assert property (disable iff (reset) FETCH_DONE_2_3_p(1)); //ASSIGN t_end offset here



property FETCH_DONE_2_30_p(o);
 bit[31:0] csrfile_mcause_0;
 bit[31:0] csrfile_mepc_0;
 bit[31:0] csrfile_mie_0;
 bit[31:0] csrfile_mstatus_0;
 bit[31:0] csrfile_mtvec_0;
 bit[31:0] fromMemoryPort_sig_loadedData_0;
 bit[31:0] mip_isa_Port_sig_0;
 bit[31:0] pcReg_0;
 bit[31:0] regfileWrite_dst_0;
 bit[31:0] regfileWrite_dstData_0;
	t ##0 hold(csrfile_mcause_0, csrfile_mcause()) and
	t ##0 hold(csrfile_mepc_0, csrfile_mepc()) and
	t ##0 hold(csrfile_mie_0, csrfile_mie()) and
	t ##0 hold(csrfile_mstatus_0, csrfile_mstatus()) and
	t ##0 hold(csrfile_mtvec_0, csrfile_mtvec()) and
	t ##0 hold(fromMemoryPort_sig_loadedData_0, fromMemoryPort_sig_loadedData()) and
	t ##0 hold(mip_isa_Port_sig_0, mip_isa_Port_sig()) and
	t ##0 hold(pcReg_0, pcReg()) and
	t ##0 hold(regfileWrite_dst_0, regfileWrite_dst()) and
	t ##0 hold(regfileWrite_dstData_0, regfileWrite_dstData()) and
	t##0 FETCH_DONE_2() and
	t##0 fromMemoryPort_sync() and
	t##0 !((getEncType(fromMemoryPort_sig_loadedData()) == ENC_R)) and
	t##0 !((getEncType(fromMemoryPort_sig_loadedData()) == ENC_B)) and
	t##0 !((getEncType(fromMemoryPort_sig_loadedData()) == ENC_S)) and
	t##0 !((getEncType(fromMemoryPort_sig_loadedData()) == ENC_U)) and
	t##0 !((getEncType(fromMemoryPort_sig_loadedData()) == ENC_J)) and
	t##0 !((getEncType(fromMemoryPort_sig_loadedData()) == ENC_I_I)) and
	t##0 !((getEncType(fromMemoryPort_sig_loadedData()) == ENC_I_L)) and
	t##0 !((getEncType(fromMemoryPort_sig_loadedData()) == ENC_I_J)) and
	t##0 !((getEncType(fromMemoryPort_sig_loadedData()) == ENC_I_M)) and
	t##0 !((getEncType(fromMemoryPort_sig_loadedData()) == ENC_I_S))
implies
	t_end(o)##0 FETCH_REQ_1() and
	t_end(o)##0 csrfile_mcause() == updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0) and
	t_end(o)##0 csrfile_mepc() == updateMEPC(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mepc_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0,(pcReg_0+4)) and
	t_end(o)##0 csrfile_mie() == csrfile_mie_0 and
	t_end(o)##0 csrfile_mip() == mip_isa_Port_sig_0 and
	t_end(o)##0 csrfile_mstatus() == updateMSTATUS(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0) and
	t_end(o)##0 csrfile_mtvec() == csrfile_mtvec_0 and
	t_end(o)##0 pcReg() == updatePC(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0,csrfile_mtvec_0,(pcReg_0+4)) and
	t_end(o)##0 regfileWrite_dst() == regfileWrite_dst_0 and
	t_end(o)##0 regfileWrite_dstData() == regfileWrite_dstData_0 and
	t_end(o)##0 toMemoryPort_sig_addrIn() == updatePC(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0,csrfile_mtvec_0,(pcReg_0+4)) and
	t_end(o)##0 toMemoryPort_sig_dataIn() == 0 and
	t_end(o)##0 toMemoryPort_sig_mask() == MT_W and
	t_end(o)##0 toMemoryPort_sig_req() == ME_RD and
	during_o (t, 1, t_end(o), 0, ecall_isa_Port_notify() == 0) and
	during_o (t, 1, t_end(o), 0, fromMemoryPort_notify() == 0) and
	during_o (t, 1, t_end(o), 0, isa_ecall_Port_notify() == 0) and
	during_o (t, 1, t_end(o), -1, toMemoryPort_notify() == 0) and
	t_end(o)##0 toMemoryPort_notify() == 1 and
	during_o (t, 1, t_end(o), 0, toRegsPort_notify() == 0);
endproperty;
FETCH_DONE_2_30_a: assert property (disable iff (reset) FETCH_DONE_2_30_p(1)); //ASSIGN t_end offset here



property FETCH_DONE_2_4_p(o);
 bit[31:0] csrfile_mcause_0;
 bit[31:0] csrfile_mepc_0;
 bit[31:0] csrfile_mie_0;
 bit[31:0] csrfile_mip_0;
 bit[31:0] csrfile_mstatus_0;
 bit[31:0] csrfile_mtvec_0;
 bit[31:0] mip_isa_Port_sig_0;
 bit[31:0] fromMemoryPort_sig_loadedData_0;
 bit[31:0] pcReg_0;
 bit[31:0] regfile_0;
 bit[31:0] regfileWrite_dst_0;
 bit[31:0] regfileWrite_dstData_0;
	t ##0 hold(csrfile_mcause_0, csrfile_mcause()) and
	t ##0 hold(csrfile_mepc_0, csrfile_mepc()) and
	t ##0 hold(csrfile_mie_0, csrfile_mie()) and
	t ##0 hold(mip_isa_Port_sig_0, mip_isa_Port_sig()) and
	t ##0 hold(csrfile_mstatus_0, csrfile_mstatus()) and
	t ##0 hold(csrfile_mtvec_0, csrfile_mtvec()) and
	t ##0 hold(fromMemoryPort_sig_loadedData_0, fromMemoryPort_sig_loadedData()) and
	t ##0 hold(pcReg_0, pcReg()) and
	t ##0 hold(regfile_0, regfile()) and
	t ##0 hold(regfileWrite_dst_0, regfileWrite_dst()) and
	t ##0 hold(regfileWrite_dstData_0, regfileWrite_dstData()) and
	t##0 FETCH_DONE_2() and
	t##0 fromMemoryPort_sync() and
	t##0 (getEncType(fromMemoryPort_sig_loadedData()) == ENC_S)
implies
	t_end(o)##0 STORE_3() and
	t_end(o)##0 csrfile_mcause() == csrfile_mcause_0 and
	t_end(o)##0 csrfile_mepc() == csrfile_mepc_0 and
	t_end(o)##0 csrfile_mie() == csrfile_mie_0 and
	t_end(o)##0 csrfile_mip() == mip_isa_Port_sig_0 and
	t_end(o)##0 csrfile_mstatus() == csrfile_mstatus_0 and
	t_end(o)##0 csrfile_mtvec() == csrfile_mtvec_0 and
	t_end(o)##0 pcReg() == pcReg_0 and
	t_end(o)##0 regfileWrite_dst() == regfileWrite_dst_0 and
	t_end(o)##0 regfileWrite_dstData() == regfileWrite_dstData_0 and
	t_end(o)##0 toMemoryPort_sig_addrIn() == getALUresult(ALU_ADD,regfile_0[((fromMemoryPort_sig_loadedData_0>>15) & 31)], getImmediate(fromMemoryPort_sig_loadedData_0)) and
	t_end(o)##0 toMemoryPort_sig_dataIn() == regfile_0[((fromMemoryPort_sig_loadedData_0>>20) & 31)] and
	t_end(o)##0 toMemoryPort_sig_mask() == getMemoryMask(getInstrType(fromMemoryPort_sig_loadedData_0)) and
	t_end(o)##0 toMemoryPort_sig_req() == ME_WR and
	during_o (t, 1, t_end(o), 0, ecall_isa_Port_notify() == 0) and
	during_o (t, 1, t_end(o), 0, fromMemoryPort_notify() == 0) and
	during_o (t, 1, t_end(o), 0, isa_ecall_Port_notify() == 0) and
	during_o (t, 1, t_end(o), -1, toMemoryPort_notify() == 0) and
	t_end(o)##0 toMemoryPort_notify() == 1 and
	during_o (t, 1, t_end(o), 0, toRegsPort_notify() == 0);
endproperty;
FETCH_DONE_2_4_a: assert property (disable iff (reset) FETCH_DONE_2_4_p(1)); //ASSIGN t_end offset here



property FETCH_DONE_2_5_p(o);
 bit[31:0] csrfile_mcause_0;
 bit[31:0] csrfile_mepc_0;
 bit[31:0] csrfile_mie_0;
 bit[31:0] csrfile_mip_0;
 bit[31:0] csrfile_mstatus_0;
 bit[31:0] csrfile_mtvec_0;
 bit[31:0] mip_isa_Port_sig_0;
 bit[31:0] fromMemoryPort_sig_loadedData_0;
 bit[31:0] pcReg_0;
	t ##0 hold(csrfile_mcause_0, csrfile_mcause()) and
	t ##0 hold(csrfile_mepc_0, csrfile_mepc()) and
	t ##0 hold(csrfile_mie_0, csrfile_mie()) and
	t ##0 hold(csrfile_mip_0, csrfile_mip()) and
	t ##0 hold(csrfile_mstatus_0, csrfile_mstatus()) and
	t ##0 hold(csrfile_mtvec_0, csrfile_mtvec()) and
	t ##0 hold(mip_isa_Port_sig_0, mip_isa_Port_sig()) and
	t ##0 hold(fromMemoryPort_sig_loadedData_0, fromMemoryPort_sig_loadedData()) and
	t ##0 hold(pcReg_0, pcReg()) and
	t##0 FETCH_DONE_2() and
	t##0 fromMemoryPort_sync() and
	t##0 (getEncType(fromMemoryPort_sig_loadedData()) == ENC_U)
implies
	t_end(o)##0 FETCH_REQ_1() and
	t_end(o)##0 csrfile_mcause() == updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0) and
	t_end(o)##0 csrfile_mepc() == updateMEPC(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mepc_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0,(pcReg_0 + 4)) and
	t_end(o)##0 csrfile_mie() == csrfile_mie_0 and
	t_end(o)##0 csrfile_mip() == mip_isa_Port_sig_0 and
	t_end(o)##0 csrfile_mstatus() == updateMSTATUS(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0) and
	t_end(o)##0 csrfile_mtvec() == csrfile_mtvec_0 and
	t_end(o)##0 pcReg() == updatePC(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0,csrfile_mtvec_0,(pcReg_0 + 4)) and
	t_end(o)##0 regfileWrite_dst() == ((fromMemoryPort_sig_loadedData_0>>7) & 31) and
	t_end(o)##0 regfileWrite_dstData() == getALUresult_U(fromMemoryPort_sig_loadedData_0,getImmediate(fromMemoryPort_sig_loadedData_0),pcReg_0) and
	t_end(o)##0 toRegsPort_sig_dst() == ((fromMemoryPort_sig_loadedData_0>>7) & 31) and
	t_end(o)##0 toRegsPort_sig_dstData() == getALUresult_U(fromMemoryPort_sig_loadedData_0,getImmediate(fromMemoryPort_sig_loadedData_0),pcReg_0) and
	t_end(o)##0 toMemoryPort_sig_addrIn() == updatePC(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0,csrfile_mtvec_0,(pcReg_0 + 4)) and
	t_end(o)##0 toMemoryPort_sig_dataIn() == 0 and
	t_end(o)##0 toMemoryPort_sig_mask() == MT_W and
	t_end(o)##0 toMemoryPort_sig_req() == ME_RD and
	during_o (t, 1, t_end(o), 0, ecall_isa_Port_notify() == 0) and
	during_o (t, 1, t_end(o), 0, fromMemoryPort_notify() == 0) and
	during_o (t, 1, t_end(o), 0, isa_ecall_Port_notify() == 0) and
	during_o (t, 1, t_end(o) , -1, toMemoryPort_notify() == 0) and
	t_end(o) ##0 toMemoryPort_notify() == 1 and
	during_o (t, 1, t_end(o), -1, toRegsPort_notify() == 0) and
	t_end(o) ##0 toRegsPort_notify() == 1;
endproperty;
FETCH_DONE_2_5_a: assert property (disable iff (reset) FETCH_DONE_2_5_p(1)); //ASSIGN t_end offset here



property FETCH_DONE_2_6_p(o);
 bit[31:0] csrfile_mcause_0;
 bit[31:0] csrfile_mepc_0;
 bit[31:0] csrfile_mie_0;
 bit[31:0] csrfile_mip_0;
 bit[31:0] csrfile_mstatus_0;
 bit[31:0] csrfile_mtvec_0;
 bit[31:0] mip_isa_Port_sig_0;
 bit[31:0] fromMemoryPort_sig_loadedData_0;
 bit[31:0] pcReg_0;
	t ##0 hold(csrfile_mcause_0, csrfile_mcause()) and
	t ##0 hold(csrfile_mepc_0, csrfile_mepc()) and
	t ##0 hold(csrfile_mie_0, csrfile_mie()) and
	t ##0 hold(csrfile_mip_0, csrfile_mip()) and
	t ##0 hold(csrfile_mstatus_0, csrfile_mstatus()) and
	t ##0 hold(csrfile_mtvec_0, csrfile_mtvec()) and
	t ##0 hold(mip_isa_Port_sig_0, mip_isa_Port_sig()) and
	t ##0 hold(fromMemoryPort_sig_loadedData_0, fromMemoryPort_sig_loadedData()) and
	t ##0 hold(pcReg_0, pcReg()) and
	t##0 FETCH_DONE_2() and
	t##0 fromMemoryPort_sync() and
	t##0 (getEncType(fromMemoryPort_sig_loadedData()) == ENC_J)
implies
	t_end(o)##0 FETCH_REQ_1() and
	t_end(o)##0 csrfile_mcause() == updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0) and
	t_end(o)##0 csrfile_mepc() == updateMEPC(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mepc_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0,(pcReg_0 + getImmediate(fromMemoryPort_sig_loadedData_0))) and
	t_end(o)##0 csrfile_mie() == csrfile_mie_0 and
	t_end(o)##0 csrfile_mip() == mip_isa_Port_sig_0 and
	t_end(o)##0 csrfile_mstatus() == updateMSTATUS(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0) and
	t_end(o)##0 csrfile_mtvec() == csrfile_mtvec_0 and
	t_end(o)##0 pcReg() == updatePC(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0,csrfile_mtvec_0,(pcReg_0 + getImmediate(fromMemoryPort_sig_loadedData_0))) and
	t_end(o)##0 regfileWrite_dst() == ((fromMemoryPort_sig_loadedData_0>>7) & 31) and
	t_end(o)##0 regfileWrite_dstData() == (4 + pcReg_0) and
	t_end(o)##0 toRegsPort_sig_dst() == ((fromMemoryPort_sig_loadedData_0>>7) & 31) and
	t_end(o)##0 toRegsPort_sig_dstData() == (4 + pcReg_0) and
	t_end(o)##0 toMemoryPort_sig_addrIn() == updatePC(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0,csrfile_mtvec_0,(pcReg_0 + getImmediate(fromMemoryPort_sig_loadedData_0))) and
	t_end(o)##0 toMemoryPort_sig_dataIn() == 0 and
	t_end(o)##0 toMemoryPort_sig_mask() == MT_W and
	t_end(o)##0 toMemoryPort_sig_req() == ME_RD and
	during_o (t, 1, t_end(o), 0, ecall_isa_Port_notify() == 0) and
	during_o (t, 1, t_end(o), 0, fromMemoryPort_notify() == 0) and
	during_o (t, 1, t_end(o), 0, isa_ecall_Port_notify() == 0) and
	during_o (t, 1, t_end(o) , -1, toMemoryPort_notify() == 0) and
	t_end(o) ##0 toMemoryPort_notify() == 1 and
	during_o (t, 1, t_end(o), -1, toRegsPort_notify() == 0) and
	t_end(o) ##0 toRegsPort_notify() == 1;
endproperty;
FETCH_DONE_2_6_a: assert property (disable iff (reset) FETCH_DONE_2_6_p(1)); //ASSIGN t_end offset here



property FETCH_DONE_2_7_p(o);
 bit[31:0] csrfile_mcause_0;
 bit[31:0] csrfile_mepc_0;
 bit[31:0] csrfile_mie_0;
 bit[31:0] csrfile_mip_0;
 bit[31:0] csrfile_mstatus_0;
 bit[31:0] csrfile_mtvec_0;
 bit[31:0] mip_isa_Port_sig_0; 
 bit[31:0] fromMemoryPort_sig_loadedData_0;
 bit[31:0] pcReg_0;
 bit[31:0] regfile_0;
	t ##0 hold(csrfile_mcause_0, csrfile_mcause()) and
	t ##0 hold(csrfile_mepc_0, csrfile_mepc()) and
	t ##0 hold(csrfile_mie_0, csrfile_mie()) and
	t ##0 hold(csrfile_mip_0, csrfile_mip()) and
	t ##0 hold(csrfile_mstatus_0, csrfile_mstatus()) and
	t ##0 hold(csrfile_mtvec_0, csrfile_mtvec()) and
	t ##0 hold(mip_isa_Port_sig_0, mip_isa_Port_sig()) and
	t ##0 hold(fromMemoryPort_sig_loadedData_0, fromMemoryPort_sig_loadedData()) and
	t ##0 hold(pcReg_0, pcReg()) and
	t ##0 hold(regfile_0, regfile()) and
	t##0 FETCH_DONE_2() and
	t##0 fromMemoryPort_sync() and
	t##0 (getEncType(fromMemoryPort_sig_loadedData()) == ENC_I_I)
implies
	t_end(o)##0 FETCH_REQ_1() and
	t_end(o)##0 csrfile_mcause() == updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0) and
	t_end(o)##0 csrfile_mepc() == updateMEPC(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,csrfile_mip_0,csrfile_mstatus_0),csrfile_mepc_0,csrfile_mie_0,csrfile_mip_0,csrfile_mstatus_0,(pcReg_0 + 4)) and
	t_end(o)##0 csrfile_mie() == csrfile_mie_0 and
	t_end(o)##0 csrfile_mip() == mip_isa_Port_sig_0 and
	t_end(o)##0 csrfile_mstatus() == updateMSTATUS(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0) and
	t_end(o)##0 csrfile_mtvec() == csrfile_mtvec_0 and
	t_end(o)##0 pcReg() == updatePC(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0,csrfile_mtvec_0,(pcReg_0 + 4)) and
	t_end(o)##0 regfileWrite_dst() == ((fromMemoryPort_sig_loadedData_0>>7) & 31) and
	t_end(o)##0 regfileWrite_dstData() == getALUresult(getALUfunc(getInstrType(fromMemoryPort_sig_loadedData_0)),regfile_0[((fromMemoryPort_sig_loadedData_0>>15) & 31)],getImmediate(fromMemoryPort_sig_loadedData_0)) and
	t_end(o)##0 toRegsPort_sig_dst() == ((fromMemoryPort_sig_loadedData_0>>7) & 31) and
	t_end(o)##0 toRegsPort_sig_dstData() == getALUresult(getALUfunc(getInstrType(fromMemoryPort_sig_loadedData_0)),regfile_0[((fromMemoryPort_sig_loadedData_0>>15) & 31)],getImmediate(fromMemoryPort_sig_loadedData_0)) and
	t_end(o)##0 toMemoryPort_sig_addrIn() == updatePC(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0,csrfile_mtvec_0,(pcReg_0 + 4)) and
	t_end(o)##0 toMemoryPort_sig_dataIn() == 0 and
	t_end(o)##0 toMemoryPort_sig_mask() == MT_W and
	t_end(o)##0 toMemoryPort_sig_req() == ME_RD and
	during_o (t, 1, t_end(o), 0, ecall_isa_Port_notify() == 0) and
	during_o (t, 1, t_end(o), 0, fromMemoryPort_notify() == 0) and
	during_o (t, 1, t_end(o), 0, isa_ecall_Port_notify() == 0) and
	during_o (t, 1, t_end(o) , -1, toMemoryPort_notify() == 0) and
	t_end(o) ##0 toMemoryPort_notify() == 1 and
	during_o (t, 1, t_end(o), -1, toRegsPort_notify() == 0) and
	t_end(o) ##0 toRegsPort_notify() == 1;
endproperty;
FETCH_DONE_2_7_a: assert property (disable iff (reset) FETCH_DONE_2_7_p(1)); //ASSIGN t_end offset here



property FETCH_DONE_2_8_p(o);
 bit[31:0] csrfile_mcause_0;
 bit[31:0] csrfile_mepc_0;
 bit[31:0] csrfile_mie_0;
 bit[31:0] csrfile_mip_0;
 bit[31:0] csrfile_mstatus_0;
 bit[31:0] csrfile_mtvec_0;
 bit[31:0] fromMemoryPort_sig_loadedData_0;
 bit[31:0] pcReg_0;
 bit[31:0] regfile_0;
 bit[31:0] regfileWrite_dstData_0;
	t ##0 hold(csrfile_mcause_0, csrfile_mcause()) and
	t ##0 hold(csrfile_mepc_0, csrfile_mepc()) and
	t ##0 hold(csrfile_mie_0, csrfile_mie()) and
	t ##0 hold(csrfile_mip_0, csrfile_mip()) and
	t ##0 hold(csrfile_mstatus_0, csrfile_mstatus()) and
	t ##0 hold(csrfile_mtvec_0, csrfile_mtvec()) and
	t ##0 hold(fromMemoryPort_sig_loadedData_0, fromMemoryPort_sig_loadedData()) and
	t ##0 hold(pcReg_0, pcReg()) and
	t ##0 hold(regfile_0, regfile()) and
	t ##0 hold(regfileWrite_dstData_0, regfileWrite_dstData()) and
	t##0 FETCH_DONE_2() and
	t##0 fromMemoryPort_sync() and
	t##0 (getEncType(fromMemoryPort_sig_loadedData()) == ENC_I_L)
implies
	t_end(o)##0 LOAD_REQ_4() and
	t_end(o)##0 csrfile_mcause() == csrfile_mcause_0 and
	t_end(o)##0 csrfile_mepc() == csrfile_mepc_0 and
	t_end(o)##0 csrfile_mie() == csrfile_mie_0 and
	t_end(o)##0 csrfile_mip() == csrfile_mip_0 and
	t_end(o)##0 csrfile_mstatus() == csrfile_mstatus_0 and
	t_end(o)##0 csrfile_mtvec() == csrfile_mtvec_0 and
	t_end(o)##0 pcReg() == pcReg_0 and
	t_end(o)##0 regfileWrite_dst() == ((fromMemoryPort_sig_loadedData_0>>7) & 31) and
	t_end(o)##0 regfileWrite_dstData() == regfileWrite_dstData_0 and
	t_end(o)##0 toMemoryPort_sig_addrIn() == getALUresult(ALU_ADD,regfile_0[((fromMemoryPort_sig_loadedData_0>>15) & 31)],getImmediate(fromMemoryPort_sig_loadedData_0)) and
	t_end(o)##0 toMemoryPort_sig_dataIn() == 0 and
	t_end(o)##0 toMemoryPort_sig_mask() == getMemoryMask(getInstrType(fromMemoryPort_sig_loadedData_0)) and
	t_end(o)##0 toMemoryPort_sig_req() == ME_RD and
	during_o (t, 1, t_end(o), 0, ecall_isa_Port_notify() == 0) and
	during_o (t, 1, t_end(o), 0, fromMemoryPort_notify() == 0) and
	during_o (t, 1, t_end(o), 0, isa_ecall_Port_notify() == 0) and
	during_o (t, 1, t_end(o), -1, toMemoryPort_notify() == 0) and
	t_end(o)##0 toMemoryPort_notify() == 1 and
	during_o (t, 1, t_end(o), 0, toRegsPort_notify() == 0);
endproperty;
FETCH_DONE_2_8_a: assert property (disable iff (reset) FETCH_DONE_2_8_p(1)); //ASSIGN t_end offset here



property FETCH_DONE_2_9_p(o);
 bit[31:0] csrfile_mcause_0;
 bit[31:0] csrfile_mepc_0;
 bit[31:0] csrfile_mie_0;
 bit[31:0] csrfile_mip_0;
 bit[31:0] csrfile_mstatus_0;
 bit[31:0] csrfile_mtvec_0;
 bit[31:0] mip_isa_Port_sig_0;
 bit[31:0] fromMemoryPort_sig_loadedData_0;
 bit[31:0] pcReg_0;
 bit[31:0] regfile_0;
	t ##0 hold(csrfile_mcause_0, csrfile_mcause()) and
	t ##0 hold(csrfile_mepc_0, csrfile_mepc()) and
	t ##0 hold(csrfile_mie_0, csrfile_mie()) and
	t ##0 hold(csrfile_mip_0, csrfile_mip()) and
	t ##0 hold(csrfile_mstatus_0, csrfile_mstatus()) and
	t ##0 hold(csrfile_mtvec_0, csrfile_mtvec()) and
	t ##0 hold(mip_isa_Port_sig_0, mip_isa_Port_sig()) and
	t ##0 hold(fromMemoryPort_sig_loadedData_0, fromMemoryPort_sig_loadedData()) and
	t ##0 hold(pcReg_0, pcReg()) and
	t ##0 hold(regfile_0, regfile()) and
	t##0 FETCH_DONE_2() and
	t##0 fromMemoryPort_sync() and
	t##0 (getEncType(fromMemoryPort_sig_loadedData()) == ENC_I_J)
implies
	t_end(o)##0 FETCH_REQ_1() and
	t_end(o)##0 csrfile_mcause() == updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0) and
	t_end(o)##0 csrfile_mepc() == updateMEPC(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,csrfile_mip_0,csrfile_mstatus_0),csrfile_mepc_0,csrfile_mie_0,csrfile_mip_0,csrfile_mstatus_0,(pcReg_0 + 4)) and
	t_end(o)##0 csrfile_mie() == csrfile_mie_0 and
	t_end(o)##0 csrfile_mip() == mip_isa_Port_sig_0 and
	t_end(o)##0 csrfile_mstatus() == updateMSTATUS(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0) and
	t_end(o)##0 csrfile_mtvec() == csrfile_mtvec_0 and
	t_end(o)##0 pcReg() == updatePC(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0,csrfile_mtvec_0,(regfile_0[((fromMemoryPort_sig_loadedData_0>>15) & 31)] + getImmediate(fromMemoryPort_sig_loadedData_0))) and
	t_end(o)##0 regfileWrite_dst() == ((fromMemoryPort_sig_loadedData_0>>7) & 31) and
	t_end(o)##0 regfileWrite_dstData() == (4 + pcReg_0) and
	t_end(o)##0 toRegsPort_sig_dst() == ((fromMemoryPort_sig_loadedData_0>>7) & 31) and
	t_end(o)##0 toRegsPort_sig_dstData() == (4 + pcReg_0) and
	t_end(o)##0 toMemoryPort_sig_addrIn() == updatePC(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0,csrfile_mtvec_0,(regfile_0[((fromMemoryPort_sig_loadedData_0>>15) & 31)] + getImmediate(fromMemoryPort_sig_loadedData_0))) and
	t_end(o)##0 toMemoryPort_sig_dataIn() == 0 and
	t_end(o)##0 toMemoryPort_sig_mask() == MT_W and
	t_end(o)##0 toMemoryPort_sig_req() == ME_RD and
	during_o (t, 1, t_end(o), 0, ecall_isa_Port_notify() == 0) and
	during_o (t, 1, t_end(o), 0, fromMemoryPort_notify() == 0) and
	during_o (t, 1, t_end(o), 0, isa_ecall_Port_notify() == 0) and
	during_o (t, 1, t_end(o) , -1, toMemoryPort_notify() == 0) and
	t_end(o) ##0 toMemoryPort_notify() == 1 and
	during_o (t, 1, t_end(o), -1, toRegsPort_notify() == 0) and
	t_end(o) ##0 toRegsPort_notify() == 1;
endproperty;
FETCH_DONE_2_9_a: assert property (disable iff (reset) FETCH_DONE_2_9_p(1)); //ASSIGN t_end offset here



property FETCH_REQ_1_1_p(o);
 bit[31:0] csrfile_mcause_0;
 bit[31:0] csrfile_mepc_0;
 bit[31:0] csrfile_mie_0;
 bit[31:0] csrfile_mip_0;
 bit[31:0] csrfile_mstatus_0;
 bit[31:0] csrfile_mtvec_0;
 bit[31:0] pcReg_0;
 bit[31:0] regfileWrite_dst_0;
 bit[31:0] regfileWrite_dstData_0;
	t ##0 hold(csrfile_mcause_0, csrfile_mcause()) and
	t ##0 hold(csrfile_mepc_0, csrfile_mepc()) and
	t ##0 hold(csrfile_mie_0, csrfile_mie()) and
	t ##0 hold(csrfile_mip_0, csrfile_mip()) and
	t ##0 hold(csrfile_mstatus_0, csrfile_mstatus()) and
	t ##0 hold(csrfile_mtvec_0, csrfile_mtvec()) and
	t ##0 hold(pcReg_0, pcReg()) and
	t ##0 hold(regfileWrite_dst_0, regfileWrite_dst()) and
	t ##0 hold(regfileWrite_dstData_0, regfileWrite_dstData()) and
	t##0 FETCH_REQ_1() and
	t##0 toMemoryPort_sync()
implies
	t_end(o)##0 FETCH_DONE_2() and
	t_end(o)##0 csrfile_mcause() == csrfile_mcause_0 and
	t_end(o)##0 csrfile_mepc() == csrfile_mepc_0 and
	t_end(o)##0 csrfile_mie() == csrfile_mie_0 and
	t_end(o)##0 csrfile_mip() == csrfile_mip_0 and
	t_end(o)##0 csrfile_mstatus() == csrfile_mstatus_0 and
	t_end(o)##0 csrfile_mtvec() == csrfile_mtvec_0 and
	t_end(o)##0 pcReg() == pcReg_0 and
	t_end(o)##0 regfileWrite_dst() == regfileWrite_dst_0 and
	t_end(o)##0 regfileWrite_dstData() == regfileWrite_dstData_0 and
	during_o (t, 1, t_end(o), 0, ecall_isa_Port_notify() == 0) and
	during_o (t, 1, t_end(o), -1, fromMemoryPort_notify() == 0) and
	t_end(o)##0 fromMemoryPort_notify() == 1 and
	during_o (t, 1, t_end(o), 0, isa_ecall_Port_notify() == 0) and
	during_o (t, 1, t_end(o), 0, toMemoryPort_notify() == 0) and
	during_o (t, 1, t_end(o), 0, toRegsPort_notify() == 0);
endproperty;
FETCH_REQ_1_1_a: assert property (disable iff (reset) FETCH_REQ_1_1_p(1)); //ASSIGN t_end offset here



property LOAD_DONE_5_33_p(o);
 bit[31:0] csrfile_mcause_0;
 bit[31:0] csrfile_mepc_0;
 bit[31:0] csrfile_mie_0;
 bit[31:0] csrfile_mip_0;
 bit[31:0] csrfile_mstatus_0;
 bit[31:0] csrfile_mtvec_0;
 bit[31:0] mip_isa_Port_sig_0;
 bit[31:0] fromMemoryPort_sig_loadedData_0;
 bit[31:0] pcReg_0;
 bit[31:0] regfileWrite_dst_0;
	t ##0 hold(csrfile_mcause_0, csrfile_mcause()) and
	t ##0 hold(csrfile_mepc_0, csrfile_mepc()) and
	t ##0 hold(csrfile_mie_0, csrfile_mie()) and
	t ##0 hold(csrfile_mip_0, csrfile_mip()) and
	t ##0 hold(csrfile_mstatus_0, csrfile_mstatus()) and
	t ##0 hold(csrfile_mtvec_0, csrfile_mtvec()) and
	t ##0 hold(mip_isa_Port_sig_0, mip_isa_Port_sig()) and
	t ##0 hold(fromMemoryPort_sig_loadedData_0, fromMemoryPort_sig_loadedData()) and
	t ##0 hold(pcReg_0, pcReg()) and
	t ##0 hold(regfileWrite_dst_0, regfileWrite_dst()) and
	t##0 LOAD_DONE_5() and
	t##0 fromMemoryPort_sync()
implies
	t_end(o)##0 FETCH_REQ_1() and
	t_end(o)##0 csrfile_mcause() == updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0) and
	t_end(o)##0 csrfile_mepc() == updateMEPC(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mepc_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0,(pcReg_0 + 4)) and
	t_end(o)##0 csrfile_mie() == csrfile_mie_0 and
	t_end(o)##0 csrfile_mip() == mip_isa_Port_sig_0 and
	t_end(o)##0 csrfile_mstatus() == updateMSTATUS(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0) and
	t_end(o)##0 csrfile_mtvec() == csrfile_mtvec_0 and
	t_end(o)##0 pcReg() == updatePC(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0,csrfile_mtvec_0,(pcReg_0 + 4)) and
	t_end(o)##0 regfileWrite_dst() == regfileWrite_dst_0 and
	t_end(o)##0 regfileWrite_dstData() == fromMemoryPort_sig_loadedData_0 and
	t_end(o)##0 toRegsPort_sig_dst() == regfileWrite_dst_0 and
	t_end(o)##0 toRegsPort_sig_dstData() == fromMemoryPort_sig_loadedData_0 and
	t_end(o)##0 toMemoryPort_sig_addrIn() == updatePC(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0,csrfile_mtvec_0,(pcReg_0 + 4)) and
	t_end(o)##0 toMemoryPort_sig_dataIn() == 0 and
	t_end(o)##0 toMemoryPort_sig_mask() == MT_W and
	t_end(o)##0 toMemoryPort_sig_req() == ME_RD and
	during_o (t, 1, t_end(o), 0, ecall_isa_Port_notify() == 0) and
	during_o (t, 1, t_end(o), 0, fromMemoryPort_notify() == 0) and
	during_o (t, 1, t_end(o), 0, isa_ecall_Port_notify() == 0) and
	during_o (t, 1, t_end(o) , -1, toMemoryPort_notify() == 0) and
	t_end(o) ##0 toMemoryPort_notify() == 1 and
	during_o (t, 1, t_end(o), -1, toRegsPort_notify() == 0) and
	t_end(o) ##0 toRegsPort_notify() == 1;
endproperty;
LOAD_DONE_5_33_a: assert property (disable iff (reset) LOAD_DONE_5_33_p(1)); //ASSIGN t_end offset here



property LOAD_REQ_4_32_p(o);
 bit[31:0] csrfile_mcause_0;
 bit[31:0] csrfile_mepc_0;
 bit[31:0] csrfile_mie_0;
 bit[31:0] csrfile_mip_0;
 bit[31:0] csrfile_mstatus_0;
 bit[31:0] csrfile_mtvec_0;
 bit[31:0] pcReg_0;
 bit[31:0] regfileWrite_dst_0;
 bit[31:0] regfileWrite_dstData_0;
	t ##0 hold(csrfile_mcause_0, csrfile_mcause()) and
	t ##0 hold(csrfile_mepc_0, csrfile_mepc()) and
	t ##0 hold(csrfile_mie_0, csrfile_mie()) and
	t ##0 hold(csrfile_mip_0, csrfile_mip()) and
	t ##0 hold(csrfile_mstatus_0, csrfile_mstatus()) and
	t ##0 hold(csrfile_mtvec_0, csrfile_mtvec()) and
	t ##0 hold(pcReg_0, pcReg()) and
	t ##0 hold(regfileWrite_dst_0, regfileWrite_dst()) and
	t ##0 hold(regfileWrite_dstData_0, regfileWrite_dstData()) and
	t##0 LOAD_REQ_4() and
	t##0 toMemoryPort_sync()
implies
	t_end(o)##0 LOAD_DONE_5() and
	t_end(o)##0 csrfile_mcause() == csrfile_mcause_0 and
	t_end(o)##0 csrfile_mepc() == csrfile_mepc_0 and
	t_end(o)##0 csrfile_mie() == csrfile_mie_0 and
	t_end(o)##0 csrfile_mip() == csrfile_mip_0 and
	t_end(o)##0 csrfile_mstatus() == csrfile_mstatus_0 and
	t_end(o)##0 csrfile_mtvec() == csrfile_mtvec_0 and
	t_end(o)##0 pcReg() == pcReg_0 and
	t_end(o)##0 regfileWrite_dst() == regfileWrite_dst_0 and
	t_end(o)##0 regfileWrite_dstData() == regfileWrite_dstData_0 and
	during_o (t, 1, t_end(o), 0, ecall_isa_Port_notify() == 0) and
	during_o (t, 1, t_end(o), -1, fromMemoryPort_notify() == 0) and
	t_end(o)##0 fromMemoryPort_notify() == 1 and
	during_o (t, 1, t_end(o), 0, isa_ecall_Port_notify() == 0) and
	during_o (t, 1, t_end(o), 0, toMemoryPort_notify() == 0) and
	during_o (t, 1, t_end(o), 0, toRegsPort_notify() == 0);
endproperty;
LOAD_REQ_4_32_a: assert property (disable iff (reset) LOAD_REQ_4_32_p(1)); //ASSIGN t_end offset here



property STORE_3_31_p(o);
 bit[31:0] csrfile_mcause_0;
 bit[31:0] csrfile_mepc_0;
 bit[31:0] csrfile_mie_0;
 bit[31:0] csrfile_mstatus_0;
 bit[31:0] csrfile_mtvec_0;
 bit[31:0] mip_isa_Port_sig_0;
 bit[31:0] pcReg_0;
 bit[31:0] regfileWrite_dst_0;
 bit[31:0] regfileWrite_dstData_0;
	t ##0 hold(csrfile_mcause_0, csrfile_mcause()) and
	t ##0 hold(csrfile_mepc_0, csrfile_mepc()) and
	t ##0 hold(csrfile_mie_0, csrfile_mie()) and
	t ##0 hold(csrfile_mstatus_0, csrfile_mstatus()) and
	t ##0 hold(csrfile_mtvec_0, csrfile_mtvec()) and
	t ##0 hold(mip_isa_Port_sig_0, mip_isa_Port_sig()) and
	t ##0 hold(pcReg_0, pcReg()) and
	t ##0 hold(regfileWrite_dst_0, regfileWrite_dst()) and
	t ##0 hold(regfileWrite_dstData_0, regfileWrite_dstData()) and
	t##0 STORE_3() and
	t##0 toMemoryPort_sync()
implies
	t_end(o)##0 FETCH_REQ_1() and
	t_end(o)##0 csrfile_mcause() == updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0) and
	t_end(o)##0 csrfile_mepc() == updateMEPC(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mepc_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0,(pcReg_0 + 4)) and
	t_end(o)##0 csrfile_mie() == csrfile_mie_0 and
	t_end(o)##0 csrfile_mip() == mip_isa_Port_sig_0 and
	t_end(o)##0 csrfile_mstatus() == updateMSTATUS(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0) and
	t_end(o)##0 csrfile_mtvec() == csrfile_mtvec_0 and
	t_end(o)##0 pcReg() == updatePC(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0,csrfile_mtvec_0,(pcReg_0 + 4)) and
	t_end(o)##0 regfileWrite_dst() == regfileWrite_dst_0 and
	t_end(o)##0 regfileWrite_dstData() == regfileWrite_dstData_0 and
	t_end(o)##0 toMemoryPort_sig_addrIn() == updatePC(updateMCAUSE(csrfile_mcause_0,csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0),csrfile_mie_0,mip_isa_Port_sig_0,csrfile_mstatus_0,csrfile_mtvec_0,(pcReg_0 + 4)) and
	t_end(o)##0 toMemoryPort_sig_dataIn() == 0 and
	t_end(o)##0 toMemoryPort_sig_mask() == MT_W and
	t_end(o)##0 toMemoryPort_sig_req() == ME_RD and
	during_o (t, 1, t_end(o), 0, ecall_isa_Port_notify() == 0) and
	during_o (t, 1, t_end(o), 0, fromMemoryPort_notify() == 0) and
	during_o (t, 1, t_end(o), 0, isa_ecall_Port_notify() == 0) and
	during_o (t, 1, t_end(o), -1, toMemoryPort_notify() == 0) and
	t_end(o)##0 toMemoryPort_notify() == 1 and
	during_o (t, 1, t_end(o), 0, toRegsPort_notify() == 0);
endproperty;
STORE_3_31_a: assert property (disable iff (reset) STORE_3_31_p(1)); //ASSIGN t_end offset here


property wait_ECALL_DONE_7_p(o);
 bit[31:0] csrfile_mcause_0;
 bit[31:0] csrfile_mepc_0;
 bit[31:0] csrfile_mie_0;
 bit[31:0] csrfile_mip_0;
 bit[31:0] csrfile_mstatus_0;
 bit[31:0] csrfile_mtvec_0;
 bit[31:0] pcReg_0;
 bit[31:0] regfileWrite_dst_0;
 bit[31:0] regfileWrite_dstData_0;
	t ##0 hold(csrfile_mcause_0, csrfile_mcause()) and
	t ##0 hold(csrfile_mepc_0, csrfile_mepc()) and
	t ##0 hold(csrfile_mie_0, csrfile_mie()) and
	t ##0 hold(csrfile_mip_0, csrfile_mip()) and
	t ##0 hold(csrfile_mstatus_0, csrfile_mstatus()) and
	t ##0 hold(csrfile_mtvec_0, csrfile_mtvec()) and
	t ##0 hold(pcReg_0, pcReg()) and
	t ##0 hold(regfileWrite_dst_0, regfileWrite_dst()) and
	t ##0 hold(regfileWrite_dstData_0, regfileWrite_dstData()) and
	t##0 ECALL_DONE_7() and
	t##0 !(ecall_isa_Port_sync())
implies
	t##1 ECALL_DONE_7() and
	t##1 csrfile_mcause() == csrfile_mcause_0 and
	t##1 csrfile_mepc() == csrfile_mepc_0 and
	t##1 csrfile_mie() == csrfile_mie_0 and
	t##1 csrfile_mip() == csrfile_mip_0 and
	t##1 csrfile_mstatus() == csrfile_mstatus_0 and
	t##1 csrfile_mtvec() == csrfile_mtvec_0 and
	t##1 pcReg() == pcReg_0 and
	t##1 regfileWrite_dst() == regfileWrite_dst_0 and
	t##1 regfileWrite_dstData() == regfileWrite_dstData_0 and
	t##1 ecall_isa_Port_notify() == 1 and
	t##1 fromMemoryPort_notify() == 0 and
	t##1 isa_ecall_Port_notify() == 0 and
	t##1 toMemoryPort_notify() == 0 and
	t##1 toRegsPort_notify() == 0;
endproperty;
wait_ECALL_DONE_7_a: assert property (disable iff (reset) wait_ECALL_DONE_7_p(1)); //ASSIGN t_end offset here



property wait_ECALL_REQ_6_p(o);
 bit[31:0] csrfile_mcause_0;
 bit[31:0] csrfile_mepc_0;
 bit[31:0] csrfile_mie_0;
 bit[31:0] csrfile_mip_0;
 bit[31:0] csrfile_mstatus_0;
 bit[31:0] csrfile_mtvec_0;
 bit[31:0] isa_ecall_Port_sig_0;
 bit[31:0] pcReg_0;
 bit[31:0] regfileWrite_dst_0;
 bit[31:0] regfileWrite_dstData_0;
	t ##0 hold(csrfile_mcause_0, csrfile_mcause()) and
	t ##0 hold(csrfile_mepc_0, csrfile_mepc()) and
	t ##0 hold(csrfile_mie_0, csrfile_mie()) and
	t ##0 hold(csrfile_mip_0, csrfile_mip()) and
	t ##0 hold(csrfile_mstatus_0, csrfile_mstatus()) and
	t ##0 hold(csrfile_mtvec_0, csrfile_mtvec()) and
	t ##0 hold(isa_ecall_Port_sig_0, isa_ecall_Port_sig()) and
	t ##0 hold(pcReg_0, pcReg()) and
	t ##0 hold(regfileWrite_dst_0, regfileWrite_dst()) and
	t ##0 hold(regfileWrite_dstData_0, regfileWrite_dstData()) and
	t##0 ECALL_REQ_6() and
	t##0 !(isa_ecall_Port_sync())
implies
	t##1 ECALL_REQ_6() and
	t##1 csrfile_mcause() == csrfile_mcause_0 and
	t##1 csrfile_mepc() == csrfile_mepc_0 and
	t##1 csrfile_mie() == csrfile_mie_0 and
	t##1 csrfile_mip() == csrfile_mip_0 and
	t##1 csrfile_mstatus() == csrfile_mstatus_0 and
	t##1 csrfile_mtvec() == csrfile_mtvec_0 and
	t##1 isa_ecall_Port_sig() == isa_ecall_Port_sig_0 and
	t##1 pcReg() == pcReg_0 and
	t##1 regfileWrite_dst() == regfileWrite_dst_0 and
	t##1 regfileWrite_dstData() == regfileWrite_dstData_0 and
	t##1 ecall_isa_Port_notify() == 0 and
	t##1 fromMemoryPort_notify() == 0 and
	t##1 isa_ecall_Port_notify() == 1 and
	t##1 toMemoryPort_notify() == 0 and
	t##1 toRegsPort_notify() == 0;
endproperty;
wait_ECALL_REQ_6_a: assert property (disable iff (reset) wait_ECALL_REQ_6_p(1)); //ASSIGN t_end offset here



property wait_FETCH_DONE_2_p(o);
 bit[31:0] csrfile_mcause_0;
 bit[31:0] csrfile_mepc_0;
 bit[31:0] csrfile_mie_0;
 bit[31:0] csrfile_mip_0;
 bit[31:0] csrfile_mstatus_0;
 bit[31:0] csrfile_mtvec_0;
 bit[31:0] pcReg_0;
 bit[31:0] regfileWrite_dst_0;
 bit[31:0] regfileWrite_dstData_0;
	t ##0 hold(csrfile_mcause_0, csrfile_mcause()) and
	t ##0 hold(csrfile_mepc_0, csrfile_mepc()) and
	t ##0 hold(csrfile_mie_0, csrfile_mie()) and
	t ##0 hold(csrfile_mip_0, csrfile_mip()) and
	t ##0 hold(csrfile_mstatus_0, csrfile_mstatus()) and
	t ##0 hold(csrfile_mtvec_0, csrfile_mtvec()) and
	t ##0 hold(pcReg_0, pcReg()) and
	t ##0 hold(regfileWrite_dst_0, regfileWrite_dst()) and
	t ##0 hold(regfileWrite_dstData_0, regfileWrite_dstData()) and
	t##0 FETCH_DONE_2() and
	t##0 !(fromMemoryPort_sync())
implies
	t##1 FETCH_DONE_2() and
	t##1 csrfile_mcause() == csrfile_mcause_0 and
	t##1 csrfile_mepc() == csrfile_mepc_0 and
	t##1 csrfile_mie() == csrfile_mie_0 and
	t##1 csrfile_mip() == csrfile_mip_0 and
	t##1 csrfile_mstatus() == csrfile_mstatus_0 and
	t##1 csrfile_mtvec() == csrfile_mtvec_0 and
	t##1 pcReg() == pcReg_0 and
	t##1 regfileWrite_dst() == regfileWrite_dst_0 and
	t##1 regfileWrite_dstData() == regfileWrite_dstData_0 and
	t##1 ecall_isa_Port_notify() == 0 and
	t##1 fromMemoryPort_notify() == 1 and
	t##1 isa_ecall_Port_notify() == 0 and
	t##1 toMemoryPort_notify() == 0 and
	t##1 toRegsPort_notify() == 0;
endproperty;
wait_FETCH_DONE_2_a: assert property (disable iff (reset) wait_FETCH_DONE_2_p(1)); //ASSIGN t_end offset here



property wait_FETCH_REQ_1_p(o);
 bit[31:0] csrfile_mcause_0;
 bit[31:0] csrfile_mepc_0;
 bit[31:0] csrfile_mie_0;
 bit[31:0] csrfile_mip_0;
 bit[31:0] csrfile_mstatus_0;
 bit[31:0] csrfile_mtvec_0;
 bit[31:0] pcReg_0;
 bit[31:0] regfileWrite_dst_0;
 bit[31:0] regfileWrite_dstData_0;
 bit[31:0] toMemoryPort_sig_0;
	t ##0 hold(csrfile_mcause_0, csrfile_mcause()) and
	t ##0 hold(csrfile_mepc_0, csrfile_mepc()) and
	t ##0 hold(csrfile_mie_0, csrfile_mie()) and
	t ##0 hold(csrfile_mip_0, csrfile_mip()) and
	t ##0 hold(csrfile_mstatus_0, csrfile_mstatus()) and
	t ##0 hold(csrfile_mtvec_0, csrfile_mtvec()) and
	t ##0 hold(pcReg_0, pcReg()) and
	t ##0 hold(regfileWrite_dst_0, regfileWrite_dst()) and
	t ##0 hold(regfileWrite_dstData_0, regfileWrite_dstData()) and
	t ##0 hold(toMemoryPort_sig_0, toMemoryPort_sig()) and
	t##0 FETCH_REQ_1() and
	t##0 !(toMemoryPort_sync())
implies
	t##1 FETCH_REQ_1() and
	t##1 csrfile_mcause() == csrfile_mcause_0 and
	t##1 csrfile_mepc() == csrfile_mepc_0 and
	t##1 csrfile_mie() == csrfile_mie_0 and
	t##1 csrfile_mip() == csrfile_mip_0 and
	t##1 csrfile_mstatus() == csrfile_mstatus_0 and
	t##1 csrfile_mtvec() == csrfile_mtvec_0 and
	t##1 pcReg() == pcReg_0 and
	t##1 regfileWrite_dst() == regfileWrite_dst_0 and
	t##1 regfileWrite_dstData() == regfileWrite_dstData_0 and
	t##1 toMemoryPort_sig() == toMemoryPort_sig_0 and
	t##1 ecall_isa_Port_notify() == 0 and
	t##1 fromMemoryPort_notify() == 0 and
	t##1 isa_ecall_Port_notify() == 0 and
	t##1 toMemoryPort_notify() == 1 and
	t##1 toRegsPort_notify() == 0;
endproperty;
wait_FETCH_REQ_1_a: assert property (disable iff (reset) wait_FETCH_REQ_1_p(1)); //ASSIGN t_end offset here



property wait_LOAD_DONE_5_p(o);
 bit[31:0] csrfile_mcause_0;
 bit[31:0] csrfile_mepc_0;
 bit[31:0] csrfile_mie_0;
 bit[31:0] csrfile_mip_0;
 bit[31:0] csrfile_mstatus_0;
 bit[31:0] csrfile_mtvec_0;
 bit[31:0] pcReg_0;
 bit[31:0] regfileWrite_dst_0;
 bit[31:0] regfileWrite_dstData_0;
	t ##0 hold(csrfile_mcause_0, csrfile_mcause()) and
	t ##0 hold(csrfile_mepc_0, csrfile_mepc()) and
	t ##0 hold(csrfile_mie_0, csrfile_mie()) and
	t ##0 hold(csrfile_mip_0, csrfile_mip()) and
	t ##0 hold(csrfile_mstatus_0, csrfile_mstatus()) and
	t ##0 hold(csrfile_mtvec_0, csrfile_mtvec()) and
	t ##0 hold(pcReg_0, pcReg()) and
	t ##0 hold(regfileWrite_dst_0, regfileWrite_dst()) and
	t ##0 hold(regfileWrite_dstData_0, regfileWrite_dstData()) and
	t##0 LOAD_DONE_5() and
	t##0 !(fromMemoryPort_sync())
implies
	t##1 LOAD_DONE_5() and
	t##1 csrfile_mcause() == csrfile_mcause_0 and
	t##1 csrfile_mepc() == csrfile_mepc_0 and
	t##1 csrfile_mie() == csrfile_mie_0 and
	t##1 csrfile_mip() == csrfile_mip_0 and
	t##1 csrfile_mstatus() == csrfile_mstatus_0 and
	t##1 csrfile_mtvec() == csrfile_mtvec_0 and
	t##1 pcReg() == pcReg_0 and
	t##1 regfileWrite_dst() == regfileWrite_dst_0 and
	t##1 regfileWrite_dstData() == regfileWrite_dstData_0 and
	t##1 ecall_isa_Port_notify() == 0 and
	t##1 fromMemoryPort_notify() == 1 and
	t##1 isa_ecall_Port_notify() == 0 and
	t##1 toMemoryPort_notify() == 0 and
	t##1 toRegsPort_notify() == 0;
endproperty;
wait_LOAD_DONE_5_a: assert property (disable iff (reset) wait_LOAD_DONE_5_p(1)); //ASSIGN t_end offset here



property wait_LOAD_REQ_4_p(o);
 bit[31:0] csrfile_mcause_0;
 bit[31:0] csrfile_mepc_0;
 bit[31:0] csrfile_mie_0;
 bit[31:0] csrfile_mip_0;
 bit[31:0] csrfile_mstatus_0;
 bit[31:0] csrfile_mtvec_0;
 bit[31:0] pcReg_0;
 bit[31:0] regfileWrite_dst_0;
 bit[31:0] regfileWrite_dstData_0;
 bit[31:0] toMemoryPort_sig_0;
	t ##0 hold(csrfile_mcause_0, csrfile_mcause()) and
	t ##0 hold(csrfile_mepc_0, csrfile_mepc()) and
	t ##0 hold(csrfile_mie_0, csrfile_mie()) and
	t ##0 hold(csrfile_mip_0, csrfile_mip()) and
	t ##0 hold(csrfile_mstatus_0, csrfile_mstatus()) and
	t ##0 hold(csrfile_mtvec_0, csrfile_mtvec()) and
	t ##0 hold(pcReg_0, pcReg()) and
	t ##0 hold(regfileWrite_dst_0, regfileWrite_dst()) and
	t ##0 hold(regfileWrite_dstData_0, regfileWrite_dstData()) and
	t ##0 hold(toMemoryPort_sig_0, toMemoryPort_sig()) and
	t##0 LOAD_REQ_4() and
	t##0 !(toMemoryPort_sync())
implies
	t##1 LOAD_REQ_4() and
	t##1 csrfile_mcause() == csrfile_mcause_0 and
	t##1 csrfile_mepc() == csrfile_mepc_0 and
	t##1 csrfile_mie() == csrfile_mie_0 and
	t##1 csrfile_mip() == csrfile_mip_0 and
	t##1 csrfile_mstatus() == csrfile_mstatus_0 and
	t##1 csrfile_mtvec() == csrfile_mtvec_0 and
	t##1 pcReg() == pcReg_0 and
	t##1 regfileWrite_dst() == regfileWrite_dst_0 and
	t##1 regfileWrite_dstData() == regfileWrite_dstData_0 and
	t##1 toMemoryPort_sig() == toMemoryPort_sig_0 and
	t##1 ecall_isa_Port_notify() == 0 and
	t##1 fromMemoryPort_notify() == 0 and
	t##1 isa_ecall_Port_notify() == 0 and
	t##1 toMemoryPort_notify() == 1 and
	t##1 toRegsPort_notify() == 0;
endproperty;
wait_LOAD_REQ_4_a: assert property (disable iff (reset) wait_LOAD_REQ_4_p(1)); //ASSIGN t_end offset here



property wait_STORE_3_p(o);
 bit[31:0] csrfile_mcause_0;
 bit[31:0] csrfile_mepc_0;
 bit[31:0] csrfile_mie_0;
 bit[31:0] csrfile_mip_0;
 bit[31:0] csrfile_mstatus_0;
 bit[31:0] csrfile_mtvec_0;
 bit[31:0] pcReg_0;
 bit[31:0] regfileWrite_dst_0;
 bit[31:0] regfileWrite_dstData_0;
 bit[31:0] toMemoryPort_sig_0;
	t ##0 hold(csrfile_mcause_0, csrfile_mcause()) and
	t ##0 hold(csrfile_mepc_0, csrfile_mepc()) and
	t ##0 hold(csrfile_mie_0, csrfile_mie()) and
	t ##0 hold(csrfile_mip_0, csrfile_mip()) and
	t ##0 hold(csrfile_mstatus_0, csrfile_mstatus()) and
	t ##0 hold(csrfile_mtvec_0, csrfile_mtvec()) and
	t ##0 hold(pcReg_0, pcReg()) and
	t ##0 hold(regfileWrite_dst_0, regfileWrite_dst()) and
	t ##0 hold(regfileWrite_dstData_0, regfileWrite_dstData()) and
	t ##0 hold(toMemoryPort_sig_0, toMemoryPort_sig()) and
	t##0 STORE_3() and
	t##0 !(toMemoryPort_sync())
implies
	t##1 STORE_3() and
	t##1 csrfile_mcause() == csrfile_mcause_0 and
	t##1 csrfile_mepc() == csrfile_mepc_0 and
	t##1 csrfile_mie() == csrfile_mie_0 and
	t##1 csrfile_mip() == csrfile_mip_0 and
	t##1 csrfile_mstatus() == csrfile_mstatus_0 and
	t##1 csrfile_mtvec() == csrfile_mtvec_0 and
	t##1 pcReg() == pcReg_0 and
	t##1 regfileWrite_dst() == regfileWrite_dst_0 and
	t##1 regfileWrite_dstData() == regfileWrite_dstData_0 and
	t##1 toMemoryPort_sig() == toMemoryPort_sig_0 and
	t##1 ecall_isa_Port_notify() == 0 and
	t##1 fromMemoryPort_notify() == 0 and
	t##1 isa_ecall_Port_notify() == 0 and
	t##1 toMemoryPort_notify() == 1 and
	t##1 toRegsPort_notify() == 0;
endproperty;
wait_STORE_3_a: assert property (disable iff (reset) wait_STORE_3_p(1)); //ASSIGN t_end offset here

endmodule

//DESIGNER SHOULD PAY ATTENTION FOR USING THE MODEL CORRECT NAME FOR BINDING AND TO REFER TO THE RESET SIGNAL USED IN IT
bind ISS_Interrupts ISS_Interrupts_verification inst (.*, .reset(rst));
