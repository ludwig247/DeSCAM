import top_level_types::*;
// FUNCTIONS //
function bit[31:0] branchPCcalculation (bit[31:0] aluResult, bit[31:0] encodedInstr, bit[31:0] pcReg);
	if (((getInstrType(encodedInstr) == INSTR_BEQ) && (aluResult == 0))) 
		return (pcReg + getImmediate(encodedInstr)); 
	else if (!(((getInstrType(encodedInstr) == INSTR_BEQ) && (aluResult == 0))) && ((getInstrType(encodedInstr) == INSTR_BNE) && (aluResult != 0)))  return (pcReg + getImmediate(encodedInstr)); 
	else if (!(((getInstrType(encodedInstr) == INSTR_BEQ) && (aluResult == 0))) && !(((getInstrType(encodedInstr) == INSTR_BNE) && (aluResult != 0))) && ((getInstrType(encodedInstr) == INSTR_BLT) && (aluResult == 1))) return (pcReg + getImmediate(encodedInstr)); 
	else if (!(((getInstrType(encodedInstr) == INSTR_BEQ) && (aluResult == 0))) && !(((getInstrType(encodedInstr) == INSTR_BNE) && (aluResult != 0))) && !(((getInstrType(encodedInstr) == INSTR_BLT) && (aluResult == 1))) && ((getInstrType(encodedInstr) == INSTR_BGE) && (aluResult == 0))) return (pcReg + getImmediate(encodedInstr)); 
	else if (!(((getInstrType(encodedInstr) == INSTR_BEQ) && (aluResult == 0))) && !(((getInstrType(encodedInstr) == INSTR_BNE) && (aluResult != 0))) && !(((getInstrType(encodedInstr) == INSTR_BLT) && (aluResult == 1))) && !(((getInstrType(encodedInstr) == INSTR_BGE) && (aluResult == 0))) && ((getInstrType(encodedInstr) == INSTR_BLTU) && (aluResult == 1))) return (pcReg + getImmediate(encodedInstr)); 
	else if (!(((getInstrType(encodedInstr) == INSTR_BEQ) && (aluResult == 0))) && !(((getInstrType(encodedInstr) == INSTR_BNE) && (aluResult != 0))) && !(((getInstrType(encodedInstr) == INSTR_BLT) && (aluResult == 1))) && !(((getInstrType(encodedInstr) == INSTR_BGE) && (aluResult == 0))) && !(((getInstrType(encodedInstr) == INSTR_BLTU) && (aluResult == 1))) && ((getInstrType(encodedInstr) == INSTR_BGEU) && (aluResult == 0))) return (pcReg + getImmediate(encodedInstr)); 
	else if (!(((getInstrType(encodedInstr) == INSTR_BEQ) && (aluResult == 0))) && !(((getInstrType(encodedInstr) == INSTR_BNE) && (aluResult != 0))) && !(((getInstrType(encodedInstr) == INSTR_BLT) && (aluResult == 1))) && !(((getInstrType(encodedInstr) == INSTR_BGE) && (aluResult == 0))) && !(((getInstrType(encodedInstr) == INSTR_BLTU) && (aluResult == 1))) && !(((getInstrType(encodedInstr) == INSTR_BGEU) && (aluResult == 0)))) return (pcReg + 4); 
endfunction

function ALUfuncType getALUfunc (InstrType instr);
	if ((((((((((((instr == INSTR_ADD) || (instr == INSTR_ADDI)) || (instr == INSTR_LB)) || (instr == INSTR_LH)) || (instr == INSTR_LW)) || (instr == INSTR_LBU)) || (instr == INSTR_LHU)) || (instr == INSTR_SB)) || (instr == INSTR_SH)) || (instr == INSTR_SW)) || (instr == INSTR_AUIPC)))  return ALU_ADD; 
	else if (!((((((((((((instr == INSTR_ADD) || (instr == INSTR_ADDI)) || (instr == INSTR_LB)) || (instr == INSTR_LH)) || (instr == INSTR_LW)) || (instr == INSTR_LBU)) || (instr == INSTR_LHU)) || (instr == INSTR_SB)) || (instr == INSTR_SH)) || (instr == INSTR_SW)) || (instr == INSTR_AUIPC))) && (((instr == INSTR_SUB) || (instr == INSTR_BEQ)) || (instr == INSTR_BNE)))  return ALU_SUB; 
	else if (!((((((((((((instr == INSTR_ADD) || (instr == INSTR_ADDI)) || (instr == INSTR_LB)) || (instr == INSTR_LH)) || (instr == INSTR_LW)) || (instr == INSTR_LBU)) || (instr == INSTR_LHU)) || (instr == INSTR_SB)) || (instr == INSTR_SH)) || (instr == INSTR_SW)) || (instr == INSTR_AUIPC))) && !((((instr == INSTR_SUB) || (instr == INSTR_BEQ)) || (instr == INSTR_BNE))) && ((instr == INSTR_SLL) || (instr == INSTR_SLLI)))  return ALU_SLL; 
	else if (!((((((((((((instr == INSTR_ADD) || (instr == INSTR_ADDI)) || (instr == INSTR_LB)) || (instr == INSTR_LH)) || (instr == INSTR_LW)) || (instr == INSTR_LBU)) || (instr == INSTR_LHU)) || (instr == INSTR_SB)) || (instr == INSTR_SH)) || (instr == INSTR_SW)) || (instr == INSTR_AUIPC))) && !((((instr == INSTR_SUB) || (instr == INSTR_BEQ)) || (instr == INSTR_BNE))) && !(((instr == INSTR_SLL) || (instr == INSTR_SLLI))) && ((((instr == INSTR_SLT) || (instr == INSTR_SLTI)) || (instr == INSTR_BLT)) || (instr == INSTR_BGE)))  return ALU_SLT; 
	else if (!((((((((((((instr == INSTR_ADD) || (instr == INSTR_ADDI)) || (instr == INSTR_LB)) || (instr == INSTR_LH)) || (instr == INSTR_LW)) || (instr == INSTR_LBU)) || (instr == INSTR_LHU)) || (instr == INSTR_SB)) || (instr == INSTR_SH)) || (instr == INSTR_SW)) || (instr == INSTR_AUIPC))) && !((((instr == INSTR_SUB) || (instr == INSTR_BEQ)) || (instr == INSTR_BNE))) && !(((instr == INSTR_SLL) || (instr == INSTR_SLLI))) && !(((((instr == INSTR_SLT) || (instr == INSTR_SLTI)) || (instr == INSTR_BLT)) || (instr == INSTR_BGE))) && ((((instr == INSTR_SLTU) || (instr == INSTR_SLTUI)) || (instr == INSTR_BLTU)) || (instr == INSTR_BGEU)))  return ALU_SLTU; 
	else if (!((((((((((((instr == INSTR_ADD) || (instr == INSTR_ADDI)) || (instr == INSTR_LB)) || (instr == INSTR_LH)) || (instr == INSTR_LW)) || (instr == INSTR_LBU)) || (instr == INSTR_LHU)) || (instr == INSTR_SB)) || (instr == INSTR_SH)) || (instr == INSTR_SW)) || (instr == INSTR_AUIPC))) && !((((instr == INSTR_SUB) || (instr == INSTR_BEQ)) || (instr == INSTR_BNE))) && !(((instr == INSTR_SLL) || (instr == INSTR_SLLI))) && !(((((instr == INSTR_SLT) || (instr == INSTR_SLTI)) || (instr == INSTR_BLT)) || (instr == INSTR_BGE))) && !(((((instr == INSTR_SLTU) || (instr == INSTR_SLTUI)) || (instr == INSTR_BLTU)) || (instr == INSTR_BGEU))) && ((instr == INSTR_XOR) || (instr == INSTR_XORI)))  return ALU_XOR; 
	else if (!((((((((((((instr == INSTR_ADD) || (instr == INSTR_ADDI)) || (instr == INSTR_LB)) || (instr == INSTR_LH)) || (instr == INSTR_LW)) || (instr == INSTR_LBU)) || (instr == INSTR_LHU)) || (instr == INSTR_SB)) || (instr == INSTR_SH)) || (instr == INSTR_SW)) || (instr == INSTR_AUIPC))) && !((((instr == INSTR_SUB) || (instr == INSTR_BEQ)) || (instr == INSTR_BNE))) && !(((instr == INSTR_SLL) || (instr == INSTR_SLLI))) && !(((((instr == INSTR_SLT) || (instr == INSTR_SLTI)) || (instr == INSTR_BLT)) || (instr == INSTR_BGE))) && !(((((instr == INSTR_SLTU) || (instr == INSTR_SLTUI)) || (instr == INSTR_BLTU)) || (instr == INSTR_BGEU))) && !(((instr == INSTR_XOR) || (instr == INSTR_XORI))) && ((instr == INSTR_SRL) || (instr == INSTR_SRLI)))  return ALU_SRL; 
	else if (!((((((((((((instr == INSTR_ADD) || (instr == INSTR_ADDI)) || (instr == INSTR_LB)) || (instr == INSTR_LH)) || (instr == INSTR_LW)) || (instr == INSTR_LBU)) || (instr == INSTR_LHU)) || (instr == INSTR_SB)) || (instr == INSTR_SH)) || (instr == INSTR_SW)) || (instr == INSTR_AUIPC))) && !((((instr == INSTR_SUB) || (instr == INSTR_BEQ)) || (instr == INSTR_BNE))) && !(((instr == INSTR_SLL) || (instr == INSTR_SLLI))) && !(((((instr == INSTR_SLT) || (instr == INSTR_SLTI)) || (instr == INSTR_BLT)) || (instr == INSTR_BGE))) && !(((((instr == INSTR_SLTU) || (instr == INSTR_SLTUI)) || (instr == INSTR_BLTU)) || (instr == INSTR_BGEU))) && !(((instr == INSTR_XOR) || (instr == INSTR_XORI))) && !(((instr == INSTR_SRL) || (instr == INSTR_SRLI))) && ((instr == INSTR_SRA) || (instr == INSTR_SRAI)))  return ALU_SRA; 
	else if (!((((((((((((instr == INSTR_ADD) || (instr == INSTR_ADDI)) || (instr == INSTR_LB)) || (instr == INSTR_LH)) || (instr == INSTR_LW)) || (instr == INSTR_LBU)) || (instr == INSTR_LHU)) || (instr == INSTR_SB)) || (instr == INSTR_SH)) || (instr == INSTR_SW)) || (instr == INSTR_AUIPC))) && !((((instr == INSTR_SUB) || (instr == INSTR_BEQ)) || (instr == INSTR_BNE))) && !(((instr == INSTR_SLL) || (instr == INSTR_SLLI))) && !(((((instr == INSTR_SLT) || (instr == INSTR_SLTI)) || (instr == INSTR_BLT)) || (instr == INSTR_BGE))) && !(((((instr == INSTR_SLTU) || (instr == INSTR_SLTUI)) || (instr == INSTR_BLTU)) || (instr == INSTR_BGEU))) && !(((instr == INSTR_XOR) || (instr == INSTR_XORI))) && !(((instr == INSTR_SRL) || (instr == INSTR_SRLI))) && !(((instr == INSTR_SRA) || (instr == INSTR_SRAI))) && ((instr == INSTR_OR) || (instr == INSTR_ORI)))  return ALU_OR; 
	else if (!((((((((((((instr == INSTR_ADD) || (instr == INSTR_ADDI)) || (instr == INSTR_LB)) || (instr == INSTR_LH)) || (instr == INSTR_LW)) || (instr == INSTR_LBU)) || (instr == INSTR_LHU)) || (instr == INSTR_SB)) || (instr == INSTR_SH)) || (instr == INSTR_SW)) || (instr == INSTR_AUIPC))) && !((((instr == INSTR_SUB) || (instr == INSTR_BEQ)) || (instr == INSTR_BNE))) && !(((instr == INSTR_SLL) || (instr == INSTR_SLLI))) && !(((((instr == INSTR_SLT) || (instr == INSTR_SLTI)) || (instr == INSTR_BLT)) || (instr == INSTR_BGE))) && !(((((instr == INSTR_SLTU) || (instr == INSTR_SLTUI)) || (instr == INSTR_BLTU)) || (instr == INSTR_BGEU))) && !(((instr == INSTR_XOR) || (instr == INSTR_XORI))) && !(((instr == INSTR_SRL) || (instr == INSTR_SRLI))) && !(((instr == INSTR_SRA) || (instr == INSTR_SRAI))) && !(((instr == INSTR_OR) || (instr == INSTR_ORI))) && ((instr == INSTR_AND) || (instr == INSTR_ANDI)))  return ALU_AND; 
	else if (!((((((((((((instr == INSTR_ADD) || (instr == INSTR_ADDI)) || (instr == INSTR_LB)) || (instr == INSTR_LH)) || (instr == INSTR_LW)) || (instr == INSTR_LBU)) || (instr == INSTR_LHU)) || (instr == INSTR_SB)) || (instr == INSTR_SH)) || (instr == INSTR_SW)) || (instr == INSTR_AUIPC))) && !((((instr == INSTR_SUB) || (instr == INSTR_BEQ)) || (instr == INSTR_BNE))) && !(((instr == INSTR_SLL) || (instr == INSTR_SLLI))) && !(((((instr == INSTR_SLT) || (instr == INSTR_SLTI)) || (instr == INSTR_BLT)) || (instr == INSTR_BGE))) && !(((((instr == INSTR_SLTU) || (instr == INSTR_SLTUI)) || (instr == INSTR_BLTU)) || (instr == INSTR_BGEU))) && !(((instr == INSTR_XOR) || (instr == INSTR_XORI))) && !(((instr == INSTR_SRL) || (instr == INSTR_SRLI))) && !(((instr == INSTR_SRA) || (instr == INSTR_SRAI))) && !(((instr == INSTR_OR) || (instr == INSTR_ORI))) && !(((instr == INSTR_AND) || (instr == INSTR_ANDI))) && ((instr == INSTR_JALR) || (instr == INSTR_JAL)))  return ALU_X; 
	else if (!((((((((((((instr == INSTR_ADD) || (instr == INSTR_ADDI)) || (instr == INSTR_LB)) || (instr == INSTR_LH)) || (instr == INSTR_LW)) || (instr == INSTR_LBU)) || (instr == INSTR_LHU)) || (instr == INSTR_SB)) || (instr == INSTR_SH)) || (instr == INSTR_SW)) || (instr == INSTR_AUIPC))) && !((((instr == INSTR_SUB) || (instr == INSTR_BEQ)) || (instr == INSTR_BNE))) && !(((instr == INSTR_SLL) || (instr == INSTR_SLLI))) && !(((((instr == INSTR_SLT) || (instr == INSTR_SLTI)) || (instr == INSTR_BLT)) || (instr == INSTR_BGE))) && !(((((instr == INSTR_SLTU) || (instr == INSTR_SLTUI)) || (instr == INSTR_BLTU)) || (instr == INSTR_BGEU))) && !(((instr == INSTR_XOR) || (instr == INSTR_XORI))) && !(((instr == INSTR_SRL) || (instr == INSTR_SRLI))) && !(((instr == INSTR_SRA) || (instr == INSTR_SRAI))) && !(((instr == INSTR_OR) || (instr == INSTR_ORI))) && !(((instr == INSTR_AND) || (instr == INSTR_ANDI))) && !(((instr == INSTR_JALR) || (instr == INSTR_JAL))) && (instr == INSTR_LUI))  return ALU_COPY1; 
	else if (!((((((((((((instr == INSTR_ADD) || (instr == INSTR_ADDI)) || (instr == INSTR_LB)) || (instr == INSTR_LH)) || (instr == INSTR_LW)) || (instr == INSTR_LBU)) || (instr == INSTR_LHU)) || (instr == INSTR_SB)) || (instr == INSTR_SH)) || (instr == INSTR_SW)) || (instr == INSTR_AUIPC))) && !((((instr == INSTR_SUB) || (instr == INSTR_BEQ)) || (instr == INSTR_BNE))) && !(((instr == INSTR_SLL) || (instr == INSTR_SLLI))) && !(((((instr == INSTR_SLT) || (instr == INSTR_SLTI)) || (instr == INSTR_BLT)) || (instr == INSTR_BGE))) && !(((((instr == INSTR_SLTU) || (instr == INSTR_SLTUI)) || (instr == INSTR_BLTU)) || (instr == INSTR_BGEU))) && !(((instr == INSTR_XOR) || (instr == INSTR_XORI))) && !(((instr == INSTR_SRL) || (instr == INSTR_SRLI))) && !(((instr == INSTR_SRA) || (instr == INSTR_SRAI))) && !(((instr == INSTR_OR) || (instr == INSTR_ORI))) && !(((instr == INSTR_AND) || (instr == INSTR_ANDI))) && !(((instr == INSTR_JALR) || (instr == INSTR_JAL))) && !((instr == INSTR_LUI)))  return ALU_X; 
endfunction

function bit[31:0] getALUresult (ALUfuncType aluFunction, bit[31:0] operand1, bit[31:0] operand2);
	if ((aluFunction == ALU_ADD))  return (operand1 + operand2); 
	else if (!((aluFunction == ALU_ADD)) && (aluFunction == ALU_SUB))  return (operand1 + (operand2 * 4294967295)); 
	else if (!((aluFunction == ALU_ADD)) && !((aluFunction == ALU_SUB)) && (aluFunction == ALU_AND))  return (operand1 & operand2); 
	else if (!((aluFunction == ALU_ADD)) && !((aluFunction == ALU_SUB)) && !((aluFunction == ALU_AND)) && (aluFunction == ALU_OR))  return (operand1 | operand2); 
	else if (!((aluFunction == ALU_ADD)) && !((aluFunction == ALU_SUB)) && !((aluFunction == ALU_AND)) && !((aluFunction == ALU_OR)) && (aluFunction == ALU_XOR))  return (operand1 ^ operand2); 
	else if (!((aluFunction == ALU_ADD)) && !((aluFunction == ALU_SUB)) && !((aluFunction == ALU_AND)) && !((aluFunction == ALU_OR)) && !((aluFunction == ALU_XOR)) && (aluFunction == ALU_SLT) && (signed'(32'(operand1)) < signed'(32'(operand2))))  return 1; 
	else if (!((aluFunction == ALU_ADD)) && !((aluFunction == ALU_SUB)) && !((aluFunction == ALU_AND)) && !((aluFunction == ALU_OR)) && !((aluFunction == ALU_XOR)) && (aluFunction == ALU_SLT) && !((signed'(32'(operand1)) < signed'(32'(operand2)))))  return 0; 
	else if (!((aluFunction == ALU_ADD)) && !((aluFunction == ALU_SUB)) && !((aluFunction == ALU_AND)) && !((aluFunction == ALU_OR)) && !((aluFunction == ALU_XOR)) && !((aluFunction == ALU_SLT)) && (aluFunction == ALU_SLTU) && (operand1 < operand2))  return 1; 
	else if (!((aluFunction == ALU_ADD)) && !((aluFunction == ALU_SUB)) && !((aluFunction == ALU_AND)) && !((aluFunction == ALU_OR)) && !((aluFunction == ALU_XOR)) && !((aluFunction == ALU_SLT)) && (aluFunction == ALU_SLTU) && !((operand1 < operand2)))  return 0; 
	else if (!((aluFunction == ALU_ADD)) && !((aluFunction == ALU_SUB)) && !((aluFunction == ALU_AND)) && !((aluFunction == ALU_OR)) && !((aluFunction == ALU_XOR)) && !((aluFunction == ALU_SLT)) && !((aluFunction == ALU_SLTU)) && (aluFunction == ALU_SLL))  return (operand1<<(operand2 & 31)); 
	else if (!((aluFunction == ALU_ADD)) && !((aluFunction == ALU_SUB)) && !((aluFunction == ALU_AND)) && !((aluFunction == ALU_OR)) && !((aluFunction == ALU_XOR)) && !((aluFunction == ALU_SLT)) && !((aluFunction == ALU_SLTU)) && !((aluFunction == ALU_SLL)) && (aluFunction == ALU_SRA))  return unsigned'(32'((signed'(32'(operand1))>>signed'(32'((operand2 & 31)))))); 
	else if (!((aluFunction == ALU_ADD)) && !((aluFunction == ALU_SUB)) && !((aluFunction == ALU_AND)) && !((aluFunction == ALU_OR)) && !((aluFunction == ALU_XOR)) && !((aluFunction == ALU_SLT)) && !((aluFunction == ALU_SLTU)) && !((aluFunction == ALU_SLL)) && !((aluFunction == ALU_SRA)) && (aluFunction == ALU_SRL))  return (operand1>>(operand2 & 31)); 
	else if (!((aluFunction == ALU_ADD)) && !((aluFunction == ALU_SUB)) && !((aluFunction == ALU_AND)) && !((aluFunction == ALU_OR)) && !((aluFunction == ALU_XOR)) && !((aluFunction == ALU_SLT)) && !((aluFunction == ALU_SLTU)) && !((aluFunction == ALU_SLL)) && !((aluFunction == ALU_SRA)) && !((aluFunction == ALU_SRL)) && (aluFunction == ALU_COPY1))  return operand1; 
	else if (!((aluFunction == ALU_ADD)) && !((aluFunction == ALU_SUB)) && !((aluFunction == ALU_AND)) && !((aluFunction == ALU_OR)) && !((aluFunction == ALU_XOR)) && !((aluFunction == ALU_SLT)) && !((aluFunction == ALU_SLTU)) && !((aluFunction == ALU_SLL)) && !((aluFunction == ALU_SRA)) && !((aluFunction == ALU_SRL)) && !((aluFunction == ALU_COPY1)))  return 0; 
endfunction

function EncType getEncType (bit[31:0] encodedInstr);
	if (((encodedInstr & 127) == 51))  return ENC_R; 
	else if (!(((encodedInstr & 127) == 51)) && ((encodedInstr & 127) == 19))  return ENC_I_I; 
	else if (!(((encodedInstr & 127) == 51)) && !(((encodedInstr & 127) == 19)) && ((encodedInstr & 127) == 3))  return ENC_I_L; 
	else if (!(((encodedInstr & 127) == 51)) && !(((encodedInstr & 127) == 19)) && !(((encodedInstr & 127) == 3)) && ((encodedInstr & 127) == 103))  return ENC_I_J; 
	else if (!(((encodedInstr & 127) == 51)) && !(((encodedInstr & 127) == 19)) && !(((encodedInstr & 127) == 3)) && !(((encodedInstr & 127) == 103)) && ((encodedInstr & 127) == 35))  return ENC_S; 
	else if (!(((encodedInstr & 127) == 51)) && !(((encodedInstr & 127) == 19)) && !(((encodedInstr & 127) == 3)) && !(((encodedInstr & 127) == 103)) && !(((encodedInstr & 127) == 35)) && ((encodedInstr & 127) == 99))  return ENC_B; 
	else if (!(((encodedInstr & 127) == 51)) && !(((encodedInstr & 127) == 19)) && !(((encodedInstr & 127) == 3)) && !(((encodedInstr & 127) == 103)) && !(((encodedInstr & 127) == 35)) && !(((encodedInstr & 127) == 99)) && (((encodedInstr & 127) == 55) || ((encodedInstr & 127) == 23)))  return ENC_U; 
	else if (!(((encodedInstr & 127) == 51)) && !(((encodedInstr & 127) == 19)) && !(((encodedInstr & 127) == 3)) && !(((encodedInstr & 127) == 103)) && !(((encodedInstr & 127) == 35)) && !(((encodedInstr & 127) == 99)) && !((((encodedInstr & 127) == 55) || ((encodedInstr & 127) == 23))) && ((encodedInstr & 127) == 111))  return ENC_J; 
	else if (!(((encodedInstr & 127) == 51)) && !(((encodedInstr & 127) == 19)) && !(((encodedInstr & 127) == 3)) && !(((encodedInstr & 127) == 103)) && !(((encodedInstr & 127) == 35)) && !(((encodedInstr & 127) == 99)) && !((((encodedInstr & 127) == 55) || ((encodedInstr & 127) == 23))) && !(((encodedInstr & 127) == 111)))  return ENC_ERR; 
endfunction

function bit[31:0] getEncUALUresult (bit[31:0] encodedInstr, bit[31:0] pcReg);
	if ((getInstrType(encodedInstr) == INSTR_LUI))  return getALUresult(ALU_COPY1,getImmediate(encodedInstr),0); 
	else if (!((getInstrType(encodedInstr) == INSTR_LUI)))  return getALUresult(ALU_ADD,pcReg,getImmediate(encodedInstr)); 
endfunction

function bit[31:0] getImmediate (bit[31:0] encodedInstr);
	if (((((encodedInstr & 127) == 19) || ((encodedInstr & 127) == 3)) || ((encodedInstr & 127) == 103)) && (((encodedInstr>>31) & 1) == 0))  return (encodedInstr>>20); 
	else if (((((encodedInstr & 127) == 19) || ((encodedInstr & 127) == 3)) || ((encodedInstr & 127) == 103)) && !((((encodedInstr>>31) & 1) == 0)))  return (unsigned'(32'(-4096)) | (encodedInstr>>20)); 
	else if (!(((((encodedInstr & 127) == 19) || ((encodedInstr & 127) == 3)) || ((encodedInstr & 127) == 103))) && ((encodedInstr & 127) == 35) && (((encodedInstr>>31) & 1) == 0))  return (((encodedInstr>>20) & 4064) | ((encodedInstr>>7) & 31)); 
	else if (!(((((encodedInstr & 127) == 19) || ((encodedInstr & 127) == 3)) || ((encodedInstr & 127) == 103))) && ((encodedInstr & 127) == 35) && !((((encodedInstr>>31) & 1) == 0)))  return (unsigned'(32'(-4096)) | (((encodedInstr>>20) & 4064) | ((encodedInstr>>7) & 31))); 
	else if (!(((((encodedInstr & 127) == 19) || ((encodedInstr & 127) == 3)) || ((encodedInstr & 127) == 103))) && !(((encodedInstr & 127) == 35)) && ((encodedInstr & 127) == 99) && (((encodedInstr>>31) & 1) == 0))  return ((((encodedInstr<<4) & 2048) | ((encodedInstr>>20) & 2016)) | ((encodedInstr>>7) & 30)); 
	else if (!(((((encodedInstr & 127) == 19) || ((encodedInstr & 127) == 3)) || ((encodedInstr & 127) == 103))) && !(((encodedInstr & 127) == 35)) && ((encodedInstr & 127) == 99) && !((((encodedInstr>>31) & 1) == 0)))  return (unsigned'(32'(-4096)) | ((((encodedInstr<<4) & 2048) | ((encodedInstr>>20) & 2016)) | ((encodedInstr>>7) & 30))); 
	else if (!(((((encodedInstr & 127) == 19) || ((encodedInstr & 127) == 3)) || ((encodedInstr & 127) == 103))) && !(((encodedInstr & 127) == 35)) && !(((encodedInstr & 127) == 99)) && (((encodedInstr & 127) == 55) || ((encodedInstr & 127) == 23)))  return (encodedInstr & unsigned'(32'(-4096))); 
	else if (!(((((encodedInstr & 127) == 19) || ((encodedInstr & 127) == 3)) || ((encodedInstr & 127) == 103))) && !(((encodedInstr & 127) == 35)) && !(((encodedInstr & 127) == 99)) && !((((encodedInstr & 127) == 55) || ((encodedInstr & 127) == 23))) && ((encodedInstr & 127) == 111) && (((encodedInstr>>31) & 1) == 0))  return (((encodedInstr & 1044480) | ((encodedInstr>>9) & 2048)) | ((encodedInstr>>20) & 2046)); 
	else if (!(((((encodedInstr & 127) == 19) || ((encodedInstr & 127) == 3)) || ((encodedInstr & 127) == 103))) && !(((encodedInstr & 127) == 35)) && !(((encodedInstr & 127) == 99)) && !((((encodedInstr & 127) == 55) || ((encodedInstr & 127) == 23))) && ((encodedInstr & 127) == 111) && !((((encodedInstr>>31) & 1) == 0)))  return (unsigned'(32'(-1048576)) | (((encodedInstr & 1044480) | ((encodedInstr>>9) & 2048)) | ((encodedInstr>>20) & 2046))); 
	else if (!(((((encodedInstr & 127) == 19) || ((encodedInstr & 127) == 3)) || ((encodedInstr & 127) == 103))) && !(((encodedInstr & 127) == 35)) && !(((encodedInstr & 127) == 99)) && !((((encodedInstr & 127) == 55) || ((encodedInstr & 127) == 23))) && !(((encodedInstr & 127) == 111)))  return 0; 
endfunction

function InstrType getInstrType (bit[31:0] encodedInstr);
	if (((encodedInstr & 127) == 51) && (((encodedInstr>>12) & 7) == 0) && (((encodedInstr>>25) & 127) == 0))  return INSTR_ADD; 
	else if (((encodedInstr & 127) == 51) && (((encodedInstr>>12) & 7) == 0) && !((((encodedInstr>>25) & 127) == 0)) && (((encodedInstr>>25) & 127) == 32))  return INSTR_SUB; 
	else if (((encodedInstr & 127) == 51) && (((encodedInstr>>12) & 7) == 0) && !((((encodedInstr>>25) & 127) == 0)) && !((((encodedInstr>>25) & 127) == 32)))  return INSTR_UNKNOWN; 
	else if (((encodedInstr & 127) == 51) && !((((encodedInstr>>12) & 7) == 0)) && (((encodedInstr>>12) & 7) == 1))  return INSTR_SLL; 
	else if (((encodedInstr & 127) == 51) && !((((encodedInstr>>12) & 7) == 0)) && !((((encodedInstr>>12) & 7) == 1)) && (((encodedInstr>>12) & 7) == 2))  return INSTR_SLT; 
	else if (((encodedInstr & 127) == 51) && !((((encodedInstr>>12) & 7) == 0)) && !((((encodedInstr>>12) & 7) == 1)) && !((((encodedInstr>>12) & 7) == 2)) && (((encodedInstr>>12) & 7) == 3))  return INSTR_SLTU; 
	else if (((encodedInstr & 127) == 51) && !((((encodedInstr>>12) & 7) == 0)) && !((((encodedInstr>>12) & 7) == 1)) && !((((encodedInstr>>12) & 7) == 2)) && !((((encodedInstr>>12) & 7) == 3)) && (((encodedInstr>>12) & 7) == 4))  return INSTR_XOR; 
	else if (((encodedInstr & 127) == 51) && !((((encodedInstr>>12) & 7) == 0)) && !((((encodedInstr>>12) & 7) == 1)) && !((((encodedInstr>>12) & 7) == 2)) && !((((encodedInstr>>12) & 7) == 3)) && !((((encodedInstr>>12) & 7) == 4)) && (((encodedInstr>>12) & 7) == 5) && (((encodedInstr>>25) & 127) == 0))  return INSTR_SRL; 
	else if (((encodedInstr & 127) == 51) && !((((encodedInstr>>12) & 7) == 0)) && !((((encodedInstr>>12) & 7) == 1)) && !((((encodedInstr>>12) & 7) == 2)) && !((((encodedInstr>>12) & 7) == 3)) && !((((encodedInstr>>12) & 7) == 4)) && (((encodedInstr>>12) & 7) == 5) && !((((encodedInstr>>25) & 127) == 0)) && (((encodedInstr>>25) & 127) == 32))  return INSTR_SRA; 
	else if (((encodedInstr & 127) == 51) && !((((encodedInstr>>12) & 7) == 0)) && !((((encodedInstr>>12) & 7) == 1)) && !((((encodedInstr>>12) & 7) == 2)) && !((((encodedInstr>>12) & 7) == 3)) && !((((encodedInstr>>12) & 7) == 4)) && (((encodedInstr>>12) & 7) == 5) && !((((encodedInstr>>25) & 127) == 0)) && !((((encodedInstr>>25) & 127) == 32)))  return INSTR_UNKNOWN; 
	else if (((encodedInstr & 127) == 51) && !((((encodedInstr>>12) & 7) == 0)) && !((((encodedInstr>>12) & 7) == 1)) && !((((encodedInstr>>12) & 7) == 2)) && !((((encodedInstr>>12) & 7) == 3)) && !((((encodedInstr>>12) & 7) == 4)) && !((((encodedInstr>>12) & 7) == 5)) && (((encodedInstr>>12) & 7) == 6))  return INSTR_OR; 
	else if (((encodedInstr & 127) == 51) && !((((encodedInstr>>12) & 7) == 0)) && !((((encodedInstr>>12) & 7) == 1)) && !((((encodedInstr>>12) & 7) == 2)) && !((((encodedInstr>>12) & 7) == 3)) && !((((encodedInstr>>12) & 7) == 4)) && !((((encodedInstr>>12) & 7) == 5)) && !((((encodedInstr>>12) & 7) == 6)) && (((encodedInstr>>12) & 7) == 7))  return INSTR_AND; 
	else if (((encodedInstr & 127) == 51) && !((((encodedInstr>>12) & 7) == 0)) && !((((encodedInstr>>12) & 7) == 1)) && !((((encodedInstr>>12) & 7) == 2)) && !((((encodedInstr>>12) & 7) == 3)) && !((((encodedInstr>>12) & 7) == 4)) && !((((encodedInstr>>12) & 7) == 5)) && !((((encodedInstr>>12) & 7) == 6)) && !((((encodedInstr>>12) & 7) == 7)))  return INSTR_UNKNOWN; 
	else if (!(((encodedInstr & 127) == 51)) && ((encodedInstr & 127) == 19) && (((encodedInstr>>12) & 7) == 0))  return INSTR_ADDI; 
	else if (!(((encodedInstr & 127) == 51)) && ((encodedInstr & 127) == 19) && !((((encodedInstr>>12) & 7) == 0)) && (((encodedInstr>>12) & 7) == 1))  return INSTR_SLLI; 
	else if (!(((encodedInstr & 127) == 51)) && ((encodedInstr & 127) == 19) && !((((encodedInstr>>12) & 7) == 0)) && !((((encodedInstr>>12) & 7) == 1)) && (((encodedInstr>>12) & 7) == 2))  return INSTR_SLTI; 
	else if (!(((encodedInstr & 127) == 51)) && ((encodedInstr & 127) == 19) && !((((encodedInstr>>12) & 7) == 0)) && !((((encodedInstr>>12) & 7) == 1)) && !((((encodedInstr>>12) & 7) == 2)) && (((encodedInstr>>12) & 7) == 3))  return INSTR_SLTUI; 
	else if (!(((encodedInstr & 127) == 51)) && ((encodedInstr & 127) == 19) && !((((encodedInstr>>12) & 7) == 0)) && !((((encodedInstr>>12) & 7) == 1)) && !((((encodedInstr>>12) & 7) == 2)) && !((((encodedInstr>>12) & 7) == 3)) && (((encodedInstr>>12) & 7) == 4))  return INSTR_XORI; 
	else if (!(((encodedInstr & 127) == 51)) && ((encodedInstr & 127) == 19) && !((((encodedInstr>>12) & 7) == 0)) && !((((encodedInstr>>12) & 7) == 1)) && !((((encodedInstr>>12) & 7) == 2)) && !((((encodedInstr>>12) & 7) == 3)) && !((((encodedInstr>>12) & 7) == 4)) && (((encodedInstr>>12) & 7) == 5) && (((encodedInstr>>25) & 127) == 0))  return INSTR_SRLI; 
	else if (!(((encodedInstr & 127) == 51)) && ((encodedInstr & 127) == 19) && !((((encodedInstr>>12) & 7) == 0)) && !((((encodedInstr>>12) & 7) == 1)) && !((((encodedInstr>>12) & 7) == 2)) && !((((encodedInstr>>12) & 7) == 3)) && !((((encodedInstr>>12) & 7) == 4)) && (((encodedInstr>>12) & 7) == 5) && !((((encodedInstr>>25) & 127) == 0)) && (((encodedInstr>>25) & 127) == 32))  return INSTR_SRAI; 
	else if (!(((encodedInstr & 127) == 51)) && ((encodedInstr & 127) == 19) && !((((encodedInstr>>12) & 7) == 0)) && !((((encodedInstr>>12) & 7) == 1)) && !((((encodedInstr>>12) & 7) == 2)) && !((((encodedInstr>>12) & 7) == 3)) && !((((encodedInstr>>12) & 7) == 4)) && (((encodedInstr>>12) & 7) == 5) && !((((encodedInstr>>25) & 127) == 0)) && !((((encodedInstr>>25) & 127) == 32)))  return INSTR_UNKNOWN; 
	else if (!(((encodedInstr & 127) == 51)) && ((encodedInstr & 127) == 19) && !((((encodedInstr>>12) & 7) == 0)) && !((((encodedInstr>>12) & 7) == 1)) && !((((encodedInstr>>12) & 7) == 2)) && !((((encodedInstr>>12) & 7) == 3)) && !((((encodedInstr>>12) & 7) == 4)) && !((((encodedInstr>>12) & 7) == 5)) && (((encodedInstr>>12) & 7) == 6))  return INSTR_ORI; 
	else if (!(((encodedInstr & 127) == 51)) && ((encodedInstr & 127) == 19) && !((((encodedInstr>>12) & 7) == 0)) && !((((encodedInstr>>12) & 7) == 1)) && !((((encodedInstr>>12) & 7) == 2)) && !((((encodedInstr>>12) & 7) == 3)) && !((((encodedInstr>>12) & 7) == 4)) && !((((encodedInstr>>12) & 7) == 5)) && !((((encodedInstr>>12) & 7) == 6)) && (((encodedInstr>>12) & 7) == 7))  return INSTR_ANDI; 
	else if (!(((encodedInstr & 127) == 51)) && ((encodedInstr & 127) == 19) && !((((encodedInstr>>12) & 7) == 0)) && !((((encodedInstr>>12) & 7) == 1)) && !((((encodedInstr>>12) & 7) == 2)) && !((((encodedInstr>>12) & 7) == 3)) && !((((encodedInstr>>12) & 7) == 4)) && !((((encodedInstr>>12) & 7) == 5)) && !((((encodedInstr>>12) & 7) == 6)) && !((((encodedInstr>>12) & 7) == 7)))  return INSTR_UNKNOWN; 
	else if (!(((encodedInstr & 127) == 51)) && !(((encodedInstr & 127) == 19)) && ((encodedInstr & 127) == 3) && (((encodedInstr>>12) & 7) == 0))  return INSTR_LB; 
	else if (!(((encodedInstr & 127) == 51)) && !(((encodedInstr & 127) == 19)) && ((encodedInstr & 127) == 3) && !((((encodedInstr>>12) & 7) == 0)) && (((encodedInstr>>12) & 7) == 1))  return INSTR_LH; 
	else if (!(((encodedInstr & 127) == 51)) && !(((encodedInstr & 127) == 19)) && ((encodedInstr & 127) == 3) && !((((encodedInstr>>12) & 7) == 0)) && !((((encodedInstr>>12) & 7) == 1)) && (((encodedInstr>>12) & 7) == 2))  return INSTR_LW; 
	else if (!(((encodedInstr & 127) == 51)) && !(((encodedInstr & 127) == 19)) && ((encodedInstr & 127) == 3) && !((((encodedInstr>>12) & 7) == 0)) && !((((encodedInstr>>12) & 7) == 1)) && !((((encodedInstr>>12) & 7) == 2)) && (((encodedInstr>>12) & 7) == 4))  return INSTR_LBU; 
	else if (!(((encodedInstr & 127) == 51)) && !(((encodedInstr & 127) == 19)) && ((encodedInstr & 127) == 3) && !((((encodedInstr>>12) & 7) == 0)) && !((((encodedInstr>>12) & 7) == 1)) && !((((encodedInstr>>12) & 7) == 2)) && !((((encodedInstr>>12) & 7) == 4)) && (((encodedInstr>>12) & 7) == 5))  return INSTR_LHU; 
	else if (!(((encodedInstr & 127) == 51)) && !(((encodedInstr & 127) == 19)) && ((encodedInstr & 127) == 3) && !((((encodedInstr>>12) & 7) == 0)) && !((((encodedInstr>>12) & 7) == 1)) && !((((encodedInstr>>12) & 7) == 2)) && !((((encodedInstr>>12) & 7) == 4)) && !((((encodedInstr>>12) & 7) == 5)))  return INSTR_UNKNOWN; 
	else if (!(((encodedInstr & 127) == 51)) && !(((encodedInstr & 127) == 19)) && !(((encodedInstr & 127) == 3)) && ((encodedInstr & 127) == 103))  return INSTR_JALR; 
	else if (!(((encodedInstr & 127) == 51)) && !(((encodedInstr & 127) == 19)) && !(((encodedInstr & 127) == 3)) && !(((encodedInstr & 127) == 103)) && ((encodedInstr & 127) == 35) && (((encodedInstr>>12) & 7) == 0))  return INSTR_SB; 
	else if (!(((encodedInstr & 127) == 51)) && !(((encodedInstr & 127) == 19)) && !(((encodedInstr & 127) == 3)) && !(((encodedInstr & 127) == 103)) && ((encodedInstr & 127) == 35) && !((((encodedInstr>>12) & 7) == 0)) && (((encodedInstr>>12) & 7) == 1))  return INSTR_SH; 
	else if (!(((encodedInstr & 127) == 51)) && !(((encodedInstr & 127) == 19)) && !(((encodedInstr & 127) == 3)) && !(((encodedInstr & 127) == 103)) && ((encodedInstr & 127) == 35) && !((((encodedInstr>>12) & 7) == 0)) && !((((encodedInstr>>12) & 7) == 1)) && (((encodedInstr>>12) & 7) == 2))  return INSTR_SW; 
	else if (!(((encodedInstr & 127) == 51)) && !(((encodedInstr & 127) == 19)) && !(((encodedInstr & 127) == 3)) && !(((encodedInstr & 127) == 103)) && ((encodedInstr & 127) == 35) && !((((encodedInstr>>12) & 7) == 0)) && !((((encodedInstr>>12) & 7) == 1)) && !((((encodedInstr>>12) & 7) == 2)))  return INSTR_UNKNOWN; 
	else if (!(((encodedInstr & 127) == 51)) && !(((encodedInstr & 127) == 19)) && !(((encodedInstr & 127) == 3)) && !(((encodedInstr & 127) == 103)) && !(((encodedInstr & 127) == 35)) && ((encodedInstr & 127) == 99) && (((encodedInstr>>12) & 7) == 0))  return INSTR_BEQ; 
	else if (!(((encodedInstr & 127) == 51)) && !(((encodedInstr & 127) == 19)) && !(((encodedInstr & 127) == 3)) && !(((encodedInstr & 127) == 103)) && !(((encodedInstr & 127) == 35)) && ((encodedInstr & 127) == 99) && !((((encodedInstr>>12) & 7) == 0)) && (((encodedInstr>>12) & 7) == 1))  return INSTR_BNE; 
	else if (!(((encodedInstr & 127) == 51)) && !(((encodedInstr & 127) == 19)) && !(((encodedInstr & 127) == 3)) && !(((encodedInstr & 127) == 103)) && !(((encodedInstr & 127) == 35)) && ((encodedInstr & 127) == 99) && !((((encodedInstr>>12) & 7) == 0)) && !((((encodedInstr>>12) & 7) == 1)) && (((encodedInstr>>12) & 7) == 4))  return INSTR_BLT; 
	else if (!(((encodedInstr & 127) == 51)) && !(((encodedInstr & 127) == 19)) && !(((encodedInstr & 127) == 3)) && !(((encodedInstr & 127) == 103)) && !(((encodedInstr & 127) == 35)) && ((encodedInstr & 127) == 99) && !((((encodedInstr>>12) & 7) == 0)) && !((((encodedInstr>>12) & 7) == 1)) && !((((encodedInstr>>12) & 7) == 4)) && (((encodedInstr>>12) & 7) == 5))  return INSTR_BGE; 
	else if (!(((encodedInstr & 127) == 51)) && !(((encodedInstr & 127) == 19)) && !(((encodedInstr & 127) == 3)) && !(((encodedInstr & 127) == 103)) && !(((encodedInstr & 127) == 35)) && ((encodedInstr & 127) == 99) && !((((encodedInstr>>12) & 7) == 0)) && !((((encodedInstr>>12) & 7) == 1)) && !((((encodedInstr>>12) & 7) == 4)) && !((((encodedInstr>>12) & 7) == 5)) && (((encodedInstr>>12) & 7) == 6))  return INSTR_BLTU; 
	else if (!(((encodedInstr & 127) == 51)) && !(((encodedInstr & 127) == 19)) && !(((encodedInstr & 127) == 3)) && !(((encodedInstr & 127) == 103)) && !(((encodedInstr & 127) == 35)) && ((encodedInstr & 127) == 99) && !((((encodedInstr>>12) & 7) == 0)) && !((((encodedInstr>>12) & 7) == 1)) && !((((encodedInstr>>12) & 7) == 4)) && !((((encodedInstr>>12) & 7) == 5)) && !((((encodedInstr>>12) & 7) == 6)) && (((encodedInstr>>12) & 7) == 7))  return INSTR_BGEU; 
	else if (!(((encodedInstr & 127) == 51)) && !(((encodedInstr & 127) == 19)) && !(((encodedInstr & 127) == 3)) && !(((encodedInstr & 127) == 103)) && !(((encodedInstr & 127) == 35)) && ((encodedInstr & 127) == 99) && !((((encodedInstr>>12) & 7) == 0)) && !((((encodedInstr>>12) & 7) == 1)) && !((((encodedInstr>>12) & 7) == 4)) && !((((encodedInstr>>12) & 7) == 5)) && !((((encodedInstr>>12) & 7) == 6)) && !((((encodedInstr>>12) & 7) == 7)))  return INSTR_UNKNOWN; 
	else if (!(((encodedInstr & 127) == 51)) && !(((encodedInstr & 127) == 19)) && !(((encodedInstr & 127) == 3)) && !(((encodedInstr & 127) == 103)) && !(((encodedInstr & 127) == 35)) && !(((encodedInstr & 127) == 99)) && ((encodedInstr & 127) == 55))  return INSTR_LUI; 
	else if (!(((encodedInstr & 127) == 51)) && !(((encodedInstr & 127) == 19)) && !(((encodedInstr & 127) == 3)) && !(((encodedInstr & 127) == 103)) && !(((encodedInstr & 127) == 35)) && !(((encodedInstr & 127) == 99)) && !(((encodedInstr & 127) == 55)) && ((encodedInstr & 127) == 23))  return INSTR_AUIPC; 
	else if (!(((encodedInstr & 127) == 51)) && !(((encodedInstr & 127) == 19)) && !(((encodedInstr & 127) == 3)) && !(((encodedInstr & 127) == 103)) && !(((encodedInstr & 127) == 35)) && !(((encodedInstr & 127) == 99)) && !(((encodedInstr & 127) == 55)) && !(((encodedInstr & 127) == 23)) && ((encodedInstr & 127) == 111))  return INSTR_JAL; 
	else if (!(((encodedInstr & 127) == 51)) && !(((encodedInstr & 127) == 19)) && !(((encodedInstr & 127) == 3)) && !(((encodedInstr & 127) == 103)) && !(((encodedInstr & 127) == 35)) && !(((encodedInstr & 127) == 99)) && !(((encodedInstr & 127) == 55)) && !(((encodedInstr & 127) == 23)) && !(((encodedInstr & 127) == 111)))  return INSTR_UNKNOWN; 
endfunction

function ME_MaskType getMemoryMask (InstrType instr);
	if (((instr == INSTR_LB) || (instr == INSTR_SB))) return mt_b; 
	else if (!(((instr == INSTR_LB) || (instr == INSTR_SB))) && ((instr == INSTR_LH) || (instr == INSTR_SH)))  return mt_h; 
	else if (!(((instr == INSTR_LB) || (instr == INSTR_SB))) && !(((instr == INSTR_LH) || (instr == INSTR_SH))) && ((instr == INSTR_LW) || (instr == INSTR_SW)))  return mt_w; 
	else if (!(((instr == INSTR_LB) || (instr == INSTR_SB))) && !(((instr == INSTR_LH) || (instr == INSTR_SH))) && !(((instr == INSTR_LW) || (instr == INSTR_SW))) && (instr == INSTR_LBU))  return mt_bu; 
	else if (!(((instr == INSTR_LB) || (instr == INSTR_SB))) && !(((instr == INSTR_LH) || (instr == INSTR_SH))) && !(((instr == INSTR_LW) || (instr == INSTR_SW))) && !((instr == INSTR_LBU)) && (instr == INSTR_LHU))  return mt_hu; 
	else if (!(((instr == INSTR_LB) || (instr == INSTR_SB))) && !(((instr == INSTR_LH) || (instr == INSTR_SH))) && !(((instr == INSTR_LW) || (instr == INSTR_SW))) && !((instr == INSTR_LBU)) && !((instr == INSTR_LHU)))  return mt_x; 
endfunction


