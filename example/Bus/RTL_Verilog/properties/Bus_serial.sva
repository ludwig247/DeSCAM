`define next_shift_amount 37 //IN CASE OF REQUIRED SIGNALS VALUES IN THE FUTURE, SHIFT YOUR ENTIRE TIMING BY THIS FACTOR

`include "tidal.sv"
`include "ipc_serial.sva"

import scam_model_types::*;


module Bus_verification(input logic reset);
  localparam NEXT_SHIFT_AMOUNT = `next_shift_amount;
  
  //DESIGNER SHOULD PAY ATTENTION FOR USING THE MODEL CORRECT NAME TO REFER TO THE CLK SIGNAL USED IN IT
  default clocking default_clk @(posedge Bus.ck); endclocking
  
  // SYNC AND NOTIFY SIGNALS (1-cycle macros) //
  function master_in_notify;
	  master_in_notify = $past(Bus.master_in_notify, NEXT_SHIFT_AMOUNT);
  endfunction
  function master_in_sync;
    master_in_sync = $past(Bus.master_in_sync, NEXT_SHIFT_AMOUNT);
  endfunction
  function master_out_notify;
  	master_out_notify = $past(Bus.master_out_notify, NEXT_SHIFT_AMOUNT);
  endfunction
  function master_out_sync;
  	master_out_sync = $past(Bus.master_out_sync, NEXT_SHIFT_AMOUNT);
  endfunction
  function slave_in0_notify;
  	slave_in0_notify = $past(Bus.slave_in0_notify, NEXT_SHIFT_AMOUNT);
  endfunction
  function slave_in0_sync;
  	slave_in0_sync = $past(Bus.slave_in0_sync, NEXT_SHIFT_AMOUNT);
  endfunction
  function slave_in1_notify;
  	slave_in1_notify = $past(Bus.slave_in1_notify, NEXT_SHIFT_AMOUNT);
  endfunction
  function slave_in1_sync;
  	slave_in1_sync = $past(Bus.slave_in1_sync, NEXT_SHIFT_AMOUNT);
  endfunction
  function slave_in2_notify;
  	slave_in2_notify = $past(Bus.slave_in2_notify, NEXT_SHIFT_AMOUNT);
  endfunction
  function slave_in2_sync;
  	slave_in2_sync = $past(Bus.slave_in2_sync, NEXT_SHIFT_AMOUNT);
  endfunction
  function slave_in3_notify;
  	slave_in3_notify = $past(Bus.slave_in3_notify , NEXT_SHIFT_AMOUNT);
  endfunction
  function slave_in3_sync;
  	slave_in3_sync = $past(Bus.slave_in3_sync , NEXT_SHIFT_AMOUNT);
  endfunction
  function slave_out0_notify;
  	slave_out0_notify = $past(Bus.slave_out0_notify, NEXT_SHIFT_AMOUNT);
  endfunction
  function slave_out0_sync;
  	slave_out0_sync = $past(Bus.slave_out0_sync , NEXT_SHIFT_AMOUNT);
  endfunction
  function slave_out1_notify;
  	slave_out1_notify = $past(Bus.slave_out1_notify , NEXT_SHIFT_AMOUNT);
  endfunction
  function slave_out1_sync;
  	slave_out1_sync = $past(Bus.slave_out1_sync , NEXT_SHIFT_AMOUNT);
  endfunction
  function slave_out2_notify;
  	slave_out2_notify = $past(Bus.slave_out2_notify , NEXT_SHIFT_AMOUNT);
  endfunction
  function slave_out2_sync;
  	slave_out2_sync = $past(Bus.slave_out2_sync , NEXT_SHIFT_AMOUNT);
  endfunction
  function slave_out3_notify;
  	slave_out3_notify = $past(Bus.slave_out3_notify , NEXT_SHIFT_AMOUNT);
  endfunction
  function slave_out3_sync;
  	slave_out3_sync = $past(Bus.slave_out3_sync , NEXT_SHIFT_AMOUNT);
  endfunction
  
  // Data: bit 0-32, bit 0 sent last
  function int getData(logic data);
    getData = 0;
    for (int i = 0; i < NUM_DATA_BITS; i++) begin
      getData[i] = $past(data, DATA_OFFSET + i);
    end
  endfunction
  
  function int getRespData(logic data);
    getRespData = 0;
    for (int i = 0; i < NUM_DATA_BITS; i++) begin
      getRespData[31-i] = $past(data, NEXT_SHIFT_AMOUNT - NUM_ACK_BITS - i);
    end
  endfunction

  function int getAddress(logic address);
    //getAddress = address;
    getAddress = 0;
    for (int i = 0; i < NUM_ADDRESS_BITS; i++) begin
      getAddress[i] = $past(address, ADDRESS_OFFSET + i);
    end
  endfunction
  
  // DP SIGNALS //
  function int master_in_sig_addr;
    master_in_sig_addr = getAddress(Bus.master_in);
  endfunction
  function int master_in_sig_data;
    master_in_sig_data = getData(Bus.master_in);
  endfunction
  function trans_t master_in_sig_trans_type;
  	master_in_sig_trans_type = $past(Bus.master_in, TRANS_TYPE_OFFSET);
  endfunction
  function ack_t master_out_sig_ack;
  	master_out_sig_ack = $past(Bus.master_out, NEXT_SHIFT_AMOUNT);
  endfunction
  function int master_out_sig_data;
    master_out_sig_data = getRespData(Bus.master_out);
  endfunction
  function ack_t slave_in0_sig_ack;
  	slave_in0_sig_ack = $past(Bus.slave_in0, NEXT_SHIFT_AMOUNT);
  endfunction
  function int slave_in0_sig_data;
    slave_in0_sig_data = getRespData(Bus.slave_in0);
  endfunction
  function ack_t slave_in1_sig_ack;
  	slave_in1_sig_ack = $past(Bus.slave_in1, NEXT_SHIFT_AMOUNT);
  endfunction
  function int slave_in1_sig_data;
    slave_in1_sig_data = getRespData(Bus.slave_in1);
  endfunction
  function ack_t slave_in2_sig_ack;
  	slave_in2_sig_ack = $past(Bus.slave_in2, NEXT_SHIFT_AMOUNT);
  endfunction
  function int slave_in2_sig_data;
    slave_in2_sig_data = getRespData(Bus.slave_in2);
  endfunction
  function ack_t slave_in3_sig_ack;
  	slave_in3_sig_ack = $past(Bus.slave_in3, NEXT_SHIFT_AMOUNT);
  endfunction
  function int slave_in3_sig_data;
    slave_in3_sig_data = getRespData(Bus.slave_in3);
  endfunction
  function int slave_out0_sig_addr;
    slave_out0_sig_addr = getAddress(Bus.slave_out0);
  endfunction
  function int slave_out0_sig_data;
    slave_out0_sig_data = getData(Bus.slave_out0);
  endfunction
  function trans_t slave_out0_sig_trans_type;
  	slave_out0_sig_trans_type = $past(Bus.slave_out0, TRANS_TYPE_OFFSET);
  endfunction
  function int slave_out1_sig_addr;
    slave_out1_sig_addr = getAddress(Bus.slave_out1);
  endfunction
  function int slave_out1_sig_data;
    slave_out1_sig_data = getData(Bus.slave_out1);
  endfunction
  function trans_t slave_out1_sig_trans_type;
  	slave_out1_sig_trans_type = $past(Bus.slave_out1, TRANS_TYPE_OFFSET);
  endfunction
  function int slave_out2_sig_addr;
    slave_out2_sig_addr = getAddress(Bus.slave_out2);
  endfunction
  function int slave_out2_sig_data;
    slave_out2_sig_data = getData(Bus.slave_out2);
  endfunction
  function trans_t slave_out2_sig_trans_type;
  	slave_out2_sig_trans_type = $past(Bus.slave_out2, TRANS_TYPE_OFFSET);
  endfunction
  function int slave_out3_sig_addr;
    slave_out3_sig_addr = getAddress(Bus.slave_out3);
  endfunction
  function int slave_out3_sig_data;
    slave_out3_sig_data = getData(Bus.slave_out3);
  endfunction
  function trans_t slave_out3_sig_trans_type;
  	slave_out3_sig_trans_type = $past(Bus.slave_out3, TRANS_TYPE_OFFSET);
  endfunction
  
  // VISIBLE REGISTERS //
  function int req_addr;
  	req_addr = $past(Bus.req_signal.addr, NEXT_SHIFT_AMOUNT);
  endfunction
  function int req_data;
  	req_data = $past(Bus.req_signal.data, NEXT_SHIFT_AMOUNT);
  endfunction
  function trans_t req_trans_type;
  	req_trans_type = $past(Bus.req_signal.trans_type, NEXT_SHIFT_AMOUNT);
  endfunction
  function ack_t resp_ack;
  	resp_ack = $past(Bus.resp_signal.ack, NEXT_SHIFT_AMOUNT);
  endfunction
  function int resp_data;
  	resp_data = $past(Bus.resp_signal.data, NEXT_SHIFT_AMOUNT);
  endfunction
  
  // STATES //
  function run_0;
  	run_0 = master_in_notify()
            && !master_out_notify()
            && !slave_in0_notify()
            && !slave_in1_notify()
            && !slave_in2_notify()
            && !slave_in3_notify()
            && !slave_out0_notify()
            && !slave_out1_notify()
            && !slave_out2_notify()
            && !slave_out3_notify();
  endfunction
  function run_1;
  	run_1 = slave_out0_notify()
            && !master_in_notify()
            && !master_out_notify()
            && !slave_in0_notify()
            && !slave_in1_notify()
            && !slave_in2_notify()
            && !slave_in3_notify()
            && !slave_out1_notify()
            && !slave_out2_notify()
            && !slave_out3_notify();
  endfunction
  function run_2;
  	run_2 = slave_in0_notify()
            && !master_in_notify()
            && !master_out_notify()
            && !slave_in1_notify()
            && !slave_in2_notify()
            && !slave_in3_notify()
            && !slave_out0_notify()
            && !slave_out1_notify()
            && !slave_out2_notify()
            && !slave_out3_notify();
  endfunction
  function run_3;
  	run_3 = master_out_notify()
            && !master_in_notify()
            && !slave_in0_notify()
            && !slave_in1_notify()
            && !slave_in2_notify()
            && !slave_in3_notify()
            && !slave_out0_notify()
            && !slave_out1_notify()
            && !slave_out2_notify()
            && !slave_out3_notify();
  endfunction
  function run_4;
  	run_4 = slave_out1_notify()
            && !master_in_notify()
            && !master_out_notify()
            && !slave_in0_notify()
            && !slave_in1_notify()
            && !slave_in2_notify()
            && !slave_in3_notify()
            && !slave_out0_notify()
            && !slave_out2_notify()
            && !slave_out3_notify();
  endfunction
  function run_5;
  	run_5 = slave_in1_notify()
            && !master_in_notify()
            && !master_out_notify()
            && !slave_in0_notify()
            && !slave_in2_notify()
            && !slave_in3_notify()
            && !slave_out0_notify()
            && !slave_out1_notify()
            && !slave_out2_notify()
            && !slave_out3_notify();
  endfunction
  function run_6;
  	run_6 = slave_out2_notify()
            && !master_in_notify()
            && !master_out_notify()
            && !slave_in0_notify()
            && !slave_in1_notify()
            && !slave_in2_notify()
            && !slave_in3_notify()
            && !slave_out0_notify()
            && !slave_out1_notify()
            && !slave_out3_notify();
  endfunction
  function run_7;
  	run_7 = slave_in2_notify()
            && !master_in_notify()
            && !master_out_notify()
            && !slave_in0_notify()
            && !slave_in1_notify()
            && !slave_in3_notify()
            && !slave_out0_notify()
            && !slave_out1_notify()
            && !slave_out2_notify()
            && !slave_out3_notify();
  endfunction
  function run_8;
  	run_8 = slave_out3_notify()
            && !master_in_notify()
            && !master_out_notify()
            && !slave_in0_notify()
            && !slave_in1_notify()
            && !slave_in2_notify()
            && !slave_in3_notify()
            && !slave_out0_notify()
            && !slave_out1_notify()
            && !slave_out2_notify();
  endfunction
  function run_9;
  	run_9 = slave_in3_notify()
            && !master_in_notify()
            && !master_out_notify()
            && !slave_in0_notify()
            && !slave_in1_notify()
            && !slave_in2_notify()
            && !slave_out0_notify()
            && !slave_out1_notify()
            && !slave_out2_notify()
            && !slave_out3_notify();
  endfunction
  

  `begin_tda(gfv_functions)
	// Functions used in determination requirements in Bus_serial.gfv
  function slave_out0_ready;
    return Bus.slave_out0_notify & Bus.slave_out0_sync;
  endfunction
  function slave_out1_ready;
    return Bus.slave_out1_notify & Bus.slave_out1_sync;
  endfunction
  function slave_out2_ready;
    return Bus.slave_out2_notify & Bus.slave_out2_sync;
  endfunction
  function slave_out3_ready;
    return Bus.slave_out3_notify & Bus.slave_out3_sync;
  endfunction
  function master_out_ready;
    return Bus.master_out_notify & Bus.master_out_sync;
  endfunction
  `end_tda
  
  ////////////////////////////////////
  //////////// Operations ////////////
  ////////////////////////////////////
  sequence reset_sequence;
  //DISGNER REFER TO MODEL RESET SIGNAL HERE
    Bus.rst;
  endsequence
  `begin_tda(ops)
  property reset_p;
  	reset_sequence |=>
  	t_virtual ##0 run_0() and
  	t_virtual ##0 req_addr() == 0 and
  	t_virtual ##0 req_data() == 0 and
  	t_virtual ##0 req_trans_type() == single_read and
  	t_virtual ##0 resp_ack() == err and
  	t_virtual ##0 resp_data() == 0 and
  	t_virtual ##0 master_in_notify() == 1 and
  	t_virtual ##0 master_out_notify() == 0 and
  	t_virtual ##0 slave_in0_notify() == 0 and
  	t_virtual ##0 slave_in1_notify() == 0 and
  	t_virtual ##0 slave_in2_notify() == 0 and
  	t_virtual ##0 slave_in3_notify() == 0 and
  	t_virtual ##0 slave_out0_notify() == 0 and
  	t_virtual ##0 slave_out1_notify() == 0 and
  	t_virtual ##0 slave_out2_notify() == 0 and
  	t_virtual ##0 slave_out3_notify() == 0 and
    t ##0 right_hook;
  endproperty
  reset_a: assert property (reset_p);
  
  property run_0_read_0_p(o);
  ack_t resp_ack_0;
  int resp_data_0;
  int master_in_sig_addr_0;
  int master_in_sig_data_0;
  trans_t master_in_sig_trans_type_0;
  // set_freeze
  	t_virtual ##0 set_freeze(resp_ack_0, resp_ack()) and
  	t_virtual ##0 set_freeze(resp_data_0, resp_data()) and
  	t_virtual ##0 set_freeze(master_in_sig_addr_0, master_in_sig_addr()) and
  	t_virtual ##0 set_freeze(master_in_sig_data_0, master_in_sig_data()) and
  	t_virtual ##0 set_freeze(master_in_sig_trans_type_0, master_in_sig_trans_type()) and
  // Conceptual State
  	t_virtual ##0 run_0() and
  // trigger
  	t_virtual ##0 !((single_read == master_in_sig_trans_type())) and
  	t_virtual ##0 (master_in_sig_addr() >= 0) and
  	t_virtual ##0 (master_in_sig_addr() <= 7) and
  	t_virtual ##0 master_in_sync() //and
  implies
  	t_end_38 ##0 run_1() and
  	t_end_38 ##0 req_addr() == master_in_sig_addr_0 and
  	t_end_38 ##0 req_data() == master_in_sig_data_0 and
  	t_end_38 ##0 req_trans_type() == master_in_sig_trans_type_0 and
  	t_end_38 ##0 resp_ack() == resp_ack_0 and
  	t_end_38 ##0 resp_data() == resp_data_0 and
  	//t_end_38 ##0 slave_out0_sig_addr() == master_in_sig_addr_0 and
  	//t_end_38 ##0 slave_out0_sig_data() == master_in_sig_data_0 and
  	//t_end_38 ##0 slave_out0_sig_trans_type() == master_in_sig_trans_type_0 and
  	during (nxt(t_virtual,1), t_end_38, master_in_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, master_out_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_in0_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_in1_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_in2_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_in3_notify() == 0) and
  	during_o (t_virtual, 1, t_end_38 , -1, slave_out0_notify() == 0) and
  	t_end_38 ##0 slave_out0_notify() == 1 and
  	during (nxt(t_virtual,1), t_end_38, slave_out1_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_out2_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_out3_notify() == 0) and 
    nxt(t_virtual, 1) ##0 right_hook;
  endproperty;
  run_0_read_0_a: assert property (disable iff (reset) run_0_read_0_p(1/* + NEXT_SHIFT_AMOUNT*/));// ASSIGN t_end offset here
  
  property run_0_read_1_p(o);
  ack_t resp_ack_0;
  int resp_data_0;
  int master_in_sig_addr_0;
  trans_t master_in_sig_trans_type_0;
  // set_freeze
  	t_virtual ##0 set_freeze(resp_ack_0, resp_ack()) and
  	t_virtual ##0 set_freeze(resp_data_0, resp_data()) and
  	t_virtual ##0 set_freeze(master_in_sig_addr_0, master_in_sig_addr()) and
  	t_virtual ##0 set_freeze(master_in_sig_trans_type_0, master_in_sig_trans_type()) and
  // Conceptual State
  	t_virtual ##0 run_0() and
  // trigger
  	t_virtual ##0 (single_read == master_in_sig_trans_type()) and
  	t_virtual ##0 (master_in_sig_addr() >= 0) and
  	t_virtual ##0 (master_in_sig_addr() <= 7) and
  	t_virtual ##0 master_in_sync()
  implies
  	t_end_38 ##0 run_1() and
  	t_end_38 ##0 req_addr() == master_in_sig_addr_0 and
  	t_end_38 ##0 req_data() == 0 and
  	t_end_38 ##0 req_trans_type() == master_in_sig_trans_type_0 and
  	t_end_38 ##0 resp_ack() == resp_ack_0 and
  	t_end_38 ##0 resp_data() == resp_data_0 and
  	//t_end_38 ##0 slave_out0_sig_addr() == master_in_sig_addr_0 and
  	//t_end_38 ##0 slave_out0_sig_data() == 0 and
  	//t_end_38 ##0 slave_out0_sig_trans_type() == master_in_sig_trans_type_0 and
  	during (nxt(t_virtual,1), t_end_38, master_in_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, master_out_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_in0_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_in1_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_in2_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_in3_notify() == 0) and
  	during_o (t_virtual, 1, t_end_38 , -1, slave_out0_notify() == 0) and
  	t_end_38 ##0 slave_out0_notify() == 1 and
  	during (nxt(t_virtual,1), t_end_38, slave_out1_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_out2_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_out3_notify() == 0) and
    nxt(t_virtual, 1) ##0 right_hook;
  endproperty;
  run_0_read_1_a: assert property (disable iff (reset) run_0_read_1_p(1 + NEXT_SHIFT_AMOUNT));// ASSIGN t_end offset here
  
  /*property run_0_read_2_p(o);
  int master_in_sig_addr_0;
  trans_t master_in_sig_trans_type_0;
  // set_freeze
  	t_virtual ##0 set_freeze(master_in_sig_addr_0, master_in_sig_addr()) and
  	t_virtual ##0 set_freeze(master_in_sig_trans_type_0, master_in_sig_trans_type()) and
  // Conceptual State
  	t_virtual ##0 run_0() and
  // trigger
  	t_virtual ##0 (single_read == master_in_sig_trans_type()) and
  	t_virtual ##0 !(((master_in_sig_addr() >= 0) && !((8 <= master_in_sig_addr())))) and
  	t_virtual ##0 !(((master_in_sig_addr() >= 8) && !((16 <= master_in_sig_addr())))) and
  	t_virtual ##0 !(((master_in_sig_addr() >= 16) && !((24 <= master_in_sig_addr())))) and
  	t_virtual ##0 !(((master_in_sig_addr() >= 24) && !((32 <= master_in_sig_addr())))) and
  	t_virtual ##0 master_in_sync()
  implies
  	t_end_38 ##0 run_3() and
  	t_end_38 ##0 master_out_sig_ack() == ok and
  	t_end_38 ##0 master_out_sig_data() == 0 and
  	t_end_38 ##0 req_addr() == master_in_sig_addr_0 and
  	t_end_38 ##0 req_data() == 0 and
  	t_end_38 ##0 req_trans_type() == master_in_sig_trans_type_0 and
  	t_end_38 ##0 resp_ack() == ok and
  	t_end_38 ##0 resp_data() == 0 and
  	during (nxt(t_virtual,1), t_end_38, master_in_notify() == 0) and
  	during_o (t_virtual, 1, t_end_38 , -1, master_out_notify() == 0) and
  	t_end_38 ##0 master_out_notify() == 1 and
  	during (nxt(t_virtual,1), t_end_38, slave_in0_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_in1_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_in2_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_in3_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_out0_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_out1_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_out2_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_out3_notify() == 0) and
    nxt(t, 1) ##0 right_hook;
  endproperty;
  run_0_read_2_a: assert property (disable iff (reset) run_0_read_2_p(1 + NEXT_SHIFT_AMOUNT));// ASSIGN t_end offset here
  
  property run_0_read_3_p(o);
  int master_in_sig_addr_0;
  int master_in_sig_data_0;
  trans_t master_in_sig_trans_type_0;
  // set_freeze
  	t_virtual ##0 set_freeze(master_in_sig_addr_0, master_in_sig_addr()) and
  	t_virtual ##0 set_freeze(master_in_sig_data_0, master_in_sig_data()) and
  	t_virtual ##0 set_freeze(master_in_sig_trans_type_0, master_in_sig_trans_type()) and
  // Conceptual State
  	t_virtual ##0 run_0() and
  // trigger
  	t_virtual ##0 !(((master_in_sig_addr() >= 0) && !((8 <= master_in_sig_addr())))) and
  	t_virtual ##0 !(((master_in_sig_addr() >= 8) && !((16 <= master_in_sig_addr())))) and
  	t_virtual ##0 !(((master_in_sig_addr() >= 16) && !((24 <= master_in_sig_addr())))) and
  	t_virtual ##0 !(((master_in_sig_addr() >= 24) && !((32 <= master_in_sig_addr())))) and
  	t_virtual ##0 (single_write == master_in_sig_trans_type()) and
  	t_virtual ##0 master_in_sync()
  implies
  	t_end_38 ##0 run_3() and
  	t_end_38 ##0 master_out_sig_ack() == ok and
  	t_end_38 ##0 master_out_sig_data() == 0 and
  	t_end_38 ##0 req_addr() == master_in_sig_addr_0 and
  	t_end_38 ##0 req_data() == master_in_sig_data_0 and
  	t_end_38 ##0 req_trans_type() == master_in_sig_trans_type_0 and
  	t_end_38 ##0 resp_ack() == ok and
  	t_end_38 ##0 resp_data() == 0 and
  	during (nxt(t_virtual,1), t_end_38, master_in_notify() == 0) and
  	during_o (t_virtual, 1, t_end_38 , -1, master_out_notify() == 0) and
  	t_end_38 ##0 master_out_notify() == 1 and
  	during (nxt(t_virtual,1), t_end_38, slave_in0_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_in1_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_in2_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_in3_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_out0_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_out1_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_out2_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_out3_notify() == 0) and
    nxt(t, 1) ##0 right_hook;
  endproperty;
  run_0_read_3_a: assert property (disable iff (reset) run_0_read_3_p(1 + NEXT_SHIFT_AMOUNT));// ASSIGN t_end offset here
 */ 
  property run_0_read_4_p(o);
  ack_t resp_ack_0;
  int resp_data_0;
  int master_in_sig_addr_0;
  int master_in_sig_data_0;
  trans_t master_in_sig_trans_type_0;
  // set_freeze
  	t_virtual ##0 set_freeze(resp_ack_0, resp_ack()) and
  	t_virtual ##0 set_freeze(resp_data_0, resp_data()) and
  	t_virtual ##0 set_freeze(master_in_sig_addr_0, master_in_sig_addr()) and
  	t_virtual ##0 set_freeze(master_in_sig_data_0, master_in_sig_data()) and
  	t_virtual ##0 set_freeze(master_in_sig_trans_type_0, master_in_sig_trans_type()) and
  // Conceptual State
  	t_virtual ##0 run_0() and
  // trigger
  	t_virtual ##0 !((single_read == master_in_sig_trans_type())) and
  	t_virtual ##0 (master_in_sig_addr() >= 8) and
  	t_virtual ##0 (master_in_sig_addr() <= 15) and
  	t_virtual ##0 master_in_sync()
  implies
  	t_end_38 ##0 run_4() and
  	t_end_38 ##0 req_addr() == (-8 + master_in_sig_addr_0) and
  	t_end_38 ##0 req_data() == master_in_sig_data_0 and
  	t_end_38 ##0 req_trans_type() == master_in_sig_trans_type_0 and
  	t_end_38 ##0 resp_ack() == resp_ack_0 and
  	t_end_38 ##0 resp_data() == resp_data_0 and
  	//t_end_38 ##0 slave_out1_sig_addr() == (-8 + master_in_sig_addr_0) and
  	//t_end_38 ##0 slave_out1_sig_data() == master_in_sig_data_0 and
  	//t_end_38 ##0 slave_out1_sig_trans_type() == master_in_sig_trans_type_0 and
  	during (nxt(t_virtual,1), t_end_38, master_in_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, master_out_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_in0_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_in1_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_in2_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_in3_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_out0_notify() == 0) and
  	during_o (t_virtual, 1, t_end_38 , -1, slave_out1_notify() == 0) and
  	t_end_38 ##0 slave_out1_notify() == 1 and
  	during (nxt(t_virtual,1), t_end_38, slave_out2_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_out3_notify() == 0) and
    nxt(t_virtual, 1) ##0 right_hook;
  endproperty;
  run_0_read_4_a: assert property (disable iff (reset) run_0_read_4_p(1 + NEXT_SHIFT_AMOUNT));// ASSIGN t_end offset here
  
  property run_0_read_5_p(o);
  ack_t resp_ack_0;
  int resp_data_0;
  int master_in_sig_addr_0;
  trans_t master_in_sig_trans_type_0;
  // set_freeze
  	t_virtual ##0 set_freeze(resp_ack_0, resp_ack()) and
  	t_virtual ##0 set_freeze(resp_data_0, resp_data()) and
  	t_virtual ##0 set_freeze(master_in_sig_addr_0, master_in_sig_addr()) and
  	t_virtual ##0 set_freeze(master_in_sig_trans_type_0, master_in_sig_trans_type()) and
  // Conceptual State
  	t_virtual ##0 run_0() and
  // trigger
  	t_virtual ##0 (single_read == master_in_sig_trans_type()) and
  	t_virtual ##0 (master_in_sig_addr() >= 8) and
  	t_virtual ##0 (master_in_sig_addr() <= 15) and
  	t_virtual ##0 master_in_sync()
  implies
  	t_end_38 ##0 run_4() and
  	t_end_38 ##0 req_addr() == (-8 + master_in_sig_addr_0) and
  	t_end_38 ##0 req_data() == 0 and
  	t_end_38 ##0 req_trans_type() == master_in_sig_trans_type_0 and
  	t_end_38 ##0 resp_ack() == resp_ack_0 and
  	t_end_38 ##0 resp_data() == resp_data_0 and
  	//t_end_38 ##0 slave_out1_sig_addr() == (-8 + master_in_sig_addr_0) and
  	//t_end_38 ##0 slave_out1_sig_data() == 0 and
  	//t_end_38 ##0 slave_out1_sig_trans_type() == master_in_sig_trans_type_0 and
  	during (nxt(t_virtual,1), t_end_38, master_in_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, master_out_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_in0_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_in1_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_in2_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_in3_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_out0_notify() == 0) and
  	during_o (t_virtual, 1, t_end_38 , -1, slave_out1_notify() == 0) and
  	t_end_38 ##0 slave_out1_notify() == 1 and
  	during (nxt(t_virtual,1), t_end_38, slave_out2_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_out3_notify() == 0) and
    nxt(t_virtual, 1) ##0 right_hook;
  endproperty;
  run_0_read_5_a: assert property (disable iff (reset) run_0_read_5_p(1 + NEXT_SHIFT_AMOUNT));// ASSIGN t_end offset here
  
  property run_0_read_6_p(o);
  ack_t resp_ack_0;
  int resp_data_0;
  int master_in_sig_addr_0;
  int master_in_sig_data_0;
  trans_t master_in_sig_trans_type_0;
  // set_freeze
  	t_virtual ##0 set_freeze(resp_ack_0, resp_ack()) and
  	t_virtual ##0 set_freeze(resp_data_0, resp_data()) and
  	t_virtual ##0 set_freeze(master_in_sig_addr_0, master_in_sig_addr()) and
  	t_virtual ##0 set_freeze(master_in_sig_data_0, master_in_sig_data()) and
  	t_virtual ##0 set_freeze(master_in_sig_trans_type_0, master_in_sig_trans_type()) and
  // Conceptual State
  	t_virtual ##0 run_0() and
  // trigger
  	t_virtual ##0 !((single_read == master_in_sig_trans_type())) and
  	t_virtual ##0 (master_in_sig_addr() >= 16) and
  	t_virtual ##0 (master_in_sig_addr() <= 23) and
  	t_virtual ##0 master_in_sync()
  implies
  	t_end_38 ##0 run_6() and
  	t_end_38 ##0 req_addr() == (-16 + master_in_sig_addr_0) and
  	t_end_38 ##0 req_data() == master_in_sig_data_0 and
  	t_end_38 ##0 req_trans_type() == master_in_sig_trans_type_0 and
  	t_end_38 ##0 resp_ack() == resp_ack_0 and
  	t_end_38 ##0 resp_data() == resp_data_0 and
  	//t_end_38 ##0 slave_out2_sig_addr() == (-16 + master_in_sig_addr_0) and
  	//t_end_38 ##0 slave_out2_sig_data() == master_in_sig_data_0 and
  	//t_end_38 ##0 slave_out2_sig_trans_type() == master_in_sig_trans_type_0 and
  	during (nxt(t_virtual,1), t_end_38, master_in_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, master_out_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_in0_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_in1_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_in2_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_in3_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_out0_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_out1_notify() == 0) and
  	during_o (t_virtual, 1, t_end_38 , -1, slave_out2_notify() == 0) and
  	t_end_38 ##0 slave_out2_notify() == 1 and
  	during (nxt(t_virtual,1), t_end_38, slave_out3_notify() == 0) and
    nxt(t_virtual, 1) ##0 right_hook;
  endproperty;
  run_0_read_6_a: assert property (disable iff (reset) run_0_read_6_p(1 + NEXT_SHIFT_AMOUNT));// ASSIGN t_end offset here
  
  property run_0_read_7_p(o);
  ack_t resp_ack_0;
  int resp_data_0;
  int master_in_sig_addr_0;
  trans_t master_in_sig_trans_type_0;
  // set_freeze
  	t_virtual ##0 set_freeze(resp_ack_0, resp_ack()) and
  	t_virtual ##0 set_freeze(resp_data_0, resp_data()) and
  	t_virtual ##0 set_freeze(master_in_sig_addr_0, master_in_sig_addr()) and
  	t_virtual ##0 set_freeze(master_in_sig_trans_type_0, master_in_sig_trans_type()) and
  // Conceptual State
  	t_virtual ##0 run_0() and
  // trigger
  	t_virtual ##0 (single_read == master_in_sig_trans_type()) and
  	t_virtual ##0 (master_in_sig_addr() >= 16) and
  	t_virtual ##0 (master_in_sig_addr() <= 23) and
  	t_virtual ##0 master_in_sync()
  implies
  	t_end_38 ##0 run_6() and
  	t_end_38 ##0 req_addr() == (-16 + master_in_sig_addr_0) and
  	t_end_38 ##0 req_data() == 0 and
  	t_end_38 ##0 req_trans_type() == master_in_sig_trans_type_0 and
  	t_end_38 ##0 resp_ack() == resp_ack_0 and
  	t_end_38 ##0 resp_data() == resp_data_0 and
  	//t_end_38 ##0 slave_out2_sig_addr() == (-16 + master_in_sig_addr_0) and
  	//t_end_38 ##0 slave_out2_sig_data() == 0 and
  	//t_end_38 ##0 slave_out2_sig_trans_type() == master_in_sig_trans_type_0 and
  	during (nxt(t_virtual,1), t_end_38, master_in_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, master_out_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_in0_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_in1_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_in2_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_in3_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_out0_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_out1_notify() == 0) and
  	during_o (t_virtual, 1, t_end_38 , -1, slave_out2_notify() == 0) and
  	t_end_38 ##0 slave_out2_notify() == 1 and
  	during (nxt(t_virtual,1), t_end_38, slave_out3_notify() == 0) and
    nxt(t_virtual, 1) ##0 right_hook;
  endproperty;
  run_0_read_7_a: assert property (disable iff (reset) run_0_read_7_p(1 + NEXT_SHIFT_AMOUNT));// ASSIGN t_end offset here
  
  property run_0_read_8_p(o);
  ack_t resp_ack_0;
  int resp_data_0;
  int master_in_sig_addr_0;
  int master_in_sig_data_0;
  trans_t master_in_sig_trans_type_0;
  // set_freeze
  	t_virtual ##0 set_freeze(resp_ack_0, resp_ack()) and
  	t_virtual ##0 set_freeze(resp_data_0, resp_data()) and
  	t_virtual ##0 set_freeze(master_in_sig_addr_0, master_in_sig_addr()) and
  	t_virtual ##0 set_freeze(master_in_sig_data_0, master_in_sig_data()) and
  	t_virtual ##0 set_freeze(master_in_sig_trans_type_0, master_in_sig_trans_type()) and
  // Conceptual State
  	t_virtual ##0 run_0() and
  // trigger
  	t_virtual ##0 !((single_read == master_in_sig_trans_type())) and
  	t_virtual ##0 (master_in_sig_addr() >= 24) and
  	t_virtual ##0 (master_in_sig_addr() <= 31) and
  	t_virtual ##0 master_in_sync()
  implies
  	t_end_38 ##0 run_8() and
  	t_end_38 ##0 req_addr() == (-24 + master_in_sig_addr_0) and
  	t_end_38 ##0 req_data() == master_in_sig_data_0 and
  	t_end_38 ##0 req_trans_type() == master_in_sig_trans_type_0 and
  	t_end_38 ##0 resp_ack() == resp_ack_0 and
  	t_end_38 ##0 resp_data() == resp_data_0 and
  	//t_end_38 ##0 slave_out3_sig_addr() == (-24 + master_in_sig_addr_0) and
  	//t_end_38 ##0 slave_out3_sig_data() == master_in_sig_data_0 and
  	//t_end_38 ##0 slave_out3_sig_trans_type() == master_in_sig_trans_type_0 and
  	during (nxt(t_virtual,1), t_end_38, master_in_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, master_out_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_in0_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_in1_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_in2_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_in3_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_out0_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_out1_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_out2_notify() == 0) and
  	during_o (t_virtual, 1, t_end_38 , -1, slave_out3_notify() == 0) and
  	t_end_38 ##0 slave_out3_notify() == 1 and
    nxt(t_virtual, 1) ##0 right_hook;
  endproperty;
  run_0_read_8_a: assert property (disable iff (reset) run_0_read_8_p(1 + NEXT_SHIFT_AMOUNT));// ASSIGN t_end offset here
  
  property run_0_read_9_p(o);
  ack_t resp_ack_0;
  int resp_data_0;
  int master_in_sig_addr_0;
  trans_t master_in_sig_trans_type_0;
  // set_freeze
  	t_virtual ##0 set_freeze(resp_ack_0, resp_ack()) and
  	t_virtual ##0 set_freeze(resp_data_0, resp_data()) and
  	t_virtual ##0 set_freeze(master_in_sig_addr_0, master_in_sig_addr()) and
  	t_virtual ##0 set_freeze(master_in_sig_trans_type_0, master_in_sig_trans_type()) and
  // Conceptual State
  	t_virtual ##0 run_0() and
  // trigger
  	t_virtual ##0 (single_read == master_in_sig_trans_type()) and
  	t_virtual ##0 (master_in_sig_addr() >= 24) and
  	t_virtual ##0 (master_in_sig_addr() <= 31) and
  	t_virtual ##0 master_in_sync()
  implies
  	t_end_38 ##0 run_8() and
  	t_end_38 ##0 req_addr() == (-24 + master_in_sig_addr_0) and
  	t_end_38 ##0 req_data() == 0 and
  	t_end_38 ##0 req_trans_type() == master_in_sig_trans_type_0 and
  	t_end_38 ##0 resp_ack() == resp_ack_0 and
  	t_end_38 ##0 resp_data() == resp_data_0 and
  	//t_end_38 ##0 slave_out3_sig_addr() == (-24 + master_in_sig_addr_0) and
  	//t_end_38 ##0 slave_out3_sig_data() == 0 and
  	//t_end_38 ##0 slave_out3_sig_trans_type() == master_in_sig_trans_type_0 and
  	during (nxt(t_virtual,1), t_end_38, master_in_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, master_out_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_in0_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_in1_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_in2_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_in3_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_out0_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_out1_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_out2_notify() == 0) and
  	during_o (t_virtual, 1, t_end_38 , -1, slave_out3_notify() == 0) and
  	t_end_38 ##0 slave_out3_notify() == 1 and
    nxt(t_virtual, 1) ##0 right_hook;
  endproperty;
  run_0_read_9_a: assert property (disable iff (reset) run_0_read_9_p(1 + NEXT_SHIFT_AMOUNT));// ASSIGN t_end offset here
  
  property run_1_write_10_p(o);
  trans_t req_trans_type_0;
  ack_t resp_ack_0;
  int resp_data_0;
  int req_data_0;
  int req_addr_0;
  // set_freeze
  	t_virtual ##0 set_freeze(req_trans_type_0, req_trans_type()) and
  	t_virtual ##0 set_freeze(resp_ack_0, resp_ack()) and
  	t_virtual ##0 set_freeze(resp_data_0, resp_data()) and
  	t_virtual ##0 set_freeze(req_data_0, req_data()) and
  	t_virtual ##0 set_freeze(req_addr_0, req_addr()) and
  // Conceptual State
  	t_virtual ##0 run_1() and
  // trigger
  	t_virtual ##0 slave_out0_sync()
  implies
  	/**/t_virtual ##0 slave_out0_sig_addr() == req_addr_0 and
  	/**/t_virtual ##0 slave_out0_sig_data() == req_data_0 and
  	/**/t_virtual ##0 slave_out0_sig_trans_type() == req_trans_type_0 and
  	t_end_38 ##0 run_2() and
  	t_end_38 ##0 req_addr() == req_addr_0 and
  	t_end_38 ##0 req_data() == req_data_0 and
  	t_end_38 ##0 req_trans_type() == req_trans_type_0 and
  	t_end_38 ##0 resp_ack() == resp_ack_0 and
  	t_end_38 ##0 resp_data() == resp_data_0 and
  	during (nxt(t_virtual,1), t_end_38, master_in_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, master_out_notify() == 0) and
  	during_o (t_virtual, 1, t_end_38 , -1, slave_in0_notify() == 0) and
  	t_end_38 ##0 slave_in0_notify() == 1 and
  	during (nxt(t_virtual,1), t_end_38, slave_in1_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_in2_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_in3_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_out0_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_out1_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_out2_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_out3_notify() == 0) and
    nxt(t_virtual, 1) ##0 right_hook;
  endproperty;
  run_1_write_10_a: assert property (disable iff (reset) run_1_write_10_p(1 /*+ NEXT_SHIFT_AMOUNT*/));// ASSIGN t_end offset here
  
  property run_2_read_11_p(o);
  trans_t req_trans_type_0;
  int req_data_0;
  int req_addr_0;
  ack_t slave_in0_sig_ack_0;
  int slave_in0_sig_data_0;
  // set_freeze
  	t_virtual ##0 set_freeze(req_trans_type_0, req_trans_type()) and
  	t_virtual ##0 set_freeze(req_data_0, req_data()) and
  	t_virtual ##0 set_freeze(req_addr_0, req_addr()) and
  	t_virtual ##0 set_freeze(slave_in0_sig_ack_0, slave_in0_sig_ack()) and
  	t_virtual ##0 set_freeze(slave_in0_sig_data_0, slave_in0_sig_data()) and
  // Conceptual State
  	t_virtual ##0 run_2() and
  // trigger
  	t_virtual ##0 !((single_write == req_trans_type())) and
  	t_virtual ##0 slave_in0_sync()
  implies
  	t_end_33 ##0 run_3() and
  	//t_end_38 ##0 master_out_sig_ack() == slave_in0_sig_ack_0 and
  	//t_end_38 ##0 master_out_sig_data() == slave_in0_sig_data_0 and
  	t_end_33 ##0 req_addr() == req_addr_0 and
  	t_end_33 ##0 req_data() == req_data_0 and
  	t_end_33 ##0 req_trans_type() == req_trans_type_0 and
  	t_end_33 ##0 resp_ack() == slave_in0_sig_ack_0 and
  	t_end_33 ##0 resp_data() == slave_in0_sig_data_0 and
  	during (nxt(t_virtual,1), t_end_33, master_in_notify() == 0) and
  	during_o (t_virtual, 1, t_end_33 , -1, master_out_notify() == 0) and
  	t_end_33 ##0 master_out_notify() == 1 and
  	during (nxt(t_virtual,1), t_end_33, slave_in0_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_33, slave_in1_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_33, slave_in2_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_33, slave_in3_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_33, slave_out0_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_33, slave_out1_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_33, slave_out2_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_33, slave_out3_notify() == 0) and
    //nxt(t_virtual, 1) ##0 right_hook;
    nxt(t, 33) ##0 right_hook;
  endproperty;
  run_2_read_11_a: assert property (disable iff (reset) run_2_read_11_p(1 + NEXT_SHIFT_AMOUNT));// ASSIGN t_end offset here
  
  property run_2_read_12_p(o);
  trans_t req_trans_type_0;
  int req_data_0;
  int req_addr_0;
  ack_t slave_in0_sig_ack_0;
  // set_freeze
  	t_virtual ##0 set_freeze(req_trans_type_0, req_trans_type()) and
  	t_virtual ##0 set_freeze(req_data_0, req_data()) and
  	t_virtual ##0 set_freeze(req_addr_0, req_addr()) and
  	t_virtual ##0 set_freeze(slave_in0_sig_ack_0, slave_in0_sig_ack()) and
  // Conceptual State
  	t_virtual ##0 run_2() and
  // trigger
  	t_virtual ##0 (single_write == req_trans_type()) and
  	t_virtual ##0 slave_in0_sync()
  implies
  	t_end_33 ##0 run_3() and
  	//t_end_33 ##0 master_out_sig_ack() == slave_in0_sig_ack_0 and
  	//t_end_33 ##0 master_out_sig_data() == 0 and
  	t_end_33 ##0 req_addr() == req_addr_0 and
  	t_end_33 ##0 req_data() == req_data_0 and
  	t_end_33 ##0 req_trans_type() == req_trans_type_0 and
  	t_end_33 ##0 resp_ack() == slave_in0_sig_ack_0 and
  	t_end_33 ##0 resp_data() == 0 and
  	during (nxt(t_virtual,1), t_end_33, master_in_notify() == 0) and
  	during_o (t_virtual, 1, t_end_33 , -1, master_out_notify() == 0) and
  	t_end_33 ##0 master_out_notify() == 1 and
  	during (nxt(t_virtual,1), t_end_33, slave_in0_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_33, slave_in1_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_33, slave_in2_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_33, slave_in3_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_33, slave_out0_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_33, slave_out1_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_33, slave_out2_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_33, slave_out3_notify() == 0) and
    //nxt(t_virtual, 1) ##0 right_hook;
    nxt(t, 33) ##0 right_hook;
  endproperty;
  run_2_read_12_a: assert property (disable iff (reset) run_2_read_12_p(1+ NEXT_SHIFT_AMOUNT));// ASSIGN t_end offset here
  
  property run_3_write_13_p(o);
  trans_t req_trans_type_0;
  ack_t resp_ack_0;
  int resp_data_0;
  int req_data_0;
  int req_addr_0;
  // set_freeze
  	t_virtual ##0 set_freeze(req_trans_type_0, req_trans_type()) and
  	t_virtual ##0 set_freeze(resp_ack_0, resp_ack()) and
  	t_virtual ##0 set_freeze(resp_data_0, resp_data()) and
  	t_virtual ##0 set_freeze(req_data_0, req_data()) and
  	t_virtual ##0 set_freeze(req_addr_0, req_addr()) and
  // Conceptual State
  	t_virtual ##0 run_3() and
  // trigger
  	t_virtual ##0 master_out_sync()
  implies
  	t_virtual ##0 master_out_sig_ack() == resp_ack_0 and
  	t_virtual ##0 master_out_sig_data() == resp_data_0 and
  	t_end_33 ##0 run_0() and
  	t_end_33 ##0 req_addr() == req_addr_0 and
  	t_end_33 ##0 req_data() == req_data_0 and
  	t_end_33 ##0 req_trans_type() == req_trans_type_0 and
  	t_end_33 ##0 resp_ack() == resp_ack_0 and
  	t_end_33 ##0 resp_data() == resp_data_0 and
  	during_o (t_virtual, 1, t_end_33 , -1, master_in_notify() == 0) and
  	t_end_33 ##0 master_in_notify() == 1 and
  	during (nxt(t_virtual,1), t_end_33, master_out_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_33, slave_in0_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_33, slave_in1_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_33, slave_in2_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_33, slave_in3_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_33, slave_out0_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_33, slave_out1_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_33, slave_out2_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_33, slave_out3_notify() == 0) and
    //nxt(t_virtual, 1) ##0 right_hook;
    nxt(t, 33) ##0 right_hook;
  endproperty;
  run_3_write_13_a: assert property (disable iff (reset) run_3_write_13_p(1 + NEXT_SHIFT_AMOUNT));// ASSIGN t_end offset here
  
  property run_4_write_14_p(o);
  trans_t req_trans_type_0;
  ack_t resp_ack_0;
  int resp_data_0;
  int req_data_0;
  int req_addr_0;
  // set_freeze
  	t_virtual ##0 set_freeze(req_trans_type_0, req_trans_type()) and
  	t_virtual ##0 set_freeze(resp_ack_0, resp_ack()) and
  	t_virtual ##0 set_freeze(resp_data_0, resp_data()) and
  	t_virtual ##0 set_freeze(req_data_0, req_data()) and
  	t_virtual ##0 set_freeze(req_addr_0, req_addr()) and
  // Conceptual State
  	t_virtual ##0 run_4() and
  // trigger
  	t_virtual ##0 slave_out1_sync()
  implies
  	///**/t_virtual ##0 slave_out1_sig_addr() == (-8 + req_addr_0) and
  	/**/t_virtual ##0 slave_out1_sig_addr() == (req_addr_0) and // already verified in last property that req_addr_0 should be the right address
  	/**/t_virtual ##0 slave_out1_sig_data() == req_data_0 and
  	/**/t_virtual ##0 slave_out1_sig_trans_type() == req_trans_type_0 and
  	t_end_38 ##0 run_5() and
  	t_end_38 ##0 req_addr() == req_addr_0 and
  	t_end_38 ##0 req_data() == req_data_0 and
  	t_end_38 ##0 req_trans_type() == req_trans_type_0 and
  	t_end_38 ##0 resp_ack() == resp_ack_0 and
  	t_end_38 ##0 resp_data() == resp_data_0 and
  	during (nxt(t_virtual,1), t_end_38, master_in_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, master_out_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_in0_notify() == 0) and
  	during_o (t_virtual, 1, t_end_38 , -1, slave_in1_notify() == 0) and
  	t_end_38 ##0 slave_in1_notify() == 1 and
  	during (nxt(t_virtual,1), t_end_38, slave_in2_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_in3_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_out0_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_out1_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_out2_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_out3_notify() == 0) and
    nxt(t_virtual, 1) ##0 right_hook;
  endproperty;
  run_4_write_14_a: assert property (disable iff (reset) run_4_write_14_p(1 + NEXT_SHIFT_AMOUNT));// ASSIGN t_end offset here
  
  property run_5_read_15_p(o);
  trans_t req_trans_type_0;
  int req_data_0;
  int req_addr_0;
  ack_t slave_in1_sig_ack_0;
  int slave_in1_sig_data_0;
  // set_freeze
  	t_virtual ##0 set_freeze(req_trans_type_0, req_trans_type()) and
  	t_virtual ##0 set_freeze(req_data_0, req_data()) and
  	t_virtual ##0 set_freeze(req_addr_0, req_addr()) and
  	t_virtual ##0 set_freeze(slave_in1_sig_ack_0, slave_in1_sig_ack()) and
  	t_virtual ##0 set_freeze(slave_in1_sig_data_0, slave_in1_sig_data()) and
  // Conceptual State
  	t_virtual ##0 run_5() and
  // trigger
  	t_virtual ##0 !((single_write == req_trans_type())) and
  	t_virtual ##0 slave_in1_sync()
  implies
  	t_end_33 ##0 run_3() and
  	//t_end_33 ##0 master_out_sig_ack() == slave_in1_sig_ack_0 and
  	//t_end_33 ##0 master_out_sig_data() == slave_in1_sig_data_0 and
  	t_end_33 ##0 req_addr() == req_addr_0 and
  	t_end_33 ##0 req_data() == req_data_0 and
  	t_end_33 ##0 req_trans_type() == req_trans_type_0 and
  	t_end_33 ##0 resp_ack() == slave_in1_sig_ack_0 and
  	t_end_33 ##0 resp_data() == slave_in1_sig_data_0 and
  	during (nxt(t_virtual,1), t_end_33, master_in_notify() == 0) and
  	during_o (t_virtual, 1, t_end_33 , -1, master_out_notify() == 0) and
  	t_end_33 ##0 master_out_notify() == 1 and
  	during (nxt(t_virtual,1), t_end_33, slave_in0_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_33, slave_in1_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_33, slave_in2_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_33, slave_in3_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_33, slave_out0_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_33, slave_out1_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_33, slave_out2_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_33, slave_out3_notify() == 0) and
    //nxt(t_virtual, 1) ##0 right_hook;
    nxt(t, 33) ##0 right_hook;
  endproperty;
  run_5_read_15_a: assert property (disable iff (reset) run_5_read_15_p(1 + NEXT_SHIFT_AMOUNT));// ASSIGN t_end offset here
  
  property run_5_read_16_p(o);
  trans_t req_trans_type_0;
  int req_data_0;
  int req_addr_0;
  ack_t slave_in1_sig_ack_0;
  // set_freeze
  	t_virtual ##0 set_freeze(req_trans_type_0, req_trans_type()) and
  	t_virtual ##0 set_freeze(req_data_0, req_data()) and
  	t_virtual ##0 set_freeze(req_addr_0, req_addr()) and
  	t_virtual ##0 set_freeze(slave_in1_sig_ack_0, slave_in1_sig_ack()) and
  // Conceptual State
  	t_virtual ##0 run_5() and
  // trigger
  	t_virtual ##0 (single_write == req_trans_type()) and
  	t_virtual ##0 slave_in1_sync()
  implies
  	t_end_33 ##0 run_3() and
  	//t_end_38 ##0 master_out_sig_ack() == slave_in1_sig_ack_0 and
  	//t_end_38 ##0 master_out_sig_data() == 0 and
  	t_end_33 ##0 req_addr() == req_addr_0 and
  	t_end_33 ##0 req_data() == req_data_0 and
  	t_end_33 ##0 req_trans_type() == req_trans_type_0 and
  	t_end_33 ##0 resp_ack() == slave_in1_sig_ack_0 and
  	t_end_33 ##0 resp_data() == 0 and
  	during (nxt(t_virtual,1), t_end_33, master_in_notify() == 0) and
  	during_o (t_virtual, 1, t_end_33 , -1, master_out_notify() == 0) and
  	t_end_33 ##0 master_out_notify() == 1 and
  	during (nxt(t_virtual,1), t_end_33, slave_in0_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_33, slave_in1_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_33, slave_in2_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_33, slave_in3_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_33, slave_out0_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_33, slave_out1_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_33, slave_out2_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_33, slave_out3_notify() == 0) and
    //nxt(t_virtual, 1) ##0 right_hook;
    nxt(t, 33) ##0 right_hook;
  endproperty;
  run_5_read_16_a: assert property (disable iff (reset) run_5_read_16_p(1 + NEXT_SHIFT_AMOUNT));// ASSIGN t_end offset here
  
  property run_6_write_17_p(o);
  trans_t req_trans_type_0;
  ack_t resp_ack_0;
  int resp_data_0;
  int req_data_0;
  int req_addr_0;
  // set_freeze
  	t_virtual ##0 set_freeze(req_trans_type_0, req_trans_type()) and
  	t_virtual ##0 set_freeze(resp_ack_0, resp_ack()) and
  	t_virtual ##0 set_freeze(resp_data_0, resp_data()) and
  	t_virtual ##0 set_freeze(req_data_0, req_data()) and
  	t_virtual ##0 set_freeze(req_addr_0, req_addr()) and
  // Conceptual State
  	t_virtual ##0 run_6() and
  // trigger
  	t_virtual ##0 slave_out2_sync()
  implies
  	///**/t_virtual ##0 slave_out2_sig_addr() == (-16 + req_addr_0) and
  	/**/t_virtual ##0 slave_out2_sig_addr() == req_addr_0 and
  	/**/t_virtual ##0 slave_out2_sig_data() == req_data_0 and
  	/**/t_virtual ##0 slave_out2_sig_trans_type() == req_trans_type_0 and
  	t_end_38 ##0 run_7() and
  	t_end_38 ##0 req_addr() == req_addr_0 and
  	t_end_38 ##0 req_data() == req_data_0 and
  	t_end_38 ##0 req_trans_type() == req_trans_type_0 and
  	t_end_38 ##0 resp_ack() == resp_ack_0 and
  	t_end_38 ##0 resp_data() == resp_data_0 and
  	during (nxt(t_virtual,1), t_end_38, master_in_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, master_out_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_in0_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_in1_notify() == 0) and
  	during_o (t_virtual, 1, t_end_38 , -1, slave_in2_notify() == 0) and
  	t_end_38 ##0 slave_in2_notify() == 1 and
  	during (nxt(t_virtual,1), t_end_38, slave_in3_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_out0_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_out1_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_out2_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_out3_notify() == 0) and
    nxt(t_virtual, 1) ##0 right_hook;
  endproperty;
  run_6_write_17_a: assert property (disable iff (reset) run_6_write_17_p(1 + NEXT_SHIFT_AMOUNT));// ASSIGN t_end offset here
  
  property run_7_read_18_p(o);
  trans_t req_trans_type_0;
  int req_data_0;
  int req_addr_0;
  ack_t slave_in2_sig_ack_0;
  int slave_in2_sig_data_0;
  // set_freeze
  	t_virtual ##0 set_freeze(req_trans_type_0, req_trans_type()) and
  	t_virtual ##0 set_freeze(req_data_0, req_data()) and
  	t_virtual ##0 set_freeze(req_addr_0, req_addr()) and
  	t_virtual ##0 set_freeze(slave_in2_sig_ack_0, slave_in2_sig_ack()) and
  	t_virtual ##0 set_freeze(slave_in2_sig_data_0, slave_in2_sig_data()) and
  // Conceptual State
  	t_virtual ##0 run_7() and
  // trigger
  	t_virtual ##0 !((single_write == req_trans_type())) and
  	t_virtual ##0 slave_in2_sync()
  implies
  	t_end_33 ##0 run_3() and
  	//t_end_38 ##0 master_out_sig_ack() == slave_in2_sig_ack_0 and
  	//t_end_38 ##0 master_out_sig_data() == slave_in2_sig_data_0 and
  	t_end_33 ##0 req_addr() == req_addr_0 and
  	t_end_33 ##0 req_data() == req_data_0 and
  	t_end_33 ##0 req_trans_type() == req_trans_type_0 and
  	t_end_33 ##0 resp_ack() == slave_in2_sig_ack_0 and
  	t_end_33 ##0 resp_data() == slave_in2_sig_data_0 and
  	during (nxt(t_virtual,1), t_end_33, master_in_notify() == 0) and
  	during_o (t_virtual, 1, t_end_33 , -1, master_out_notify() == 0) and
  	t_end_33 ##0 master_out_notify() == 1 and
  	during (nxt(t_virtual,1), t_end_33, slave_in0_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_33, slave_in1_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_33, slave_in2_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_33, slave_in3_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_33, slave_out0_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_33, slave_out1_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_33, slave_out2_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_33, slave_out3_notify() == 0) and
    //nxt(t_virtual, 1) ##0 right_hook;
    nxt(t, 33) ##0 right_hook;
  endproperty;
  run_7_read_18_a: assert property (disable iff (reset) run_7_read_18_p(1 + NEXT_SHIFT_AMOUNT));// ASSIGN t_end offset here
  
  property run_7_read_19_p(o);
  trans_t req_trans_type_0;
  int req_data_0;
  int req_addr_0;
  ack_t slave_in2_sig_ack_0;
  // set_freeze
  	t_virtual ##0 set_freeze(req_trans_type_0, req_trans_type()) and
  	t_virtual ##0 set_freeze(req_data_0, req_data()) and
  	t_virtual ##0 set_freeze(req_addr_0, req_addr()) and
  	t_virtual ##0 set_freeze(slave_in2_sig_ack_0, slave_in2_sig_ack()) and
  // Conceptual State
  	t_virtual ##0 run_7() and
  // trigger
  	t_virtual ##0 (single_write == req_trans_type()) and
  	t_virtual ##0 slave_in2_sync()
  implies
  	t_end_33 ##0 run_3() and
  	//t_end_38 ##0 master_out_sig_ack() == slave_in2_sig_ack_0 and
  	//t_end_38 ##0 master_out_sig_data() == 0 and
  	t_end_33 ##0 req_addr() == req_addr_0 and
  	t_end_33 ##0 req_data() == req_data_0 and
  	t_end_33 ##0 req_trans_type() == req_trans_type_0 and
  	t_end_33 ##0 resp_ack() == slave_in2_sig_ack_0 and
  	t_end_33 ##0 resp_data() == 0 and
  	during (nxt(t_virtual,1), t_end_33, master_in_notify() == 0) and
  	during_o (t_virtual, 1, t_end_33 , -1, master_out_notify() == 0) and
  	t_end_33 ##0 master_out_notify() == 1 and
  	during (nxt(t_virtual,1), t_end_33, slave_in0_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_33, slave_in1_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_33, slave_in2_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_33, slave_in3_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_33, slave_out0_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_33, slave_out1_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_33, slave_out2_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_33, slave_out3_notify() == 0) and
    //nxt(t_virtual, 1) ##0 right_hook;
    nxt(t, 33) ##0 right_hook;
  endproperty;
  run_7_read_19_a: assert property (disable iff (reset) run_7_read_19_p(1 + NEXT_SHIFT_AMOUNT));// ASSIGN t_end offset here
  
  property run_8_write_20_p(o);
  trans_t req_trans_type_0;
  ack_t resp_ack_0;
  int resp_data_0;
  int req_data_0;
  int req_addr_0;
  // set_freeze
  	t_virtual ##0 set_freeze(req_trans_type_0, req_trans_type()) and
  	t_virtual ##0 set_freeze(resp_ack_0, resp_ack()) and
  	t_virtual ##0 set_freeze(resp_data_0, resp_data()) and
  	t_virtual ##0 set_freeze(req_data_0, req_data()) and
  	t_virtual ##0 set_freeze(req_addr_0, req_addr()) and
  // Conceptual State
  	t_virtual ##0 run_8() and
  // trigger
  	t_virtual ##0 slave_out3_sync()
  implies
  	///**/t_virtual ##0 slave_out3_sig_addr() == (-24 + req_addr_0) and
  	/**/t_virtual ##0 slave_out3_sig_addr() == req_addr_0 and
  	/**/t_virtual ##0 slave_out3_sig_data() == req_data_0 and
  	/**/t_virtual ##0 slave_out3_sig_trans_type() == req_trans_type_0 and
  	t_end_38 ##0 run_9() and
  	t_end_38 ##0 req_addr() == req_addr_0 and
  	t_end_38 ##0 req_data() == req_data_0 and
  	t_end_38 ##0 req_trans_type() == req_trans_type_0 and
  	t_end_38 ##0 resp_ack() == resp_ack_0 and
  	t_end_38 ##0 resp_data() == resp_data_0 and
  	during (nxt(t_virtual,1), t_end_38, master_in_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, master_out_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_in0_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_in1_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_in2_notify() == 0) and
  	during_o (t_virtual, 1, t_end_38 , -1, slave_in3_notify() == 0) and
  	t_end_38 ##0 slave_in3_notify() == 1 and
  	during (nxt(t_virtual,1), t_end_38, slave_out0_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_out1_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_out2_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_38, slave_out3_notify() == 0) and
    nxt(t_virtual, 1) ##0 right_hook;
    //t_virtual ##0 right_hook; // this is "absolute time"!
  endproperty;
  run_8_write_20_a: assert property (disable iff (reset) run_8_write_20_p(1 + NEXT_SHIFT_AMOUNT));// ASSIGN t_end offset here
  
  property run_9_read_21_p(o);
  trans_t req_trans_type_0;
  int req_data_0;
  int req_addr_0;
  ack_t slave_in3_sig_ack_0;
  int slave_in3_sig_data_0;
  // set_freeze
  	t_virtual ##0 set_freeze(req_trans_type_0, req_trans_type()) and
  	t_virtual ##0 set_freeze(req_data_0, req_data()) and
  	t_virtual ##0 set_freeze(req_addr_0, req_addr()) and
  	t_virtual ##0 set_freeze(slave_in3_sig_ack_0, slave_in3_sig_ack()) and
  	t_virtual ##0 set_freeze(slave_in3_sig_data_0, slave_in3_sig_data()) and
  // Conceptual State
  	t_virtual ##0 run_9() and
  // trigger
  	t_virtual ##0 !((single_write == req_trans_type())) and
  	t_virtual ##0 slave_in3_sync()
  implies
  	t_end_33 ##0 run_3() and
  	//t_end_33 ##0 master_out_sig_ack() == slave_in3_sig_ack_0 and
  	//t_end_33 ##0 master_out_sig_data() == slave_in3_sig_data_0 and
  	t_end_33 ##0 req_addr() == req_addr_0 and
  	t_end_33 ##0 req_data() == req_data_0 and
  	t_end_33 ##0 req_trans_type() == req_trans_type_0 and
  	t_end_33 ##0 resp_ack() == slave_in3_sig_ack_0 and
  	t_end_33 ##0 resp_data() == slave_in3_sig_data_0 and
  	during (nxt(t_virtual,1), t_end_33, master_in_notify() == 0) and
  	during_o (t_virtual, 1, t_end_33 , -1, master_out_notify() == 0) and
  	t_end_33 ##0 master_out_notify() == 1 and
  	during (nxt(t_virtual,1), t_end_33, slave_in0_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_33, slave_in1_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_33, slave_in2_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_33, slave_in3_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_33, slave_out0_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_33, slave_out1_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_33, slave_out2_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_33, slave_out3_notify() == 0) and
    //nxt(t_virtual, 1) ##0 right_hook;
    nxt(t, 33) ##0 right_hook;
  endproperty;
  run_9_read_21_a: assert property (disable iff (reset) run_9_read_21_p(1 + NEXT_SHIFT_AMOUNT));// ASSIGN t_end offset here
  
  property run_9_read_22_p(o);
  trans_t req_trans_type_0;
  int req_data_0;
  int req_addr_0;
  ack_t slave_in3_sig_ack_0;
  // set_freeze
  	t_virtual ##0 set_freeze(req_trans_type_0, req_trans_type()) and
  	t_virtual ##0 set_freeze(req_data_0, req_data()) and
  	t_virtual ##0 set_freeze(req_addr_0, req_addr()) and
  	t_virtual ##0 set_freeze(slave_in3_sig_ack_0, slave_in3_sig_ack()) and
  // Conceptual State
  	t_virtual ##0 run_9() and
  // trigger
  	t_virtual ##0 (single_write == req_trans_type()) and
  	t_virtual ##0 slave_in3_sync()
  implies
  	t_end_33 ##0 run_3() and
  	//t_end_38 ##0 master_out_sig_ack() == slave_in3_sig_ack_0 and
  	//t_end_38 ##0 master_out_sig_data() == 0 and
  	t_end_33 ##0 req_addr() == req_addr_0 and
  	t_end_33 ##0 req_data() == req_data_0 and
  	t_end_33 ##0 req_trans_type() == req_trans_type_0 and
  	t_end_33 ##0 resp_ack() == slave_in3_sig_ack_0 and
  	t_end_33 ##0 resp_data() == 0 and
  	during (nxt(t_virtual,1), t_end_33, master_in_notify() == 0) and
  	during_o (t_virtual, 1, t_end_33 , -1, master_out_notify() == 0) and
  	t_end_33 ##0 master_out_notify() == 1 and
  	during (nxt(t_virtual,1), t_end_33, slave_in0_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_33, slave_in1_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_33, slave_in2_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_33, slave_in3_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_33, slave_out0_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_33, slave_out1_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_33, slave_out2_notify() == 0) and
  	during (nxt(t_virtual,1), t_end_33, slave_out3_notify() == 0) and
    //nxt(t_virtual, 1) ##0 right_hook;
    nxt(t, 33) ##0 right_hook;
  endproperty;
  run_9_read_22_a: assert property (disable iff (reset) run_9_read_22_p(1 + NEXT_SHIFT_AMOUNT));// ASSIGN t_end offset here
  
  
  property wait_run_0_p;
  trans_t req_trans_type_0;
  ack_t resp_ack_0;
  int resp_data_0;
  int req_data_0;
  int req_addr_0;
  // set_freeze
  	t_virtual ##0 set_freeze(req_trans_type_0, req_trans_type()) and
  	t_virtual ##0 set_freeze(resp_ack_0, resp_ack()) and
  	t_virtual ##0 set_freeze(resp_data_0, resp_data()) and
  	t_virtual ##0 set_freeze(req_data_0, req_data()) and
  	t_virtual ##0 set_freeze(req_addr_0, req_addr()) and
  // Conceptual State
  	t_virtual ##0 run_0() and
  // trigger
  	t_virtual ##0 !(master_in_sync())
  implies
  	t_virtual ##1 run_0() and
  	t_virtual ##1 req_addr() == req_addr_0 and
  	t_virtual ##1 req_data() == req_data_0 and
  	t_virtual ##1 req_trans_type() == req_trans_type_0 and
  	t_virtual ##1 resp_ack() == resp_ack_0 and
  	t_virtual ##1 resp_data() == resp_data_0 and
  	t_virtual ##1 master_in_notify() == 1 and
  	t_virtual ##1 master_out_notify() == 0 and
  	t_virtual ##1 slave_in0_notify() == 0 and
  	t_virtual ##1 slave_in1_notify() == 0 and
  	t_virtual ##1 slave_in2_notify() == 0 and
  	t_virtual ##1 slave_in3_notify() == 0 and
  	t_virtual ##1 slave_out0_notify() == 0 and
  	t_virtual ##1 slave_out1_notify() == 0 and
  	t_virtual ##1 slave_out2_notify() == 0 and
  	t_virtual ##1 slave_out3_notify() == 0 and
    nxt(t, 1) ##0 right_hook;
  endproperty;
  wait_run_0_a: assert property (disable iff (reset) wait_run_0_p);
  
  
  property wait_run_1_p;
  trans_t req_trans_type_0;
  ack_t resp_ack_0;
  int resp_data_0;
  int req_data_0;
  int req_addr_0;
  int slave_out0_sig_addr_0;
  int slave_out0_sig_data_0;
  logic slave_out0_sig_trans_type_0;

  // set_freeze
  	t_virtual ##0 set_freeze(req_trans_type_0, req_trans_type()) and
  	t_virtual ##0 set_freeze(resp_ack_0, resp_ack()) and
  	t_virtual ##0 set_freeze(resp_data_0, resp_data()) and
  	t_virtual ##0 set_freeze(req_data_0, req_data()) and
  	t_virtual ##0 set_freeze(req_addr_0, req_addr()) and
    t_virtual ##0 set_freeze(slave_out0_sig_addr_0, slave_out0_sig_addr()) and
    t_virtual ##0 set_freeze(slave_out0_sig_data_0, slave_out0_sig_data()) and
    t_virtual ##0 set_freeze(slave_out0_sig_trans_type_0, slave_out0_sig_trans_type()) and
  // Conceptual State
  	t_virtual ##0 run_1() and
  // trigger
  	t_virtual ##0 !(slave_out0_sync())
  implies
  	t_virtual ##1 run_1() and
  	t_virtual ##1 req_addr() == req_addr_0 and
  	t_virtual ##1 req_data() == req_data_0 and
  	t_virtual ##1 req_trans_type() == req_trans_type_0 and
  	t_virtual ##1 resp_ack() == resp_ack_0 and
  	t_virtual ##1 resp_data() == resp_data_0 and
  	//t_virtual ##0 slave_out0_sig_addr() == req_addr_0 and
  	//t_virtual ##0 slave_out0_sig_data() == req_data_0 and
  	//t_virtual ##0 slave_out0_sig_trans_type() == req_trans_type_0 and
  	//t_virtual ##1 slave_out0_sig_addr() == req_addr_0 and
  	//t_virtual ##1 slave_out0_sig_data() == req_data_0 and
  	//t_virtual ##1 slave_out0_sig_trans_type() == req_trans_type_0 and
  	//t_virtual ##1 slave_out0_sig_addr() == slave_out0_sig_addr_0/*req_addr_0*/ and
  	//t_virtual ##1 slave_out0_sig_data() == slave_out0_sig_data_0/*req_data_0*/ and
  	//t_virtual ##1 slave_out0_sig_trans_type() == slave_out0_sig_trans_type_0/* req_trans_type_0*/ and
  	t_virtual ##1 master_in_notify() == 0 and
  	t_virtual ##1 master_out_notify() == 0 and
  	t_virtual ##1 slave_in0_notify() == 0 and
  	t_virtual ##1 slave_in1_notify() == 0 and
  	t_virtual ##1 slave_in2_notify() == 0 and
  	t_virtual ##1 slave_in3_notify() == 0 and
  	t_virtual ##1 slave_out0_notify() == 1 and
  	t_virtual ##1 slave_out1_notify() == 0 and
  	t_virtual ##1 slave_out2_notify() == 0 and
  	t_virtual ##1 slave_out3_notify() == 0 and
    nxt(t, 1) ##0 right_hook;
  endproperty;
  wait_run_1_a: assert property (disable iff (reset) wait_run_1_p);
  
  
  property wait_run_2_p;
  trans_t req_trans_type_0;
  ack_t resp_ack_0;
  int resp_data_0;
  int req_data_0;
  int req_addr_0;
  // set_freeze
  	t_virtual ##0 set_freeze(req_trans_type_0, req_trans_type()) and
  	t_virtual ##0 set_freeze(resp_ack_0, resp_ack()) and
  	t_virtual ##0 set_freeze(resp_data_0, resp_data()) and
  	t_virtual ##0 set_freeze(req_data_0, req_data()) and
  	t_virtual ##0 set_freeze(req_addr_0, req_addr()) and
  // Conceptual State
  	t_virtual ##0 run_2() and
  // trigger
  	t_virtual ##0 !(slave_in0_sync())
  implies
  	t_virtual ##1 run_2() and
  	t_virtual ##1 req_addr() == req_addr_0 and
  	t_virtual ##1 req_data() == req_data_0 and
  	t_virtual ##1 req_trans_type() == req_trans_type_0 and
  	t_virtual ##1 resp_ack() == resp_ack_0 and
  	t_virtual ##1 resp_data() == resp_data_0 and
  	t_virtual ##1 master_in_notify() == 0 and
  	t_virtual ##1 master_out_notify() == 0 and
  	t_virtual ##1 slave_in0_notify() == 1 and
  	t_virtual ##1 slave_in1_notify() == 0 and
  	t_virtual ##1 slave_in2_notify() == 0 and
  	t_virtual ##1 slave_in3_notify() == 0 and
  	t_virtual ##1 slave_out0_notify() == 0 and
  	t_virtual ##1 slave_out1_notify() == 0 and
  	t_virtual ##1 slave_out2_notify() == 0 and
  	t_virtual ##1 slave_out3_notify() == 0 and
    nxt(t, 1) ##0 right_hook;
  endproperty;
  wait_run_2_a: assert property (disable iff (reset) wait_run_2_p);
  
  
  property wait_run_3_p;
  trans_t req_trans_type_0;
  ack_t resp_ack_0;
  int resp_data_0;
  int req_data_0;
  int req_addr_0;
  // set_freeze
  	t_virtual ##0 set_freeze(req_trans_type_0, req_trans_type()) and
  	t_virtual ##0 set_freeze(resp_ack_0, resp_ack()) and
  	t_virtual ##0 set_freeze(resp_data_0, resp_data()) and
  	t_virtual ##0 set_freeze(req_data_0, req_data()) and
  	t_virtual ##0 set_freeze(req_addr_0, req_addr()) and
  // Conceptual State
  	t_virtual ##0 run_3() and
  // trigger
  	t_virtual ##0 !(master_out_sync())
  implies
  	t_virtual ##1 run_3() and
  	//t_virtual ##1 master_out_sig_ack() == resp_ack_0 and
  	//t_virtual ##1 master_out_sig_data() == resp_data_0 and
  	t_virtual ##1 req_addr() == req_addr_0 and
  	t_virtual ##1 req_data() == req_data_0 and
  	t_virtual ##1 req_trans_type() == req_trans_type_0 and
  	t_virtual ##1 resp_ack() == resp_ack_0 and
  	t_virtual ##1 resp_data() == resp_data_0 and
  	t_virtual ##1 master_in_notify() == 0 and
  	t_virtual ##1 master_out_notify() == 1 and
  	t_virtual ##1 slave_in0_notify() == 0 and
  	t_virtual ##1 slave_in1_notify() == 0 and
  	t_virtual ##1 slave_in2_notify() == 0 and
  	t_virtual ##1 slave_in3_notify() == 0 and
  	t_virtual ##1 slave_out0_notify() == 0 and
  	t_virtual ##1 slave_out1_notify() == 0 and
  	t_virtual ##1 slave_out2_notify() == 0 and
  	t_virtual ##1 slave_out3_notify() == 0 and
    nxt(t, 1) ##0 right_hook;
  endproperty;
  wait_run_3_a: assert property (disable iff (reset) wait_run_3_p);
  
  
  property wait_run_4_p;
  trans_t req_trans_type_0;
  ack_t resp_ack_0;
  int resp_data_0;
  int req_data_0;
  int req_addr_0;
  int slave_out1_sig_addr_0;
  int slave_out1_sig_data_0;
  trans_t slave_out1_sig_trans_type_0;
  // set_freeze
  	t_virtual ##0 set_freeze(req_trans_type_0, req_trans_type()) and
  	t_virtual ##0 set_freeze(resp_ack_0, resp_ack()) and
  	t_virtual ##0 set_freeze(resp_data_0, resp_data()) and
  	t_virtual ##0 set_freeze(req_data_0, req_data()) and
  	t_virtual ##0 set_freeze(req_addr_0, req_addr()) and
  	t_virtual ##0 set_freeze(slave_out1_sig_addr_0, slave_out1_sig_addr()) and
  	t_virtual ##0 set_freeze(slave_out1_sig_data_0, slave_out1_sig_data()) and
  	t_virtual ##0 set_freeze(slave_out1_sig_trans_type_0, slave_out1_sig_trans_type()) and
  // Conceptual State
  	t_virtual ##0 run_4() and
  // trigger
  	t_virtual ##0 !(slave_out1_sync())
  implies
  	t_virtual ##1 run_4() and
  	t_virtual ##1 req_addr() == req_addr_0 and
  	t_virtual ##1 req_data() == req_data_0 and
  	t_virtual ##1 req_trans_type() == req_trans_type_0 and
  	t_virtual ##1 resp_ack() == resp_ack_0 and
  	t_virtual ##1 resp_data() == resp_data_0 and
  	//t_virtual ##1 slave_out1_sig_addr() == req_addr_0 and
  	//t_virtual ##1 slave_out1_sig_data() == req_data_0 and
  	//t_virtual ##1 slave_out1_sig_trans_type() == req_trans_type_0 and
  	//t_virtual ##1 slave_out1_sig_addr() == slave_out1_sig_addr_0 and
  	//t_virtual ##1 slave_out1_sig_data() == slave_out1_sig_data_0 and
  	//t_virtual ##1 slave_out1_sig_trans_type() == slave_out1_sig_trans_type_0 and
  	t_virtual ##1 master_in_notify() == 0 and
  	t_virtual ##1 master_out_notify() == 0 and
  	t_virtual ##1 slave_in0_notify() == 0 and
  	t_virtual ##1 slave_in1_notify() == 0 and
  	t_virtual ##1 slave_in2_notify() == 0 and
  	t_virtual ##1 slave_in3_notify() == 0 and
  	t_virtual ##1 slave_out0_notify() == 0 and
  	t_virtual ##1 slave_out1_notify() == 1 and
  	t_virtual ##1 slave_out2_notify() == 0 and
  	t_virtual ##1 slave_out3_notify() == 0 and
    nxt(t, 1) ##0 right_hook;
  endproperty;
  wait_run_4_a: assert property (disable iff (reset) wait_run_4_p);
  
  
  property wait_run_5_p;
  trans_t req_trans_type_0;
  ack_t resp_ack_0;
  int resp_data_0;
  int req_data_0;
  int req_addr_0;
  // set_freeze
  	t_virtual ##0 set_freeze(req_trans_type_0, req_trans_type()) and
  	t_virtual ##0 set_freeze(resp_ack_0, resp_ack()) and
  	t_virtual ##0 set_freeze(resp_data_0, resp_data()) and
  	t_virtual ##0 set_freeze(req_data_0, req_data()) and
  	t_virtual ##0 set_freeze(req_addr_0, req_addr()) and
  // Conceptual State
  	t_virtual ##0 run_5() and
  // trigger
  	t_virtual ##0 !(slave_in1_sync())
  implies
  	t_virtual ##1 run_5() and
  	t_virtual ##1 req_addr() == req_addr_0 and
  	t_virtual ##1 req_data() == req_data_0 and
  	t_virtual ##1 req_trans_type() == req_trans_type_0 and
  	t_virtual ##1 resp_ack() == resp_ack_0 and
  	t_virtual ##1 resp_data() == resp_data_0 and
  	t_virtual ##1 master_in_notify() == 0 and
  	t_virtual ##1 master_out_notify() == 0 and
  	t_virtual ##1 slave_in0_notify() == 0 and
  	t_virtual ##1 slave_in1_notify() == 1 and
  	t_virtual ##1 slave_in2_notify() == 0 and
  	t_virtual ##1 slave_in3_notify() == 0 and
  	t_virtual ##1 slave_out0_notify() == 0 and
  	t_virtual ##1 slave_out1_notify() == 0 and
  	t_virtual ##1 slave_out2_notify() == 0 and
  	t_virtual ##1 slave_out3_notify() == 0 and
    nxt(t, 1) ##0 right_hook;
  endproperty;
  wait_run_5_a: assert property (disable iff (reset) wait_run_5_p);
  
  
  property wait_run_6_p;
  trans_t req_trans_type_0;
  ack_t resp_ack_0;
  int resp_data_0;
  int req_data_0;
  int req_addr_0;
  int slave_out2_sig_addr_0;
  int slave_out2_sig_data_0;
  trans_t slave_out2_sig_trans_type_0;
  // set_freeze
  	t_virtual ##0 set_freeze(req_trans_type_0, req_trans_type()) and
  	t_virtual ##0 set_freeze(resp_ack_0, resp_ack()) and
  	t_virtual ##0 set_freeze(resp_data_0, resp_data()) and
  	t_virtual ##0 set_freeze(req_data_0, req_data()) and
  	t_virtual ##0 set_freeze(req_addr_0, req_addr()) and
  	t_virtual ##0 set_freeze(slave_out2_sig_addr_0, slave_out2_sig_addr()) and
  	t_virtual ##0 set_freeze(slave_out2_sig_data_0, slave_out2_sig_data()) and
  	t_virtual ##0 set_freeze(slave_out2_sig_trans_type_0, slave_out2_sig_trans_type()) and
  // Conceptual State
  	t_virtual ##0 run_6() and
  // trigger
  	t_virtual ##0 !(slave_out2_sync())
  implies
  	t_virtual ##1 run_6() and
  	t_virtual ##1 req_addr() == req_addr_0 and
  	t_virtual ##1 req_data() == req_data_0 and
  	t_virtual ##1 req_trans_type() == req_trans_type_0 and
  	t_virtual ##1 resp_ack() == resp_ack_0 and
  	t_virtual ##1 resp_data() == resp_data_0 and
  	//t_virtual ##1 slave_out2_sig_addr() == req_addr_0 and
  	//t_virtual ##1 slave_out2_sig_data() == req_data_0 and
  	//t_virtual ##1 slave_out2_sig_trans_type() == req_trans_type_0 and
  	//t_virtual ##1 slave_out2_sig_addr() == req_addr_0 and
  	//t_virtual ##1 slave_out2_sig_data() == req_data_0 and
  	//t_virtual ##1 slave_out2_sig_trans_type() == req_trans_type_0 and
  	t_virtual ##1 master_in_notify() == 0 and
  	t_virtual ##1 master_out_notify() == 0 and
  	t_virtual ##1 slave_in0_notify() == 0 and
  	t_virtual ##1 slave_in1_notify() == 0 and
  	t_virtual ##1 slave_in2_notify() == 0 and
  	t_virtual ##1 slave_in3_notify() == 0 and
  	t_virtual ##1 slave_out0_notify() == 0 and
  	t_virtual ##1 slave_out1_notify() == 0 and
  	t_virtual ##1 slave_out2_notify() == 1 and
  	t_virtual ##1 slave_out3_notify() == 0 and
    nxt(t, 1) ##0 right_hook;
  endproperty;
  wait_run_6_a: assert property (disable iff (reset) wait_run_6_p);
  
  
  property wait_run_7_p;
  trans_t req_trans_type_0;
  ack_t resp_ack_0;
  int resp_data_0;
  int req_data_0;
  int req_addr_0;
  // set_freeze
  	t_virtual ##0 set_freeze(req_trans_type_0, req_trans_type()) and
  	t_virtual ##0 set_freeze(resp_ack_0, resp_ack()) and
  	t_virtual ##0 set_freeze(resp_data_0, resp_data()) and
  	t_virtual ##0 set_freeze(req_data_0, req_data()) and
  	t_virtual ##0 set_freeze(req_addr_0, req_addr()) and
  // Conceptual State
  	t_virtual ##0 run_7() and
  // trigger
  	t_virtual ##0 !(slave_in2_sync())
  implies
  	t_virtual ##1 run_7() and
  	t_virtual ##1 req_addr() == req_addr_0 and
  	t_virtual ##1 req_data() == req_data_0 and
  	t_virtual ##1 req_trans_type() == req_trans_type_0 and
  	t_virtual ##1 resp_ack() == resp_ack_0 and
  	t_virtual ##1 resp_data() == resp_data_0 and
  	t_virtual ##1 master_in_notify() == 0 and
  	t_virtual ##1 master_out_notify() == 0 and
  	t_virtual ##1 slave_in0_notify() == 0 and
  	t_virtual ##1 slave_in1_notify() == 0 and
  	t_virtual ##1 slave_in2_notify() == 1 and
  	t_virtual ##1 slave_in3_notify() == 0 and
  	t_virtual ##1 slave_out0_notify() == 0 and
  	t_virtual ##1 slave_out1_notify() == 0 and
  	t_virtual ##1 slave_out2_notify() == 0 and
  	t_virtual ##1 slave_out3_notify() == 0 and
    nxt(t, 1) ##0 right_hook;
  endproperty;
  wait_run_7_a: assert property (disable iff (reset) wait_run_7_p);
  
  
  property wait_run_8_p;
  trans_t req_trans_type_0;
  ack_t resp_ack_0;
  int resp_data_0;
  int req_data_0;
  int req_addr_0;
  int slave_out3_sig_addr_0;
  int slave_out3_sig_data_0;
  trans_t slave_out3_sig_trans_type_0;
  // set_freeze
  	t_virtual ##0 set_freeze(req_trans_type_0, req_trans_type()) and
  	t_virtual ##0 set_freeze(resp_ack_0, resp_ack()) and
  	t_virtual ##0 set_freeze(resp_data_0, resp_data()) and
  	t_virtual ##0 set_freeze(req_data_0, req_data()) and
  	t_virtual ##0 set_freeze(req_addr_0, req_addr()) and
  	t_virtual ##0 set_freeze(slave_out3_sig_addr_0, slave_out3_sig_addr()) and
  	t_virtual ##0 set_freeze(slave_out3_sig_data_0, slave_out3_sig_data()) and
  	t_virtual ##0 set_freeze(slave_out3_sig_trans_type_0, slave_out3_sig_trans_type()) and
  // Conceptual State
  	t_virtual ##0 run_8() and
  // trigger
  	t_virtual ##0 !(slave_out3_sync())
  implies
  	t_virtual ##1 run_8() and
  	t_virtual ##1 req_addr() == req_addr_0 and
  	t_virtual ##1 req_data() == req_data_0 and
  	t_virtual ##1 req_trans_type() == req_trans_type_0 and
  	t_virtual ##1 resp_ack() == resp_ack_0 and
  	t_virtual ##1 resp_data() == resp_data_0 and
  	//t_virtual ##1 slave_out3_sig_addr() == req_addr_0 and
  	//t_virtual ##1 slave_out3_sig_data() == req_data_0 and
  	//t_virtual ##1 slave_out3_sig_trans_type() == req_trans_type_0 and
  	//t_virtual ##1 slave_out3_sig_addr() == slave_out3_sig_addr_0 and
  	//t_virtual ##1 slave_out3_sig_data() == slave_out3_sig_data_0 and
  	//t_virtual ##1 slave_out3_sig_trans_type() == slave_out3_sig_trans_type_0 and
  	t_virtual ##1 master_in_notify() == 0 and
  	t_virtual ##1 master_out_notify() == 0 and
  	t_virtual ##1 slave_in0_notify() == 0 and
  	t_virtual ##1 slave_in1_notify() == 0 and
  	t_virtual ##1 slave_in2_notify() == 0 and
  	t_virtual ##1 slave_in3_notify() == 0 and
  	t_virtual ##1 slave_out0_notify() == 0 and
  	t_virtual ##1 slave_out1_notify() == 0 and
  	t_virtual ##1 slave_out2_notify() == 0 and
  	t_virtual ##1 slave_out3_notify() == 1 and
    nxt(t, 1) ##0 right_hook;
  endproperty;
  wait_run_8_a: assert property (disable iff (reset) wait_run_8_p);
  
  
  property wait_run_9_p;
  trans_t req_trans_type_0;
  ack_t resp_ack_0;
  int resp_data_0;
  int req_data_0;
  int req_addr_0;
  // set_freeze
  	t_virtual ##0 set_freeze(req_trans_type_0, req_trans_type()) and
  	t_virtual ##0 set_freeze(resp_ack_0, resp_ack()) and
  	t_virtual ##0 set_freeze(resp_data_0, resp_data()) and
  	t_virtual ##0 set_freeze(req_data_0, req_data()) and
  	t_virtual ##0 set_freeze(req_addr_0, req_addr()) and
  // Conceptual State
  	t_virtual ##0 run_9() and
  // trigger
  	t_virtual ##0 !(slave_in3_sync())
  implies
  	t_virtual ##1 run_9() and
  	t_virtual ##1 req_addr() == req_addr_0 and
  	t_virtual ##1 req_data() == req_data_0 and
  	t_virtual ##1 req_trans_type() == req_trans_type_0 and
  	t_virtual ##1 resp_ack() == resp_ack_0 and
  	t_virtual ##1 resp_data() == resp_data_0 and
  	t_virtual ##1 master_in_notify() == 0 and
  	t_virtual ##1 master_out_notify() == 0 and
  	t_virtual ##1 slave_in0_notify() == 0 and
  	t_virtual ##1 slave_in1_notify() == 0 and
  	t_virtual ##1 slave_in2_notify() == 0 and
  	t_virtual ##1 slave_in3_notify() == 1 and
  	t_virtual ##1 slave_out0_notify() == 0 and
  	t_virtual ##1 slave_out1_notify() == 0 and
  	t_virtual ##1 slave_out2_notify() == 0 and
  	t_virtual ##1 slave_out3_notify() == 0 and
    nxt(t, 1) ##0 right_hook;
  endproperty;
  wait_run_9_a: assert property (disable iff (reset) wait_run_9_p);
  `end_tda

endmodule

//DESIGNER SHOULD PAY ATTENTION FOR USING THE MODEL CORRECT NAME FOR BINDING AND TO REFER TO THE RESET SIGNAL USED IN IT
//bind Bus Bus_verification bus_inst (.reset(reset));
bind Bus Bus_verification inst (.*, .reset(rst));
