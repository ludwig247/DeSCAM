// DATA TYPES //
typedef enum {ERR, OK, RTY} ack_t;
typedef enum {SINGLE_READ, SINGLE_WRITE} trans_t;

`define next_shift_amount 0 //IN CASE OF REQUIRED SIGNALS VALUES IN THE FUTURE, SHIFT YOUR ENTIRE TIMING BY THIS FACTOR

`include "ipc.sva"
`include "Bus_new_functions.sva"

import scam_model_types::*;

module Bus_new_verification(reset);

input reset;

//DESIGNER SHOULD PAY ATTENTION FOR USING THE MODEL CORRECT NAME TO REFER TO THE CLK SIGNAL USED IN IT
default clocking default_clk @(posedge Bus_new.clk); endclocking

// SYNC AND NOTIFY SIGNALS (1-cycle macros) //
function master_in_sync;
	master_in_sync = ;
endfunction
function master_out_sync;
	master_out_sync = ;
endfunction
function slave_in0_sync;
	slave_in0_sync = ;
endfunction
function slave_in1_sync;
	slave_in1_sync = ;
endfunction
function slave_in2_sync;
	slave_in2_sync = ;
endfunction
function slave_in3_sync;
	slave_in3_sync = ;
endfunction
function slave_out0_sync;
	slave_out0_sync = ;
endfunction
function slave_out1_sync;
	slave_out1_sync = ;
endfunction
function slave_out2_sync;
	slave_out2_sync = ;
endfunction
function slave_out3_sync;
	slave_out3_sync = ;
endfunction
function master_in_notify;
	master_in_notify = ;
endfunction
function master_out_notify;
	master_out_notify = ;
endfunction
function slave_in0_notify;
	slave_in0_notify = ;
endfunction
function slave_in1_notify;
	slave_in1_notify = ;
endfunction
function slave_in2_notify;
	slave_in2_notify = ;
endfunction
function slave_in3_notify;
	slave_in3_notify = ;
endfunction
function slave_out0_notify;
	slave_out0_notify = ;
endfunction
function slave_out1_notify;
	slave_out1_notify = ;
endfunction
function slave_out2_notify;
	slave_out2_notify = ;
endfunction
function slave_out3_notify;
	slave_out3_notify = ;
endfunction

// DP SIGNALS //
function bus_req_t master_in_sig;
	master_in_sig = ;
endfunction
function int master_in_sig_addr;
	master_in_sig_addr = ;
endfunction
function int master_in_sig_data;
	master_in_sig_data = ;
endfunction
function trans_t master_in_sig_trans_type;
	master_in_sig_trans_type = ;
endfunction
function bus_resp_t master_out_sig;
	master_out_sig = ;
endfunction
function ack_t master_out_sig_ack;
	master_out_sig_ack = ;
endfunction
function int master_out_sig_data;
	master_out_sig_data = ;
endfunction
function bus_resp_t slave_in0_sig;
	slave_in0_sig = ;
endfunction
function ack_t slave_in0_sig_ack;
	slave_in0_sig_ack = ;
endfunction
function int slave_in0_sig_data;
	slave_in0_sig_data = ;
endfunction
function bus_resp_t slave_in1_sig;
	slave_in1_sig = ;
endfunction
function ack_t slave_in1_sig_ack;
	slave_in1_sig_ack = ;
endfunction
function int slave_in1_sig_data;
	slave_in1_sig_data = ;
endfunction
function bus_resp_t slave_in2_sig;
	slave_in2_sig = ;
endfunction
function ack_t slave_in2_sig_ack;
	slave_in2_sig_ack = ;
endfunction
function int slave_in2_sig_data;
	slave_in2_sig_data = ;
endfunction
function bus_resp_t slave_in3_sig;
	slave_in3_sig = ;
endfunction
function ack_t slave_in3_sig_ack;
	slave_in3_sig_ack = ;
endfunction
function int slave_in3_sig_data;
	slave_in3_sig_data = ;
endfunction
function bus_req_t slave_out0_sig;
	slave_out0_sig = ;
endfunction
function int slave_out0_sig_addr;
	slave_out0_sig_addr = ;
endfunction
function int slave_out0_sig_data;
	slave_out0_sig_data = ;
endfunction
function trans_t slave_out0_sig_trans_type;
	slave_out0_sig_trans_type = ;
endfunction
function bus_req_t slave_out1_sig;
	slave_out1_sig = ;
endfunction
function int slave_out1_sig_addr;
	slave_out1_sig_addr = ;
endfunction
function int slave_out1_sig_data;
	slave_out1_sig_data = ;
endfunction
function trans_t slave_out1_sig_trans_type;
	slave_out1_sig_trans_type = ;
endfunction
function bus_req_t slave_out2_sig;
	slave_out2_sig = ;
endfunction
function int slave_out2_sig_addr;
	slave_out2_sig_addr = ;
endfunction
function int slave_out2_sig_data;
	slave_out2_sig_data = ;
endfunction
function trans_t slave_out2_sig_trans_type;
	slave_out2_sig_trans_type = ;
endfunction
function bus_req_t slave_out3_sig;
	slave_out3_sig = ;
endfunction
function int slave_out3_sig_addr;
	slave_out3_sig_addr = ;
endfunction
function int slave_out3_sig_data;
	slave_out3_sig_data = ;
endfunction
function trans_t slave_out3_sig_trans_type;
	slave_out3_sig_trans_type = ;
endfunction

// VISIBLE REGISTERS //
function trans_t req_trans_type;
	req_trans_type = ;
endfunction
function ack_t resp_ack;
	resp_ack = ;
endfunction
function int resp_data;
	resp_data = ;
endfunction

// STATES //
function state_1;
	state_1 = ;
endfunction
function state_2;
	state_2 = ;
endfunction
function state_3;
	state_3 = ;
endfunction
function state_4;
	state_4 = ;
endfunction
function state_5;
	state_5 = ;
endfunction
function state_6;
	state_6 = ;
endfunction
function state_7;
	state_7 = ;
endfunction
function state_8;
	state_8 = ;
endfunction
function state_9;
	state_9 = ;
endfunction
function state_10;
	state_10 = ;
endfunction


////////////////////////////////////
//////////// Operations ////////////
////////////////////////////////////

sequence reset_sequence;
	//DESIGNER REFER TO MODEL RESET SIGNAL HERE
endsequence

property reset_p;
	reset_sequence |=>
	t ##0 state_1() and
	t ##0 req_trans_type() == SINGLE_READ and
	t ##0 resp_ack() == OK and
	t ##0 resp_data() == 0 and
	t ##0 master_in_notify() == 1 and
	t ##0 master_out_notify() == 0 and
	t ##0 slave_in0_notify() == 0 and
	t ##0 slave_in1_notify() == 0 and
	t ##0 slave_in2_notify() == 0 and
	t ##0 slave_in3_notify() == 0 and
	t ##0 slave_out0_notify() == 0 and
	t ##0 slave_out1_notify() == 0 and
	t ##0 slave_out2_notify() == 0 and
	t ##0 slave_out3_notify() == 0;
endproperty
reset_a: assert property (reset_p);



property state_10_22_p(o);
 bit[31:0] req_trans_type_0;
 bit[31:0] slave_in3_sig_ack_0;
	t ##0 hold(req_trans_type_0, req.trans_type()) and
	t ##0 hold(slave_in3_sig_ack_0, slave_in3_sig.ack()) and
	t ##0 state_10() and
	t ##0 slave_in3_sync() and
	t ##0 (SINGLE_WRITE == req_trans_type())
implies
	t_end(o) ##0 state_4() and
	t_end(o) ##0 master_out_sig_ack() == slave_in3_sig_ack_0 and
	t_end(o) ##0 master_out_sig_data() == 0 and
	t_end(o) ##0 req_trans_type() == req_trans_type_0 and
	t_end(o) ##0 resp_ack() == slave_in3_sig_ack_0 and
	t_end(o) ##0 resp_data() == 0 and
	during_o (t, 1, t_end(o), 0, master_in_notify() == 0) and
	during_o (t, 1, t_end(o), -1, master_out_notify() == 0) and
	t_end(o) ##0 master_out_notify() == 1 and
	during_o (t, 1, t_end(o), 0, slave_in0_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_in1_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_in2_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_in3_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_out0_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_out1_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_out2_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_out3_notify() == 0);
endproperty;
state_10_22_a: assert property (disable iff (reset) state_10_22_p(1)); //ASSIGN t_end offset here



property state_10_23_p(o);
 bit[31:0] req_trans_type_0;
 bit[31:0] slave_in3_sig_ack_0;
 bit[31:0] slave_in3_sig_data_0;
	t ##0 hold(req_trans_type_0, req.trans_type()) and
	t ##0 hold(slave_in3_sig_ack_0, slave_in3_sig.ack()) and
	t ##0 hold(slave_in3_sig_data_0, slave_in3_sig.data()) and
	t ##0 state_10() and
	t ##0 slave_in3_sync() and
	t ##0 !((SINGLE_WRITE == req_trans_type()))
implies
	t_end(o) ##0 state_4() and
	t_end(o) ##0 master_out_sig_ack() == slave_in3_sig_ack_0 and
	t_end(o) ##0 master_out_sig_data() == slave_in3_sig_data_0 and
	t_end(o) ##0 req_trans_type() == req_trans_type_0 and
	t_end(o) ##0 resp_ack() == slave_in3_sig_ack_0 and
	t_end(o) ##0 resp_data() == slave_in3_sig_data_0 and
	during_o (t, 1, t_end(o), 0, master_in_notify() == 0) and
	during_o (t, 1, t_end(o), -1, master_out_notify() == 0) and
	t_end(o) ##0 master_out_notify() == 1 and
	during_o (t, 1, t_end(o), 0, slave_in0_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_in1_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_in2_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_in3_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_out0_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_out1_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_out2_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_out3_notify() == 0);
endproperty;
state_10_23_a: assert property (disable iff (reset) state_10_23_p(1)); //ASSIGN t_end offset here



property state_1_1_p(o);
 bit[31:0] master_in_sig_addr_0;
 bit[31:0] master_in_sig_trans_type_0;
 bit[31:0] resp_ack_0;
 bit[31:0] resp_data_0;
	t ##0 hold(master_in_sig_addr_0, master_in_sig.addr()) and
	t ##0 hold(master_in_sig_trans_type_0, master_in_sig.trans_type()) and
	t ##0 hold(resp_ack_0, resp.ack()) and
	t ##0 hold(resp_data_0, resp.data()) and
	t ##0 state_1() and
	t ##0 master_in_sync() and
	t ##0 (SINGLE_READ == master_in_sig_trans_type()) and
	t ##0 (master_in_sig_addr() >= 0) and
	t ##0 (master_in_sig_addr() <= 7)
implies
	t_end(o) ##0 state_2() and
	t_end(o) ##0 req_trans_type() == master_in_sig_trans_type_0 and
	t_end(o) ##0 resp_ack() == resp_ack_0 and
	t_end(o) ##0 resp_data() == resp_data_0 and
	t_end(o) ##0 slave_out0_sig_addr() == master_in_sig_addr_0 and
	t_end(o) ##0 slave_out0_sig_data() == 0 and
	t_end(o) ##0 slave_out0_sig_trans_type() == master_in_sig_trans_type_0 and
	during_o (t, 1, t_end(o), 0, master_in_notify() == 0) and
	during_o (t, 1, t_end(o), 0, master_out_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_in0_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_in1_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_in2_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_in3_notify() == 0) and
	during_o (t, 1, t_end(o), -1, slave_out0_notify() == 0) and
	t_end(o) ##0 slave_out0_notify() == 1 and
	during_o (t, 1, t_end(o), 0, slave_out1_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_out2_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_out3_notify() == 0);
endproperty;
state_1_1_a: assert property (disable iff (reset) state_1_1_p(1)); //ASSIGN t_end offset here



property state_1_10_p(o);
 bit[31:0] master_in_sig_trans_type_0;
 bit[31:0] resp_ack_0;
	t ##0 hold(master_in_sig_trans_type_0, master_in_sig.trans_type()) and
	t ##0 hold(resp_ack_0, resp.ack()) and
	t ##0 state_1() and
	t ##0 master_in_sync() and
	t ##0 !(((master_in_sig_addr() >= 0) && !((8 <= master_in_sig_addr())))) and
	t ##0 !(((master_in_sig_addr() >= 8) && !((16 <= master_in_sig_addr())))) and
	t ##0 !(((master_in_sig_addr() >= 16) && !((24 <= master_in_sig_addr())))) and
	t ##0 !(((master_in_sig_addr() >= 24) && !((32 <= master_in_sig_addr())))) and
	t ##0 (SINGLE_WRITE == master_in_sig_trans_type())
implies
	t_end(o) ##0 state_4() and
	t_end(o) ##0 master_out_sig_ack() == resp_ack_0 and
	t_end(o) ##0 master_out_sig_data() == 0 and
	t_end(o) ##0 req_trans_type() == master_in_sig_trans_type_0 and
	t_end(o) ##0 resp_ack() == resp_ack_0 and
	t_end(o) ##0 resp_data() == 0 and
	during_o (t, 1, t_end(o), 0, master_in_notify() == 0) and
	during_o (t, 1, t_end(o), -1, master_out_notify() == 0) and
	t_end(o) ##0 master_out_notify() == 1 and
	during_o (t, 1, t_end(o), 0, slave_in0_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_in1_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_in2_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_in3_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_out0_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_out1_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_out2_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_out3_notify() == 0);
endproperty;
state_1_10_a: assert property (disable iff (reset) state_1_10_p(1)); //ASSIGN t_end offset here



property state_1_2_p(o);
 bit[31:0] master_in_sig_addr_0;
 bit[31:0] master_in_sig_trans_type_0;
 bit[31:0] resp_ack_0;
 bit[31:0] resp_data_0;
	t ##0 hold(master_in_sig_addr_0, master_in_sig.addr()) and
	t ##0 hold(master_in_sig_trans_type_0, master_in_sig.trans_type()) and
	t ##0 hold(resp_ack_0, resp.ack()) and
	t ##0 hold(resp_data_0, resp.data()) and
	t ##0 state_1() and
	t ##0 master_in_sync() and
	t ##0 (SINGLE_READ == master_in_sig_trans_type()) and
	t ##0 (master_in_sig_addr() >= 8) and
	t ##0 (master_in_sig_addr() <= 15)
implies
	t_end(o) ##0 state_5() and
	t_end(o) ##0 req_trans_type() == master_in_sig_trans_type_0 and
	t_end(o) ##0 resp_ack() == resp_ack_0 and
	t_end(o) ##0 resp_data() == resp_data_0 and
	t_end(o) ##0 slave_out1_sig_addr() == (-8 + master_in_sig_addr_0) and
	t_end(o) ##0 slave_out1_sig_data() == 0 and
	t_end(o) ##0 slave_out1_sig_trans_type() == master_in_sig_trans_type_0 and
	during_o (t, 1, t_end(o), 0, master_in_notify() == 0) and
	during_o (t, 1, t_end(o), 0, master_out_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_in0_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_in1_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_in2_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_in3_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_out0_notify() == 0) and
	during_o (t, 1, t_end(o), -1, slave_out1_notify() == 0) and
	t_end(o) ##0 slave_out1_notify() == 1 and
	during_o (t, 1, t_end(o), 0, slave_out2_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_out3_notify() == 0);
endproperty;
state_1_2_a: assert property (disable iff (reset) state_1_2_p(1)); //ASSIGN t_end offset here



property state_1_3_p(o);
 bit[31:0] master_in_sig_addr_0;
 bit[31:0] master_in_sig_trans_type_0;
 bit[31:0] resp_ack_0;
 bit[31:0] resp_data_0;
	t ##0 hold(master_in_sig_addr_0, master_in_sig.addr()) and
	t ##0 hold(master_in_sig_trans_type_0, master_in_sig.trans_type()) and
	t ##0 hold(resp_ack_0, resp.ack()) and
	t ##0 hold(resp_data_0, resp.data()) and
	t ##0 state_1() and
	t ##0 master_in_sync() and
	t ##0 (SINGLE_READ == master_in_sig_trans_type()) and
	t ##0 (master_in_sig_addr() >= 16) and
	t ##0 (master_in_sig_addr() <= 23)
implies
	t_end(o) ##0 state_7() and
	t_end(o) ##0 req_trans_type() == master_in_sig_trans_type_0 and
	t_end(o) ##0 resp_ack() == resp_ack_0 and
	t_end(o) ##0 resp_data() == resp_data_0 and
	t_end(o) ##0 slave_out2_sig_addr() == (-16 + master_in_sig_addr_0) and
	t_end(o) ##0 slave_out2_sig_data() == 0 and
	t_end(o) ##0 slave_out2_sig_trans_type() == master_in_sig_trans_type_0 and
	during_o (t, 1, t_end(o), 0, master_in_notify() == 0) and
	during_o (t, 1, t_end(o), 0, master_out_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_in0_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_in1_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_in2_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_in3_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_out0_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_out1_notify() == 0) and
	during_o (t, 1, t_end(o), -1, slave_out2_notify() == 0) and
	t_end(o) ##0 slave_out2_notify() == 1 and
	during_o (t, 1, t_end(o), 0, slave_out3_notify() == 0);
endproperty;
state_1_3_a: assert property (disable iff (reset) state_1_3_p(1)); //ASSIGN t_end offset here



property state_1_4_p(o);
 bit[31:0] master_in_sig_addr_0;
 bit[31:0] master_in_sig_trans_type_0;
 bit[31:0] resp_ack_0;
 bit[31:0] resp_data_0;
	t ##0 hold(master_in_sig_addr_0, master_in_sig.addr()) and
	t ##0 hold(master_in_sig_trans_type_0, master_in_sig.trans_type()) and
	t ##0 hold(resp_ack_0, resp.ack()) and
	t ##0 hold(resp_data_0, resp.data()) and
	t ##0 state_1() and
	t ##0 master_in_sync() and
	t ##0 (SINGLE_READ == master_in_sig_trans_type()) and
	t ##0 (master_in_sig_addr() >= 24) and
	t ##0 (master_in_sig_addr() <= 31)
implies
	t_end(o) ##0 state_9() and
	t_end(o) ##0 req_trans_type() == master_in_sig_trans_type_0 and
	t_end(o) ##0 resp_ack() == resp_ack_0 and
	t_end(o) ##0 resp_data() == resp_data_0 and
	t_end(o) ##0 slave_out3_sig_addr() == (-24 + master_in_sig_addr_0) and
	t_end(o) ##0 slave_out3_sig_data() == 0 and
	t_end(o) ##0 slave_out3_sig_trans_type() == master_in_sig_trans_type_0 and
	during_o (t, 1, t_end(o), 0, master_in_notify() == 0) and
	during_o (t, 1, t_end(o), 0, master_out_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_in0_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_in1_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_in2_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_in3_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_out0_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_out1_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_out2_notify() == 0) and
	during_o (t, 1, t_end(o), -1, slave_out3_notify() == 0) and
	t_end(o) ##0 slave_out3_notify() == 1;
endproperty;
state_1_4_a: assert property (disable iff (reset) state_1_4_p(1)); //ASSIGN t_end offset here



property state_1_5_p(o);
 bit[31:0] master_in_sig_trans_type_0;
 bit[31:0] resp_ack_0;
 bit[31:0] resp_data_0;
	t ##0 hold(master_in_sig_trans_type_0, master_in_sig.trans_type()) and
	t ##0 hold(resp_ack_0, resp.ack()) and
	t ##0 hold(resp_data_0, resp.data()) and
	t ##0 state_1() and
	t ##0 master_in_sync() and
	t ##0 (SINGLE_READ == master_in_sig_trans_type()) and
	t ##0 !(((master_in_sig_addr() >= 0) && !((8 <= master_in_sig_addr())))) and
	t ##0 !(((master_in_sig_addr() >= 8) && !((16 <= master_in_sig_addr())))) and
	t ##0 !(((master_in_sig_addr() >= 16) && !((24 <= master_in_sig_addr())))) and
	t ##0 !(((master_in_sig_addr() >= 24) && !((32 <= master_in_sig_addr()))))
implies
	t_end(o) ##0 state_4() and
	t_end(o) ##0 master_out_sig_ack() == resp_ack_0 and
	t_end(o) ##0 master_out_sig_data() == resp_data_0 and
	t_end(o) ##0 req_trans_type() == master_in_sig_trans_type_0 and
	t_end(o) ##0 resp_ack() == resp_ack_0 and
	t_end(o) ##0 resp_data() == resp_data_0 and
	during_o (t, 1, t_end(o), 0, master_in_notify() == 0) and
	during_o (t, 1, t_end(o), -1, master_out_notify() == 0) and
	t_end(o) ##0 master_out_notify() == 1 and
	during_o (t, 1, t_end(o), 0, slave_in0_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_in1_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_in2_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_in3_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_out0_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_out1_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_out2_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_out3_notify() == 0);
endproperty;
state_1_5_a: assert property (disable iff (reset) state_1_5_p(1)); //ASSIGN t_end offset here



property state_1_6_p(o);
 bit[31:0] master_in_sig_addr_0;
 bit[31:0] master_in_sig_data_0;
 bit[31:0] master_in_sig_trans_type_0;
 bit[31:0] resp_ack_0;
 bit[31:0] resp_data_0;
	t ##0 hold(master_in_sig_addr_0, master_in_sig.addr()) and
	t ##0 hold(master_in_sig_data_0, master_in_sig.data()) and
	t ##0 hold(master_in_sig_trans_type_0, master_in_sig.trans_type()) and
	t ##0 hold(resp_ack_0, resp.ack()) and
	t ##0 hold(resp_data_0, resp.data()) and
	t ##0 state_1() and
	t ##0 master_in_sync() and
	t ##0 !((SINGLE_READ == master_in_sig_trans_type())) and
	t ##0 (master_in_sig_addr() >= 0) and
	t ##0 (master_in_sig_addr() <= 7)
implies
	t_end(o) ##0 state_2() and
	t_end(o) ##0 req_trans_type() == master_in_sig_trans_type_0 and
	t_end(o) ##0 resp_ack() == resp_ack_0 and
	t_end(o) ##0 resp_data() == resp_data_0 and
	t_end(o) ##0 slave_out0_sig_addr() == master_in_sig_addr_0 and
	t_end(o) ##0 slave_out0_sig_data() == master_in_sig_data_0 and
	t_end(o) ##0 slave_out0_sig_trans_type() == master_in_sig_trans_type_0 and
	during_o (t, 1, t_end(o), 0, master_in_notify() == 0) and
	during_o (t, 1, t_end(o), 0, master_out_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_in0_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_in1_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_in2_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_in3_notify() == 0) and
	during_o (t, 1, t_end(o), -1, slave_out0_notify() == 0) and
	t_end(o) ##0 slave_out0_notify() == 1 and
	during_o (t, 1, t_end(o), 0, slave_out1_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_out2_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_out3_notify() == 0);
endproperty;
state_1_6_a: assert property (disable iff (reset) state_1_6_p(1)); //ASSIGN t_end offset here



property state_1_7_p(o);
 bit[31:0] master_in_sig_addr_0;
 bit[31:0] master_in_sig_data_0;
 bit[31:0] master_in_sig_trans_type_0;
 bit[31:0] resp_ack_0;
 bit[31:0] resp_data_0;
	t ##0 hold(master_in_sig_addr_0, master_in_sig.addr()) and
	t ##0 hold(master_in_sig_data_0, master_in_sig.data()) and
	t ##0 hold(master_in_sig_trans_type_0, master_in_sig.trans_type()) and
	t ##0 hold(resp_ack_0, resp.ack()) and
	t ##0 hold(resp_data_0, resp.data()) and
	t ##0 state_1() and
	t ##0 master_in_sync() and
	t ##0 !((SINGLE_READ == master_in_sig_trans_type())) and
	t ##0 (master_in_sig_addr() >= 8) and
	t ##0 (master_in_sig_addr() <= 15)
implies
	t_end(o) ##0 state_5() and
	t_end(o) ##0 req_trans_type() == master_in_sig_trans_type_0 and
	t_end(o) ##0 resp_ack() == resp_ack_0 and
	t_end(o) ##0 resp_data() == resp_data_0 and
	t_end(o) ##0 slave_out1_sig_addr() == (-8 + master_in_sig_addr_0) and
	t_end(o) ##0 slave_out1_sig_data() == master_in_sig_data_0 and
	t_end(o) ##0 slave_out1_sig_trans_type() == master_in_sig_trans_type_0 and
	during_o (t, 1, t_end(o), 0, master_in_notify() == 0) and
	during_o (t, 1, t_end(o), 0, master_out_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_in0_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_in1_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_in2_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_in3_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_out0_notify() == 0) and
	during_o (t, 1, t_end(o), -1, slave_out1_notify() == 0) and
	t_end(o) ##0 slave_out1_notify() == 1 and
	during_o (t, 1, t_end(o), 0, slave_out2_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_out3_notify() == 0);
endproperty;
state_1_7_a: assert property (disable iff (reset) state_1_7_p(1)); //ASSIGN t_end offset here



property state_1_8_p(o);
 bit[31:0] master_in_sig_addr_0;
 bit[31:0] master_in_sig_data_0;
 bit[31:0] master_in_sig_trans_type_0;
 bit[31:0] resp_ack_0;
 bit[31:0] resp_data_0;
	t ##0 hold(master_in_sig_addr_0, master_in_sig.addr()) and
	t ##0 hold(master_in_sig_data_0, master_in_sig.data()) and
	t ##0 hold(master_in_sig_trans_type_0, master_in_sig.trans_type()) and
	t ##0 hold(resp_ack_0, resp.ack()) and
	t ##0 hold(resp_data_0, resp.data()) and
	t ##0 state_1() and
	t ##0 master_in_sync() and
	t ##0 !((SINGLE_READ == master_in_sig_trans_type())) and
	t ##0 (master_in_sig_addr() >= 16) and
	t ##0 (master_in_sig_addr() <= 23)
implies
	t_end(o) ##0 state_7() and
	t_end(o) ##0 req_trans_type() == master_in_sig_trans_type_0 and
	t_end(o) ##0 resp_ack() == resp_ack_0 and
	t_end(o) ##0 resp_data() == resp_data_0 and
	t_end(o) ##0 slave_out2_sig_addr() == (-16 + master_in_sig_addr_0) and
	t_end(o) ##0 slave_out2_sig_data() == master_in_sig_data_0 and
	t_end(o) ##0 slave_out2_sig_trans_type() == master_in_sig_trans_type_0 and
	during_o (t, 1, t_end(o), 0, master_in_notify() == 0) and
	during_o (t, 1, t_end(o), 0, master_out_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_in0_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_in1_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_in2_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_in3_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_out0_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_out1_notify() == 0) and
	during_o (t, 1, t_end(o), -1, slave_out2_notify() == 0) and
	t_end(o) ##0 slave_out2_notify() == 1 and
	during_o (t, 1, t_end(o), 0, slave_out3_notify() == 0);
endproperty;
state_1_8_a: assert property (disable iff (reset) state_1_8_p(1)); //ASSIGN t_end offset here



property state_1_9_p(o);
 bit[31:0] master_in_sig_addr_0;
 bit[31:0] master_in_sig_data_0;
 bit[31:0] master_in_sig_trans_type_0;
 bit[31:0] resp_ack_0;
 bit[31:0] resp_data_0;
	t ##0 hold(master_in_sig_addr_0, master_in_sig.addr()) and
	t ##0 hold(master_in_sig_data_0, master_in_sig.data()) and
	t ##0 hold(master_in_sig_trans_type_0, master_in_sig.trans_type()) and
	t ##0 hold(resp_ack_0, resp.ack()) and
	t ##0 hold(resp_data_0, resp.data()) and
	t ##0 state_1() and
	t ##0 master_in_sync() and
	t ##0 !((SINGLE_READ == master_in_sig_trans_type())) and
	t ##0 (master_in_sig_addr() >= 24) and
	t ##0 (master_in_sig_addr() <= 31)
implies
	t_end(o) ##0 state_9() and
	t_end(o) ##0 req_trans_type() == master_in_sig_trans_type_0 and
	t_end(o) ##0 resp_ack() == resp_ack_0 and
	t_end(o) ##0 resp_data() == resp_data_0 and
	t_end(o) ##0 slave_out3_sig_addr() == (-24 + master_in_sig_addr_0) and
	t_end(o) ##0 slave_out3_sig_data() == master_in_sig_data_0 and
	t_end(o) ##0 slave_out3_sig_trans_type() == master_in_sig_trans_type_0 and
	during_o (t, 1, t_end(o), 0, master_in_notify() == 0) and
	during_o (t, 1, t_end(o), 0, master_out_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_in0_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_in1_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_in2_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_in3_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_out0_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_out1_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_out2_notify() == 0) and
	during_o (t, 1, t_end(o), -1, slave_out3_notify() == 0) and
	t_end(o) ##0 slave_out3_notify() == 1;
endproperty;
state_1_9_a: assert property (disable iff (reset) state_1_9_p(1)); //ASSIGN t_end offset here



property state_2_11_p(o);
 bit[31:0] req_trans_type_0;
 bit[31:0] resp_ack_0;
 bit[31:0] resp_data_0;
	t ##0 hold(req_trans_type_0, req.trans_type()) and
	t ##0 hold(resp_ack_0, resp.ack()) and
	t ##0 hold(resp_data_0, resp.data()) and
	t ##0 state_2() and
	t ##0 slave_out0_sync()
implies
	t_end(o) ##0 state_3() and
	t_end(o) ##0 req_trans_type() == req_trans_type_0 and
	t_end(o) ##0 resp_ack() == resp_ack_0 and
	t_end(o) ##0 resp_data() == resp_data_0 and
	during_o (t, 1, t_end(o), 0, master_in_notify() == 0) and
	during_o (t, 1, t_end(o), 0, master_out_notify() == 0) and
	during_o (t, 1, t_end(o), -1, slave_in0_notify() == 0) and
	t_end(o) ##0 slave_in0_notify() == 1 and
	during_o (t, 1, t_end(o), 0, slave_in1_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_in2_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_in3_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_out0_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_out1_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_out2_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_out3_notify() == 0);
endproperty;
state_2_11_a: assert property (disable iff (reset) state_2_11_p(1)); //ASSIGN t_end offset here



property state_3_12_p(o);
 bit[31:0] req_trans_type_0;
 bit[31:0] slave_in0_sig_ack_0;
	t ##0 hold(req_trans_type_0, req.trans_type()) and
	t ##0 hold(slave_in0_sig_ack_0, slave_in0_sig.ack()) and
	t ##0 state_3() and
	t ##0 slave_in0_sync() and
	t ##0 (SINGLE_WRITE == req_trans_type())
implies
	t_end(o) ##0 state_4() and
	t_end(o) ##0 master_out_sig_ack() == slave_in0_sig_ack_0 and
	t_end(o) ##0 master_out_sig_data() == 0 and
	t_end(o) ##0 req_trans_type() == req_trans_type_0 and
	t_end(o) ##0 resp_ack() == slave_in0_sig_ack_0 and
	t_end(o) ##0 resp_data() == 0 and
	during_o (t, 1, t_end(o), 0, master_in_notify() == 0) and
	during_o (t, 1, t_end(o), -1, master_out_notify() == 0) and
	t_end(o) ##0 master_out_notify() == 1 and
	during_o (t, 1, t_end(o), 0, slave_in0_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_in1_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_in2_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_in3_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_out0_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_out1_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_out2_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_out3_notify() == 0);
endproperty;
state_3_12_a: assert property (disable iff (reset) state_3_12_p(1)); //ASSIGN t_end offset here



property state_3_13_p(o);
 bit[31:0] req_trans_type_0;
 bit[31:0] slave_in0_sig_ack_0;
 bit[31:0] slave_in0_sig_data_0;
	t ##0 hold(req_trans_type_0, req.trans_type()) and
	t ##0 hold(slave_in0_sig_ack_0, slave_in0_sig.ack()) and
	t ##0 hold(slave_in0_sig_data_0, slave_in0_sig.data()) and
	t ##0 state_3() and
	t ##0 slave_in0_sync() and
	t ##0 !((SINGLE_WRITE == req_trans_type()))
implies
	t_end(o) ##0 state_4() and
	t_end(o) ##0 master_out_sig_ack() == slave_in0_sig_ack_0 and
	t_end(o) ##0 master_out_sig_data() == slave_in0_sig_data_0 and
	t_end(o) ##0 req_trans_type() == req_trans_type_0 and
	t_end(o) ##0 resp_ack() == slave_in0_sig_ack_0 and
	t_end(o) ##0 resp_data() == slave_in0_sig_data_0 and
	during_o (t, 1, t_end(o), 0, master_in_notify() == 0) and
	during_o (t, 1, t_end(o), -1, master_out_notify() == 0) and
	t_end(o) ##0 master_out_notify() == 1 and
	during_o (t, 1, t_end(o), 0, slave_in0_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_in1_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_in2_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_in3_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_out0_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_out1_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_out2_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_out3_notify() == 0);
endproperty;
state_3_13_a: assert property (disable iff (reset) state_3_13_p(1)); //ASSIGN t_end offset here



property state_4_14_p(o);
 bit[31:0] req_trans_type_0;
 bit[31:0] resp_ack_0;
 bit[31:0] resp_data_0;
	t ##0 hold(req_trans_type_0, req.trans_type()) and
	t ##0 hold(resp_ack_0, resp.ack()) and
	t ##0 hold(resp_data_0, resp.data()) and
	t ##0 state_4() and
	t ##0 master_out_sync()
implies
	t_end(o) ##0 state_1() and
	t_end(o) ##0 req_trans_type() == req_trans_type_0 and
	t_end(o) ##0 resp_ack() == resp_ack_0 and
	t_end(o) ##0 resp_data() == resp_data_0 and
	during_o (t, 1, t_end(o), -1, master_in_notify() == 0) and
	t_end(o) ##0 master_in_notify() == 1 and
	during_o (t, 1, t_end(o), 0, master_out_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_in0_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_in1_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_in2_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_in3_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_out0_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_out1_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_out2_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_out3_notify() == 0);
endproperty;
state_4_14_a: assert property (disable iff (reset) state_4_14_p(1)); //ASSIGN t_end offset here



property state_5_15_p(o);
 bit[31:0] req_trans_type_0;
 bit[31:0] resp_ack_0;
 bit[31:0] resp_data_0;
	t ##0 hold(req_trans_type_0, req.trans_type()) and
	t ##0 hold(resp_ack_0, resp.ack()) and
	t ##0 hold(resp_data_0, resp.data()) and
	t ##0 state_5() and
	t ##0 slave_out1_sync()
implies
	t_end(o) ##0 state_6() and
	t_end(o) ##0 req_trans_type() == req_trans_type_0 and
	t_end(o) ##0 resp_ack() == resp_ack_0 and
	t_end(o) ##0 resp_data() == resp_data_0 and
	during_o (t, 1, t_end(o), 0, master_in_notify() == 0) and
	during_o (t, 1, t_end(o), 0, master_out_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_in0_notify() == 0) and
	during_o (t, 1, t_end(o), -1, slave_in1_notify() == 0) and
	t_end(o) ##0 slave_in1_notify() == 1 and
	during_o (t, 1, t_end(o), 0, slave_in2_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_in3_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_out0_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_out1_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_out2_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_out3_notify() == 0);
endproperty;
state_5_15_a: assert property (disable iff (reset) state_5_15_p(1)); //ASSIGN t_end offset here



property state_6_16_p(o);
 bit[31:0] req_trans_type_0;
 bit[31:0] slave_in1_sig_ack_0;
	t ##0 hold(req_trans_type_0, req.trans_type()) and
	t ##0 hold(slave_in1_sig_ack_0, slave_in1_sig.ack()) and
	t ##0 state_6() and
	t ##0 slave_in1_sync() and
	t ##0 (SINGLE_WRITE == req_trans_type())
implies
	t_end(o) ##0 state_4() and
	t_end(o) ##0 master_out_sig_ack() == slave_in1_sig_ack_0 and
	t_end(o) ##0 master_out_sig_data() == 0 and
	t_end(o) ##0 req_trans_type() == req_trans_type_0 and
	t_end(o) ##0 resp_ack() == slave_in1_sig_ack_0 and
	t_end(o) ##0 resp_data() == 0 and
	during_o (t, 1, t_end(o), 0, master_in_notify() == 0) and
	during_o (t, 1, t_end(o), -1, master_out_notify() == 0) and
	t_end(o) ##0 master_out_notify() == 1 and
	during_o (t, 1, t_end(o), 0, slave_in0_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_in1_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_in2_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_in3_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_out0_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_out1_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_out2_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_out3_notify() == 0);
endproperty;
state_6_16_a: assert property (disable iff (reset) state_6_16_p(1)); //ASSIGN t_end offset here



property state_6_17_p(o);
 bit[31:0] req_trans_type_0;
 bit[31:0] slave_in1_sig_ack_0;
 bit[31:0] slave_in1_sig_data_0;
	t ##0 hold(req_trans_type_0, req.trans_type()) and
	t ##0 hold(slave_in1_sig_ack_0, slave_in1_sig.ack()) and
	t ##0 hold(slave_in1_sig_data_0, slave_in1_sig.data()) and
	t ##0 state_6() and
	t ##0 slave_in1_sync() and
	t ##0 !((SINGLE_WRITE == req_trans_type()))
implies
	t_end(o) ##0 state_4() and
	t_end(o) ##0 master_out_sig_ack() == slave_in1_sig_ack_0 and
	t_end(o) ##0 master_out_sig_data() == slave_in1_sig_data_0 and
	t_end(o) ##0 req_trans_type() == req_trans_type_0 and
	t_end(o) ##0 resp_ack() == slave_in1_sig_ack_0 and
	t_end(o) ##0 resp_data() == slave_in1_sig_data_0 and
	during_o (t, 1, t_end(o), 0, master_in_notify() == 0) and
	during_o (t, 1, t_end(o), -1, master_out_notify() == 0) and
	t_end(o) ##0 master_out_notify() == 1 and
	during_o (t, 1, t_end(o), 0, slave_in0_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_in1_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_in2_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_in3_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_out0_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_out1_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_out2_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_out3_notify() == 0);
endproperty;
state_6_17_a: assert property (disable iff (reset) state_6_17_p(1)); //ASSIGN t_end offset here



property state_7_18_p(o);
 bit[31:0] req_trans_type_0;
 bit[31:0] resp_ack_0;
 bit[31:0] resp_data_0;
	t ##0 hold(req_trans_type_0, req.trans_type()) and
	t ##0 hold(resp_ack_0, resp.ack()) and
	t ##0 hold(resp_data_0, resp.data()) and
	t ##0 state_7() and
	t ##0 slave_out2_sync()
implies
	t_end(o) ##0 state_8() and
	t_end(o) ##0 req_trans_type() == req_trans_type_0 and
	t_end(o) ##0 resp_ack() == resp_ack_0 and
	t_end(o) ##0 resp_data() == resp_data_0 and
	during_o (t, 1, t_end(o), 0, master_in_notify() == 0) and
	during_o (t, 1, t_end(o), 0, master_out_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_in0_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_in1_notify() == 0) and
	during_o (t, 1, t_end(o), -1, slave_in2_notify() == 0) and
	t_end(o) ##0 slave_in2_notify() == 1 and
	during_o (t, 1, t_end(o), 0, slave_in3_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_out0_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_out1_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_out2_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_out3_notify() == 0);
endproperty;
state_7_18_a: assert property (disable iff (reset) state_7_18_p(1)); //ASSIGN t_end offset here



property state_8_19_p(o);
 bit[31:0] req_trans_type_0;
 bit[31:0] slave_in2_sig_ack_0;
	t ##0 hold(req_trans_type_0, req.trans_type()) and
	t ##0 hold(slave_in2_sig_ack_0, slave_in2_sig.ack()) and
	t ##0 state_8() and
	t ##0 slave_in2_sync() and
	t ##0 (SINGLE_WRITE == req_trans_type())
implies
	t_end(o) ##0 state_4() and
	t_end(o) ##0 master_out_sig_ack() == slave_in2_sig_ack_0 and
	t_end(o) ##0 master_out_sig_data() == 0 and
	t_end(o) ##0 req_trans_type() == req_trans_type_0 and
	t_end(o) ##0 resp_ack() == slave_in2_sig_ack_0 and
	t_end(o) ##0 resp_data() == 0 and
	during_o (t, 1, t_end(o), 0, master_in_notify() == 0) and
	during_o (t, 1, t_end(o), -1, master_out_notify() == 0) and
	t_end(o) ##0 master_out_notify() == 1 and
	during_o (t, 1, t_end(o), 0, slave_in0_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_in1_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_in2_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_in3_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_out0_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_out1_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_out2_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_out3_notify() == 0);
endproperty;
state_8_19_a: assert property (disable iff (reset) state_8_19_p(1)); //ASSIGN t_end offset here



property state_8_20_p(o);
 bit[31:0] req_trans_type_0;
 bit[31:0] slave_in2_sig_ack_0;
 bit[31:0] slave_in2_sig_data_0;
	t ##0 hold(req_trans_type_0, req.trans_type()) and
	t ##0 hold(slave_in2_sig_ack_0, slave_in2_sig.ack()) and
	t ##0 hold(slave_in2_sig_data_0, slave_in2_sig.data()) and
	t ##0 state_8() and
	t ##0 slave_in2_sync() and
	t ##0 !((SINGLE_WRITE == req_trans_type()))
implies
	t_end(o) ##0 state_4() and
	t_end(o) ##0 master_out_sig_ack() == slave_in2_sig_ack_0 and
	t_end(o) ##0 master_out_sig_data() == slave_in2_sig_data_0 and
	t_end(o) ##0 req_trans_type() == req_trans_type_0 and
	t_end(o) ##0 resp_ack() == slave_in2_sig_ack_0 and
	t_end(o) ##0 resp_data() == slave_in2_sig_data_0 and
	during_o (t, 1, t_end(o), 0, master_in_notify() == 0) and
	during_o (t, 1, t_end(o), -1, master_out_notify() == 0) and
	t_end(o) ##0 master_out_notify() == 1 and
	during_o (t, 1, t_end(o), 0, slave_in0_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_in1_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_in2_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_in3_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_out0_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_out1_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_out2_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_out3_notify() == 0);
endproperty;
state_8_20_a: assert property (disable iff (reset) state_8_20_p(1)); //ASSIGN t_end offset here



property state_9_21_p(o);
 bit[31:0] req_trans_type_0;
 bit[31:0] resp_ack_0;
 bit[31:0] resp_data_0;
	t ##0 hold(req_trans_type_0, req.trans_type()) and
	t ##0 hold(resp_ack_0, resp.ack()) and
	t ##0 hold(resp_data_0, resp.data()) and
	t ##0 state_9() and
	t ##0 slave_out3_sync()
implies
	t_end(o) ##0 state_10() and
	t_end(o) ##0 req_trans_type() == req_trans_type_0 and
	t_end(o) ##0 resp_ack() == resp_ack_0 and
	t_end(o) ##0 resp_data() == resp_data_0 and
	during_o (t, 1, t_end(o), 0, master_in_notify() == 0) and
	during_o (t, 1, t_end(o), 0, master_out_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_in0_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_in1_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_in2_notify() == 0) and
	during_o (t, 1, t_end(o), -1, slave_in3_notify() == 0) and
	t_end(o) ##0 slave_in3_notify() == 1 and
	during_o (t, 1, t_end(o), 0, slave_out0_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_out1_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_out2_notify() == 0) and
	during_o (t, 1, t_end(o), 0, slave_out3_notify() == 0);
endproperty;
state_9_21_a: assert property (disable iff (reset) state_9_21_p(1)); //ASSIGN t_end offset here



property wait_state_1_p(o);
 bit[31:0] req_trans_type_0;
 bit[31:0] resp_ack_0;
 bit[31:0] resp_data_0;
	t ##0 hold(req_trans_type_0, req.trans_type()) and
	t ##0 hold(resp_ack_0, resp.ack()) and
	t ##0 hold(resp_data_0, resp.data()) and
	t ##0 state_1() and
	t ##0 !(master_in_sync())
implies
	(t + 1) ##0 state_1() and
	(t + 1) ##0 req_trans_type() == req_trans_type_0 and
	(t + 1) ##0 resp_ack() == resp_ack_0 and
	(t + 1) ##0 resp_data() == resp_data_0 and
	(t + 1) ##0 master_in_notify() == 1 and
	(t + 1) ##0 master_out_notify() == 0 and
	(t + 1) ##0 slave_in0_notify() == 0 and
	(t + 1) ##0 slave_in1_notify() == 0 and
	(t + 1) ##0 slave_in2_notify() == 0 and
	(t + 1) ##0 slave_in3_notify() == 0 and
	(t + 1) ##0 slave_out0_notify() == 0 and
	(t + 1) ##0 slave_out1_notify() == 0 and
	(t + 1) ##0 slave_out2_notify() == 0 and
	(t + 1) ##0 slave_out3_notify() == 0;
endproperty;
wait_state_1_a: assert property (disable iff (reset) wait_state_1_p(1)); //ASSIGN t_end offset here



property wait_state_10_p(o);
 bit[31:0] req_trans_type_0;
 bit[31:0] resp_ack_0;
 bit[31:0] resp_data_0;
	t ##0 hold(req_trans_type_0, req.trans_type()) and
	t ##0 hold(resp_ack_0, resp.ack()) and
	t ##0 hold(resp_data_0, resp.data()) and
	t ##0 state_10() and
	t ##0 !(slave_in3_sync())
implies
	(t + 1) ##0 state_10() and
	(t + 1) ##0 req_trans_type() == req_trans_type_0 and
	(t + 1) ##0 resp_ack() == resp_ack_0 and
	(t + 1) ##0 resp_data() == resp_data_0 and
	(t + 1) ##0 master_in_notify() == 0 and
	(t + 1) ##0 master_out_notify() == 0 and
	(t + 1) ##0 slave_in0_notify() == 0 and
	(t + 1) ##0 slave_in1_notify() == 0 and
	(t + 1) ##0 slave_in2_notify() == 0 and
	(t + 1) ##0 slave_in3_notify() == 1 and
	(t + 1) ##0 slave_out0_notify() == 0 and
	(t + 1) ##0 slave_out1_notify() == 0 and
	(t + 1) ##0 slave_out2_notify() == 0 and
	(t + 1) ##0 slave_out3_notify() == 0;
endproperty;
wait_state_10_a: assert property (disable iff (reset) wait_state_10_p(1)); //ASSIGN t_end offset here



property wait_state_2_p(o);
 bit[31:0] req_trans_type_0;
 bit[31:0] resp_ack_0;
 bit[31:0] resp_data_0;
 bit[31:0] slave_out0_sig_0;
	t ##0 hold(req_trans_type_0, req.trans_type()) and
	t ##0 hold(resp_ack_0, resp.ack()) and
	t ##0 hold(resp_data_0, resp.data()) and
	t ##0 hold(slave_out0_sig_0, slave_out0_sig()) and
	t ##0 state_2() and
	t ##0 !(slave_out0_sync())
implies
	(t + 1) ##0 state_2() and
	(t + 1) ##0 req_trans_type() == req_trans_type_0 and
	(t + 1) ##0 resp_ack() == resp_ack_0 and
	(t + 1) ##0 resp_data() == resp_data_0 and
	(t + 1) ##0 slave_out0_sig() == slave_out0_sig_0 and
	(t + 1) ##0 master_in_notify() == 0 and
	(t + 1) ##0 master_out_notify() == 0 and
	(t + 1) ##0 slave_in0_notify() == 0 and
	(t + 1) ##0 slave_in1_notify() == 0 and
	(t + 1) ##0 slave_in2_notify() == 0 and
	(t + 1) ##0 slave_in3_notify() == 0 and
	(t + 1) ##0 slave_out0_notify() == 1 and
	(t + 1) ##0 slave_out1_notify() == 0 and
	(t + 1) ##0 slave_out2_notify() == 0 and
	(t + 1) ##0 slave_out3_notify() == 0;
endproperty;
wait_state_2_a: assert property (disable iff (reset) wait_state_2_p(1)); //ASSIGN t_end offset here



property wait_state_3_p(o);
 bit[31:0] req_trans_type_0;
 bit[31:0] resp_ack_0;
 bit[31:0] resp_data_0;
	t ##0 hold(req_trans_type_0, req.trans_type()) and
	t ##0 hold(resp_ack_0, resp.ack()) and
	t ##0 hold(resp_data_0, resp.data()) and
	t ##0 state_3() and
	t ##0 !(slave_in0_sync())
implies
	(t + 1) ##0 state_3() and
	(t + 1) ##0 req_trans_type() == req_trans_type_0 and
	(t + 1) ##0 resp_ack() == resp_ack_0 and
	(t + 1) ##0 resp_data() == resp_data_0 and
	(t + 1) ##0 master_in_notify() == 0 and
	(t + 1) ##0 master_out_notify() == 0 and
	(t + 1) ##0 slave_in0_notify() == 1 and
	(t + 1) ##0 slave_in1_notify() == 0 and
	(t + 1) ##0 slave_in2_notify() == 0 and
	(t + 1) ##0 slave_in3_notify() == 0 and
	(t + 1) ##0 slave_out0_notify() == 0 and
	(t + 1) ##0 slave_out1_notify() == 0 and
	(t + 1) ##0 slave_out2_notify() == 0 and
	(t + 1) ##0 slave_out3_notify() == 0;
endproperty;
wait_state_3_a: assert property (disable iff (reset) wait_state_3_p(1)); //ASSIGN t_end offset here



property wait_state_4_p(o);
 bit[31:0] master_out_sig_0;
 bit[31:0] req_trans_type_0;
 bit[31:0] resp_ack_0;
 bit[31:0] resp_data_0;
	t ##0 hold(master_out_sig_0, master_out_sig()) and
	t ##0 hold(req_trans_type_0, req.trans_type()) and
	t ##0 hold(resp_ack_0, resp.ack()) and
	t ##0 hold(resp_data_0, resp.data()) and
	t ##0 state_4() and
	t ##0 !(master_out_sync())
implies
	(t + 1) ##0 state_4() and
	(t + 1) ##0 master_out_sig() == master_out_sig_0 and
	(t + 1) ##0 req_trans_type() == req_trans_type_0 and
	(t + 1) ##0 resp_ack() == resp_ack_0 and
	(t + 1) ##0 resp_data() == resp_data_0 and
	(t + 1) ##0 master_in_notify() == 0 and
	(t + 1) ##0 master_out_notify() == 1 and
	(t + 1) ##0 slave_in0_notify() == 0 and
	(t + 1) ##0 slave_in1_notify() == 0 and
	(t + 1) ##0 slave_in2_notify() == 0 and
	(t + 1) ##0 slave_in3_notify() == 0 and
	(t + 1) ##0 slave_out0_notify() == 0 and
	(t + 1) ##0 slave_out1_notify() == 0 and
	(t + 1) ##0 slave_out2_notify() == 0 and
	(t + 1) ##0 slave_out3_notify() == 0;
endproperty;
wait_state_4_a: assert property (disable iff (reset) wait_state_4_p(1)); //ASSIGN t_end offset here



property wait_state_5_p(o);
 bit[31:0] req_trans_type_0;
 bit[31:0] resp_ack_0;
 bit[31:0] resp_data_0;
 bit[31:0] slave_out1_sig_0;
	t ##0 hold(req_trans_type_0, req.trans_type()) and
	t ##0 hold(resp_ack_0, resp.ack()) and
	t ##0 hold(resp_data_0, resp.data()) and
	t ##0 hold(slave_out1_sig_0, slave_out1_sig()) and
	t ##0 state_5() and
	t ##0 !(slave_out1_sync())
implies
	(t + 1) ##0 state_5() and
	(t + 1) ##0 req_trans_type() == req_trans_type_0 and
	(t + 1) ##0 resp_ack() == resp_ack_0 and
	(t + 1) ##0 resp_data() == resp_data_0 and
	(t + 1) ##0 slave_out1_sig() == slave_out1_sig_0 and
	(t + 1) ##0 master_in_notify() == 0 and
	(t + 1) ##0 master_out_notify() == 0 and
	(t + 1) ##0 slave_in0_notify() == 0 and
	(t + 1) ##0 slave_in1_notify() == 0 and
	(t + 1) ##0 slave_in2_notify() == 0 and
	(t + 1) ##0 slave_in3_notify() == 0 and
	(t + 1) ##0 slave_out0_notify() == 0 and
	(t + 1) ##0 slave_out1_notify() == 1 and
	(t + 1) ##0 slave_out2_notify() == 0 and
	(t + 1) ##0 slave_out3_notify() == 0;
endproperty;
wait_state_5_a: assert property (disable iff (reset) wait_state_5_p(1)); //ASSIGN t_end offset here



property wait_state_6_p(o);
 bit[31:0] req_trans_type_0;
 bit[31:0] resp_ack_0;
 bit[31:0] resp_data_0;
	t ##0 hold(req_trans_type_0, req.trans_type()) and
	t ##0 hold(resp_ack_0, resp.ack()) and
	t ##0 hold(resp_data_0, resp.data()) and
	t ##0 state_6() and
	t ##0 !(slave_in1_sync())
implies
	(t + 1) ##0 state_6() and
	(t + 1) ##0 req_trans_type() == req_trans_type_0 and
	(t + 1) ##0 resp_ack() == resp_ack_0 and
	(t + 1) ##0 resp_data() == resp_data_0 and
	(t + 1) ##0 master_in_notify() == 0 and
	(t + 1) ##0 master_out_notify() == 0 and
	(t + 1) ##0 slave_in0_notify() == 0 and
	(t + 1) ##0 slave_in1_notify() == 1 and
	(t + 1) ##0 slave_in2_notify() == 0 and
	(t + 1) ##0 slave_in3_notify() == 0 and
	(t + 1) ##0 slave_out0_notify() == 0 and
	(t + 1) ##0 slave_out1_notify() == 0 and
	(t + 1) ##0 slave_out2_notify() == 0 and
	(t + 1) ##0 slave_out3_notify() == 0;
endproperty;
wait_state_6_a: assert property (disable iff (reset) wait_state_6_p(1)); //ASSIGN t_end offset here



property wait_state_7_p(o);
 bit[31:0] req_trans_type_0;
 bit[31:0] resp_ack_0;
 bit[31:0] resp_data_0;
 bit[31:0] slave_out2_sig_0;
	t ##0 hold(req_trans_type_0, req.trans_type()) and
	t ##0 hold(resp_ack_0, resp.ack()) and
	t ##0 hold(resp_data_0, resp.data()) and
	t ##0 hold(slave_out2_sig_0, slave_out2_sig()) and
	t ##0 state_7() and
	t ##0 !(slave_out2_sync())
implies
	(t + 1) ##0 state_7() and
	(t + 1) ##0 req_trans_type() == req_trans_type_0 and
	(t + 1) ##0 resp_ack() == resp_ack_0 and
	(t + 1) ##0 resp_data() == resp_data_0 and
	(t + 1) ##0 slave_out2_sig() == slave_out2_sig_0 and
	(t + 1) ##0 master_in_notify() == 0 and
	(t + 1) ##0 master_out_notify() == 0 and
	(t + 1) ##0 slave_in0_notify() == 0 and
	(t + 1) ##0 slave_in1_notify() == 0 and
	(t + 1) ##0 slave_in2_notify() == 0 and
	(t + 1) ##0 slave_in3_notify() == 0 and
	(t + 1) ##0 slave_out0_notify() == 0 and
	(t + 1) ##0 slave_out1_notify() == 0 and
	(t + 1) ##0 slave_out2_notify() == 1 and
	(t + 1) ##0 slave_out3_notify() == 0;
endproperty;
wait_state_7_a: assert property (disable iff (reset) wait_state_7_p(1)); //ASSIGN t_end offset here



property wait_state_8_p(o);
 bit[31:0] req_trans_type_0;
 bit[31:0] resp_ack_0;
 bit[31:0] resp_data_0;
	t ##0 hold(req_trans_type_0, req.trans_type()) and
	t ##0 hold(resp_ack_0, resp.ack()) and
	t ##0 hold(resp_data_0, resp.data()) and
	t ##0 state_8() and
	t ##0 !(slave_in2_sync())
implies
	(t + 1) ##0 state_8() and
	(t + 1) ##0 req_trans_type() == req_trans_type_0 and
	(t + 1) ##0 resp_ack() == resp_ack_0 and
	(t + 1) ##0 resp_data() == resp_data_0 and
	(t + 1) ##0 master_in_notify() == 0 and
	(t + 1) ##0 master_out_notify() == 0 and
	(t + 1) ##0 slave_in0_notify() == 0 and
	(t + 1) ##0 slave_in1_notify() == 0 and
	(t + 1) ##0 slave_in2_notify() == 1 and
	(t + 1) ##0 slave_in3_notify() == 0 and
	(t + 1) ##0 slave_out0_notify() == 0 and
	(t + 1) ##0 slave_out1_notify() == 0 and
	(t + 1) ##0 slave_out2_notify() == 0 and
	(t + 1) ##0 slave_out3_notify() == 0;
endproperty;
wait_state_8_a: assert property (disable iff (reset) wait_state_8_p(1)); //ASSIGN t_end offset here



property wait_state_9_p(o);
 bit[31:0] req_trans_type_0;
 bit[31:0] resp_ack_0;
 bit[31:0] resp_data_0;
 bit[31:0] slave_out3_sig_0;
	t ##0 hold(req_trans_type_0, req.trans_type()) and
	t ##0 hold(resp_ack_0, resp.ack()) and
	t ##0 hold(resp_data_0, resp.data()) and
	t ##0 hold(slave_out3_sig_0, slave_out3_sig()) and
	t ##0 state_9() and
	t ##0 !(slave_out3_sync())
implies
	(t + 1) ##0 state_9() and
	(t + 1) ##0 req_trans_type() == req_trans_type_0 and
	(t + 1) ##0 resp_ack() == resp_ack_0 and
	(t + 1) ##0 resp_data() == resp_data_0 and
	(t + 1) ##0 slave_out3_sig() == slave_out3_sig_0 and
	(t + 1) ##0 master_in_notify() == 0 and
	(t + 1) ##0 master_out_notify() == 0 and
	(t + 1) ##0 slave_in0_notify() == 0 and
	(t + 1) ##0 slave_in1_notify() == 0 and
	(t + 1) ##0 slave_in2_notify() == 0 and
	(t + 1) ##0 slave_in3_notify() == 0 and
	(t + 1) ##0 slave_out0_notify() == 0 and
	(t + 1) ##0 slave_out1_notify() == 0 and
	(t + 1) ##0 slave_out2_notify() == 0 and
	(t + 1) ##0 slave_out3_notify() == 1;
endproperty;
wait_state_9_a: assert property (disable iff (reset) wait_state_9_p(1)); //ASSIGN t_end offset here



endmodule

//DESIGNER SHOULD PAY ATTENTION FOR USING THE MODEL CORRECT NAME FOR BINDING AND TO REFER TO THE RESET SIGNAL USED IN IT
bind Bus_new Bus_new_verification inst (.*, .reset());
