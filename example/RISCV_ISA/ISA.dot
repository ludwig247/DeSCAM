digraph ISA {  graph [rankdir=TD];
state_0[ label = "------"];
state_1[ label = "section = run"];
state_2[ label = "aluOp1 = 0"];
state_3[ label = "aluOp2 = 0"];
state_4[ label = "aluResult = 0"];
state_5[ label = "encodedInstr = 0"];
state_6[ label = "fromMemoryData.loadedData = 0"];
state_7[ label = "memoryAccess.addrIn = 0"];
state_8[ label = "memoryAccess.dataIn = 0"];
state_9[ label = "memoryAccess.mask = MT_B"];
state_10[ label = "memoryAccess.req = ME_RD"];
state_11[ label = "pcReg = 0"];
state_12[ label = "phase = execute"];
state_13[ label = "regfile.reg_file_01 = 0"];
state_14[ label = "regfile.reg_file_02 = 0"];
state_15[ label = "regfile.reg_file_03 = 0"];
state_16[ label = "regfile.reg_file_04 = 0"];
state_17[ label = "regfile.reg_file_05 = 0"];
state_18[ label = "regfile.reg_file_06 = 0"];
state_19[ label = "regfile.reg_file_07 = 0"];
state_20[ label = "regfile.reg_file_08 = 0"];
state_21[ label = "regfile.reg_file_09 = 0"];
state_22[ label = "regfile.reg_file_10 = 0"];
state_23[ label = "regfile.reg_file_11 = 0"];
state_24[ label = "regfile.reg_file_12 = 0"];
state_25[ label = "regfile.reg_file_13 = 0"];
state_26[ label = "regfile.reg_file_14 = 0"];
state_27[ label = "regfile.reg_file_15 = 0"];
state_28[ label = "regfile.reg_file_16 = 0"];
state_29[ label = "regfile.reg_file_17 = 0"];
state_30[ label = "regfile.reg_file_18 = 0"];
state_31[ label = "regfile.reg_file_19 = 0"];
state_32[ label = "regfile.reg_file_20 = 0"];
state_33[ label = "regfile.reg_file_21 = 0"];
state_34[ label = "regfile.reg_file_22 = 0"];
state_35[ label = "regfile.reg_file_23 = 0"];
state_36[ label = "regfile.reg_file_24 = 0"];
state_37[ label = "regfile.reg_file_25 = 0"];
state_38[ label = "regfile.reg_file_26 = 0"];
state_39[ label = "regfile.reg_file_27 = 0"];
state_40[ label = "regfile.reg_file_28 = 0"];
state_41[ label = "regfile.reg_file_29 = 0"];
state_42[ label = "regfile.reg_file_30 = 0"];
state_43[ label = "regfile.reg_file_31 = 0"];
state_44[ label = "regfileWrite.dst = 0"];
state_45[ label = "regfileWrite.dstData = 0"];
state_46[ label = "phase = fetch"];
state_47[ label = "while (true)"];
state_48[ label = "if ((phase == fetch))"];
state_49[ label = "memoryAccess.req = ME_RD"];
state_50[ label = "memoryAccess.mask = MT_W"];
state_51[ label = "memoryAccess.addrIn = pcReg"];
state_52[ label = "memoryAccess.dataIn = 0"];
state_53[ label = "toMemoryPort_sig = memoryAccess"];
state_54[ label = "fromMemoryPort_notify = true"];
state_55[ label = "encodedInstr = fromMemoryData.loadedData"];
state_56[ label = "phase = execute"];
state_57[ label = "if ((phase == execute))"];
state_58[ label = "if ((getEncType(encodedInstr) == ENC_R))"];
state_59[ label = "fromRegsPort.read(regfile)"];
state_60[ label = "getRs1Addr(encodedInstr)"];
state_61[ label = "aluOp1 = readRegfile(regfile,getRs1Addr(encodedInstr))"];
state_62[ label = "getRs2Addr(encodedInstr)"];
state_63[ label = "aluOp2 = readRegfile(regfile,getRs2Addr(encodedInstr))"];
state_64[ label = "aluResult = getALUresult(getALUfunc(getInstrType(encodedInstr)),aluOp1,aluOp2)"];
state_65[ label = "regfileWrite.dst = getRdAddr(encodedInstr)"];
state_66[ label = "regfileWrite.dstData = aluResult"];
state_67[ label = "toRegsPort.write(regfileWrite)"];
state_68[ label = "pcReg = (pcReg + 4)"];
state_69[ label = "phase = fetch"];
state_70[ label = "------"];
state_71[ label = "if ((getEncType(encodedInstr) == ENC_B))"];
state_72[ label = "fromRegsPort.read(regfile)"];
state_73[ label = "getRs1Addr(encodedInstr)"];
state_74[ label = "aluOp1 = readRegfile(regfile,getRs1Addr(encodedInstr))"];
state_75[ label = "getRs2Addr(encodedInstr)"];
state_76[ label = "aluOp2 = readRegfile(regfile,getRs2Addr(encodedInstr))"];
state_77[ label = "aluResult = getALUresult(getALUfunc(getInstrType(encodedInstr)),aluOp1,aluOp2)"];
state_78[ label = "pcReg = branchPCcalculation(aluResult,encodedInstr,pcReg)"];
state_79[ label = "if ((getEncType(encodedInstr) == ENC_S))"];
state_80[ label = "fromRegsPort.read(regfile)"];
state_81[ label = "getRs1Addr(encodedInstr)"];
state_82[ label = "aluOp1 = readRegfile(regfile,getRs1Addr(encodedInstr))"];
state_83[ label = "aluOp2 = getImmediate(encodedInstr)"];
state_84[ label = "aluResult = getALUresult(ALU_ADD,aluOp1,aluOp2)"];
state_85[ label = "memoryAccess.req = ME_WR"];
state_86[ label = "memoryAccess.mask = getMemoryMask(getInstrType(encodedInstr))"];
state_87[ label = "memoryAccess.addrIn = aluResult"];
state_88[ label = "getRs2Addr(encodedInstr)"];
state_89[ label = "memoryAccess.dataIn = readRegfile(regfile,getRs2Addr(encodedInstr))"];
state_90[ label = "toMemoryPort_sig = memoryAccess"];
state_91[ label = "fromMemoryPort_notify = true"];
state_92[ label = "pcReg = (pcReg + 4)"];
state_93[ label = "if ((getEncType(encodedInstr) == ENC_U))"];
state_94[ label = "regfileWrite.dst = getRdAddr(encodedInstr)"];
state_95[ label = "regfileWrite.dstData = getEncUALUresult(encodedInstr,pcReg)"];
state_96[ label = "toRegsPort.write(regfileWrite)"];
state_97[ label = "pcReg = (pcReg + 4)"];
state_98[ label = "if ((getEncType(encodedInstr) == ENC_J))"];
state_99[ label = "regfileWrite.dst = getRdAddr(encodedInstr)"];
state_100[ label = "regfileWrite.dstData = (pcReg + 4)"];
state_101[ label = "toRegsPort.write(regfileWrite)"];
state_102[ label = "pcReg = (pcReg + getImmediate(encodedInstr))"];
state_103[ label = "if ((getEncType(encodedInstr) == ENC_I_I))"];
state_104[ label = "fromRegsPort.read(regfile)"];
state_105[ label = "getRs1Addr(encodedInstr)"];
state_106[ label = "aluOp1 = readRegfile(regfile,getRs1Addr(encodedInstr))"];
state_107[ label = "aluOp2 = getImmediate(encodedInstr)"];
state_108[ label = "aluResult = getALUresult(getALUfunc(getInstrType(encodedInstr)),aluOp1,aluOp2)"];
state_109[ label = "regfileWrite.dst = getRdAddr(encodedInstr)"];
state_110[ label = "regfileWrite.dstData = aluResult"];
state_111[ label = "toRegsPort.write(regfileWrite)"];
state_112[ label = "pcReg = (pcReg + 4)"];
state_113[ label = "if ((getEncType(encodedInstr) == ENC_I_L))"];
state_114[ label = "fromRegsPort.read(regfile)"];
state_115[ label = "getRs1Addr(encodedInstr)"];
state_116[ label = "aluOp1 = readRegfile(regfile,getRs1Addr(encodedInstr))"];
state_117[ label = "aluOp2 = getImmediate(encodedInstr)"];
state_118[ label = "aluResult = getALUresult(ALU_ADD,aluOp1,aluOp2)"];
state_119[ label = "memoryAccess.req = ME_RD"];
state_120[ label = "memoryAccess.mask = getMemoryMask(getInstrType(encodedInstr))"];
state_121[ label = "memoryAccess.addrIn = aluResult"];
state_122[ label = "memoryAccess.dataIn = 0"];
state_123[ label = "regfileWrite.dst = getRdAddr(encodedInstr)"];
state_124[ label = "toMemoryPort_sig = memoryAccess"];
state_125[ label = "fromMemoryPort_notify = true"];
state_126[ label = "regfileWrite.dstData = fromMemoryData.loadedData"];
state_127[ label = "toRegsPort.write(regfileWrite)"];
state_128[ label = "pcReg = (pcReg + 4)"];
state_129[ label = "if ((getEncType(encodedInstr) == ENC_I_J))"];
state_130[ label = "fromRegsPort.read(regfile)"];
state_131[ label = "regfileWrite.dst = getRdAddr(encodedInstr)"];
state_132[ label = "regfileWrite.dstData = (pcReg + 4)"];
state_133[ label = "toRegsPort.write(regfileWrite)"];
state_134[ label = "getRs1Addr(encodedInstr)"];
state_135[ label = "readRegfile(regfile,getRs1Addr(encodedInstr))"];
state_136[ label = "pcReg = (readRegfile(regfile,getRs1Addr(encodedInstr)) + getImmediate(encodedInstr))"];
state_138[ label = "toMemoryPort_notify = true"];
state_139[ label = "wait(SC_ZERO_TIME)"];
state_140[ label = "if (toMemoryPort.sync())"];
state_141[ label = "------"];
state_143[ label = "wait(SC_ZERO_TIME)"];
state_144[ label = "if (fromMemoryPort.sync())"];
state_145[ label = "fromMemoryData = fromMemoryPort_sig"];
state_147[ label = "toMemoryPort_notify = true"];
state_148[ label = "wait(SC_ZERO_TIME)"];
state_149[ label = "if (toMemoryPort.sync())"];
state_150[ label = "------"];
state_152[ label = "wait(SC_ZERO_TIME)"];
state_153[ label = "if (fromMemoryPort.sync())"];
state_154[ label = "fromMemoryData = fromMemoryPort_sig"];
state_156[ label = "toMemoryPort_notify = true"];
state_157[ label = "wait(SC_ZERO_TIME)"];
state_158[ label = "if (toMemoryPort.sync())"];
state_159[ label = "------"];
state_161[ label = "wait(SC_ZERO_TIME)"];
state_162[ label = "if (fromMemoryPort.sync())"];
state_163[ label = "fromMemoryData = fromMemoryPort_sig"];

state_0 -> state_1;
state_1 -> state_2;
state_2 -> state_3;
state_3 -> state_4;
state_4 -> state_5;
state_5 -> state_6;
state_6 -> state_7;
state_7 -> state_8;
state_8 -> state_9;
state_9 -> state_10;
state_10 -> state_11;
state_11 -> state_12;
state_12 -> state_13;
state_13 -> state_14;
state_14 -> state_15;
state_15 -> state_16;
state_16 -> state_17;
state_17 -> state_18;
state_18 -> state_19;
state_19 -> state_20;
state_20 -> state_21;
state_21 -> state_22;
state_22 -> state_23;
state_23 -> state_24;
state_24 -> state_25;
state_25 -> state_26;
state_26 -> state_27;
state_27 -> state_28;
state_28 -> state_29;
state_29 -> state_30;
state_30 -> state_31;
state_31 -> state_32;
state_32 -> state_33;
state_33 -> state_34;
state_34 -> state_35;
state_35 -> state_36;
state_36 -> state_37;
state_37 -> state_38;
state_38 -> state_39;
state_39 -> state_40;
state_40 -> state_41;
state_41 -> state_42;
state_42 -> state_43;
state_43 -> state_44;
state_44 -> state_45;
state_45 -> state_46;
state_46 -> state_47;
state_47 -> state_48;
state_48 -> state_49[label = "yes"];
state_48 -> state_57[label = "no"];
state_49 -> state_50;
state_50 -> state_51;
state_51 -> state_52;
state_52 -> state_53;
state_53 -> state_138;
state_54 -> state_143;
state_55 -> state_56;
state_56 -> state_57;
state_57 -> state_58[label = "yes"];
state_57 -> state_70[label = "no"];
state_58 -> state_59[label = "yes"];
state_58 -> state_71[label = "no"];
state_59 -> state_60;
state_60 -> state_61;
state_61 -> state_62;
state_62 -> state_63;
state_63 -> state_64;
state_64 -> state_65;
state_65 -> state_66;
state_66 -> state_67;
state_67 -> state_68;
state_68 -> state_69;
state_69 -> state_70;
state_70 -> state_47;
state_71 -> state_72[label = "yes"];
state_71 -> state_79[label = "no"];
state_72 -> state_73;
state_73 -> state_74;
state_74 -> state_75;
state_75 -> state_76;
state_76 -> state_77;
state_77 -> state_78;
state_78 -> state_69;
state_79 -> state_80[label = "yes"];
state_79 -> state_93[label = "no"];
state_80 -> state_81;
state_81 -> state_82;
state_82 -> state_83;
state_83 -> state_84;
state_84 -> state_85;
state_85 -> state_86;
state_86 -> state_87;
state_87 -> state_88;
state_88 -> state_89;
state_89 -> state_90;
state_90 -> state_147;
state_91 -> state_152;
state_92 -> state_69;
state_93 -> state_94[label = "yes"];
state_93 -> state_98[label = "no"];
state_94 -> state_95;
state_95 -> state_96;
state_96 -> state_97;
state_97 -> state_69;
state_98 -> state_99[label = "yes"];
state_98 -> state_103[label = "no"];
state_99 -> state_100;
state_100 -> state_101;
state_101 -> state_102;
state_102 -> state_69;
state_103 -> state_104[label = "yes"];
state_103 -> state_113[label = "no"];
state_104 -> state_105;
state_105 -> state_106;
state_106 -> state_107;
state_107 -> state_108;
state_108 -> state_109;
state_109 -> state_110;
state_110 -> state_111;
state_111 -> state_112;
state_112 -> state_69;
state_113 -> state_114[label = "yes"];
state_113 -> state_129[label = "no"];
state_114 -> state_115;
state_115 -> state_116;
state_116 -> state_117;
state_117 -> state_118;
state_118 -> state_119;
state_119 -> state_120;
state_120 -> state_121;
state_121 -> state_122;
state_122 -> state_123;
state_123 -> state_124;
state_124 -> state_156;
state_125 -> state_161;
state_126 -> state_127;
state_127 -> state_128;
state_128 -> state_69;
state_129 -> state_130[label = "yes"];
state_129 -> state_69[label = "no"];
state_130 -> state_131;
state_131 -> state_132;
state_132 -> state_133;
state_133 -> state_134;
state_134 -> state_135;
state_135 -> state_136;
state_136 -> state_69;
state_138 -> state_139;
state_139 -> state_140;
state_140 -> state_53[label = "no"];
state_140 -> state_141[label = "yes"];
state_141 -> state_54;
state_143 -> state_144;
state_144 -> state_54[label = "no"];
state_144 -> state_145[label = "yes"];
state_145 -> state_55;
state_147 -> state_148;
state_148 -> state_149;
state_149 -> state_90[label = "no"];
state_149 -> state_150[label = "yes"];
state_150 -> state_91;
state_152 -> state_153;
state_153 -> state_91[label = "no"];
state_153 -> state_154[label = "yes"];
state_154 -> state_92;
state_156 -> state_157;
state_157 -> state_158;
state_158 -> state_124[label = "no"];
state_158 -> state_159[label = "yes"];
state_159 -> state_125;
state_161 -> state_162;
state_162 -> state_125[label = "no"];
state_162 -> state_163[label = "yes"];
state_163 -> state_126;

subgraph cluster_0 {
style=filled; color=slategray;
state_54
state_143
state_144
state_145
label = "fromMemoryPort.read(fromMemoryData)";
}
subgraph cluster_1 {
style=filled; color=slategray;
state_91
state_152
state_153
state_154
label = "fromMemoryPort.read(fromMemoryData)";
}
subgraph cluster_2 {
style=filled; color=slategray;
state_125
state_161
state_162
state_163
label = "fromMemoryPort.read(fromMemoryData)";
}
subgraph cluster_3 {
style=filled; color=slategray;
state_53
state_138
state_139
state_140
state_141
label = "toMemoryPort.write(memoryAccess)";
}
subgraph cluster_4 {
style=filled; color=slategray;
state_90
state_147
state_148
state_149
state_150
label = "toMemoryPort.write(memoryAccess)";
}
subgraph cluster_5 {
style=filled; color=slategray;
state_124
state_156
state_157
state_158
state_159
label = "toMemoryPort.write(memoryAccess)";
}
}
